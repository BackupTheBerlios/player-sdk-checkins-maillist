From rubiojr at sheep.berlios.de  Sun Nov  7 15:06:10 2004
From: rubiojr at sheep.berlios.de (Sergio Rubio at BerliOS)
Date: Sun, 7 Nov 2004 15:06:10 +0100
Subject: [Player-sdk-checkins] r4 - in player-sdk/trunk: . DataKits/Sqlite PlayerKits/Gstreamer doc doc/arch doc/arch/images doc/en doc/en/Player.Addins doc/en/Player.Configuration doc/en/Player.Data doc/en/Player.Kits doc/en/Player.Player doc/en/Player.Playlist doc/en/Player.Plugins examples src src/Addins src/Data src/Kits src/Player src/Plugins
Message-ID: <200411071406.iA7E6AXV024020@sheep.berlios.de>

Author: rubiojr
Date: 2004-11-07 15:06:09 +0100 (Sun, 07 Nov 2004)
New Revision: 4

Added:
   player-sdk/trunk/PlayerKits/Gstreamer/GstPlayer.dll.config.in
   player-sdk/trunk/doc/arch/Addins-Arch.dia
   player-sdk/trunk/doc/arch/Architecture.sxw
   player-sdk/trunk/doc/arch/Configuration.dia
   player-sdk/trunk/doc/arch/Kits-Arch.dia
   player-sdk/trunk/doc/arch/Plugin-Arch.dia
   player-sdk/trunk/doc/arch/images/
   player-sdk/trunk/doc/arch/images/PlayerSDK-layers-lowcolor.svg
   player-sdk/trunk/doc/arch/images/PlayerSDK-layers.svg
   player-sdk/trunk/doc/en/Player.Addins/
   player-sdk/trunk/doc/en/Player.Addins/AddinLoader.xml
   player-sdk/trunk/doc/en/Player.Addins/AddinLoadingException.xml
   player-sdk/trunk/doc/en/Player.Addins/AddinUnavailableException.xml
   player-sdk/trunk/doc/en/Player.Addins/IAddin.xml
   player-sdk/trunk/doc/en/Player.Configuration/Configuration.xml
   player-sdk/trunk/doc/en/Player.Configuration/FileStore.xml
   player-sdk/trunk/doc/en/Player.Data/Album.xml
   player-sdk/trunk/doc/en/Player.Data/AlbumMetadata.xml
   player-sdk/trunk/doc/en/Player.Data/Cover.xml
   player-sdk/trunk/doc/en/Player.Data/IAlbumComparer.xml
   player-sdk/trunk/doc/en/Player.Data/ICoverDb.xml
   player-sdk/trunk/doc/en/Player.Data/IDataKit.xml
   player-sdk/trunk/doc/en/Player.Data/ISearchable.xml
   player-sdk/trunk/doc/en/Player.Data/ISongComparer.xml
   player-sdk/trunk/doc/en/Player.Data/SimpleAlbumComparer.xml
   player-sdk/trunk/doc/en/Player.Data/SimpleSongComparer.xml
   player-sdk/trunk/doc/en/Player.Data/Song.xml
   player-sdk/trunk/doc/en/Player.Data/SongMetadata.xml
   player-sdk/trunk/doc/en/Player.Kits/
   player-sdk/trunk/doc/en/Player.Kits/IKit.xml
   player-sdk/trunk/doc/en/Player.Kits/KitManager.xml
   player-sdk/trunk/doc/en/Player.Player/EOSEventHandler.xml
   player-sdk/trunk/doc/en/Player.Player/IPlayerKit.xml
   player-sdk/trunk/doc/en/Player.Player/RepetitionType.xml
   player-sdk/trunk/doc/en/Player.Player/StateEventHandler.xml
   player-sdk/trunk/doc/en/Player.Player/TickEventHandler.xml
   player-sdk/trunk/doc/en/Player.Playlist/ClearedEventHandler.xml
   player-sdk/trunk/doc/en/Player.Playlist/IPlaylist.xml
   player-sdk/trunk/doc/en/Player.Playlist/Playlist.xml
   player-sdk/trunk/doc/en/Player.Playlist/SongAddedEventHandler.xml
   player-sdk/trunk/doc/en/Player.Playlist/SongChangedEventHandler.xml
   player-sdk/trunk/doc/en/Player.Playlist/SongRemovedEventHandler.xml
   player-sdk/trunk/doc/en/Player.Plugins/
   player-sdk/trunk/doc/en/Player.Plugins/IPlugin.xml
   player-sdk/trunk/doc/en/Player.Plugins/PluginManager.xml
   player-sdk/trunk/examples/KitManagerTest.cs
   player-sdk/trunk/src/Addins/
   player-sdk/trunk/src/Addins/AddinLoader.cs
   player-sdk/trunk/src/Addins/AddinLoadingException.cs
   player-sdk/trunk/src/Addins/AddinUnavailableException.cs
   player-sdk/trunk/src/Addins/IAddin.cs
   player-sdk/trunk/src/Data/IDataKit.cs
   player-sdk/trunk/src/Kits/
   player-sdk/trunk/src/Kits/IKit.cs
   player-sdk/trunk/src/Kits/KitManager.cs
   player-sdk/trunk/src/Player/IPlayerKit.cs
   player-sdk/trunk/src/Plugins/
   player-sdk/trunk/src/Plugins/IPlugin.cs
   player-sdk/trunk/src/Plugins/PluginManager.cs
Removed:
   player-sdk/trunk/PlayerKits/Gstreamer/GstPlayer.dll.config
   player-sdk/trunk/doc/en/Player.Configuration/Configuration.xml
   player-sdk/trunk/doc/en/Player.Configuration/FileStore.xml
   player-sdk/trunk/doc/en/Player.Data/Album.xml
   player-sdk/trunk/doc/en/Player.Data/AlbumMetadata.xml
   player-sdk/trunk/doc/en/Player.Data/Cover.xml
   player-sdk/trunk/doc/en/Player.Data/IAlbumComparer.xml
   player-sdk/trunk/doc/en/Player.Data/ICoverDb.xml
   player-sdk/trunk/doc/en/Player.Data/IMusicDb.xml
   player-sdk/trunk/doc/en/Player.Data/ISearchable.xml
   player-sdk/trunk/doc/en/Player.Data/ISongComparer.xml
   player-sdk/trunk/doc/en/Player.Data/SimpleAlbumComparer.xml
   player-sdk/trunk/doc/en/Player.Data/SimpleSongComparer.xml
   player-sdk/trunk/doc/en/Player.Data/Song.xml
   player-sdk/trunk/doc/en/Player.Data/SongMetadata.xml
   player-sdk/trunk/doc/en/Player.Player/EOSEventHandler.xml
   player-sdk/trunk/doc/en/Player.Player/IPlayer.xml
   player-sdk/trunk/doc/en/Player.Player/RepetitionType.xml
   player-sdk/trunk/doc/en/Player.Player/StateEventHandler.xml
   player-sdk/trunk/doc/en/Player.Player/TickEventHandler.xml
   player-sdk/trunk/doc/en/Player.Playlist/ClearedEventHandler.xml
   player-sdk/trunk/doc/en/Player.Playlist/IPlaylist.xml
   player-sdk/trunk/doc/en/Player.Playlist/Playlist.xml
   player-sdk/trunk/doc/en/Player.Playlist/SongAddedEventHandler.xml
   player-sdk/trunk/doc/en/Player.Playlist/SongChangedEventHandler.xml
   player-sdk/trunk/doc/en/Player.Playlist/SongRemovedEventHandler.xml
   player-sdk/trunk/doc/en/Player.Services/
   player-sdk/trunk/src/Data/IMusicDb.cs
   player-sdk/trunk/src/Player/IPlayer.cs
   player-sdk/trunk/src/Services/
Modified:
   player-sdk/trunk/ChangeLog
   player-sdk/trunk/DataKits/Sqlite/SqliteDataKit.cs
   player-sdk/trunk/PlayerKits/Gstreamer/GstPlayer.cs
   player-sdk/trunk/PlayerKits/Gstreamer/Makefile.am
   player-sdk/trunk/PlayerSdk.ini
   player-sdk/trunk/configure.in
   player-sdk/trunk/doc/Makefile.am
   player-sdk/trunk/examples/DbTest.cs
   player-sdk/trunk/examples/Makefile.am
   player-sdk/trunk/src/sources.list
Log:
api docs regenerated
added arch docs and dia uml files
added new Kits, Plugins and Addins namespace
Kit changes to use the new interfaces



Modified: player-sdk/trunk/ChangeLog
===================================================================
--- player-sdk/trunk/ChangeLog	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/ChangeLog	2004-11-07 14:06:09 UTC (rev 4)
@@ -1,3 +1,40 @@
+2004-11-07  Sergio Rubio  <sergio.rubio at hispalinux.es>
+
+	* DataKits/Sqlite/SqliteDataKit.cs:
+	* PlayerKits/Gstreamer/GstPlayer.cs: (GstPlayer): Updated to use the new
+	IDataKit name.
+	* PlayerKits/Gstreamer/GstPlayer.dll.config:
+	* PlayerKits/Gstreamer/GstPlayer.dll.config.in: fixed native library
+	prefix and processed by configure.
+	* PlayerKits/Gstreamer/Makefile.am:
+	* PlayerSdk.ini: Added Plugins section
+	* configure.in: Added GstPlayer.dll.config.in processing
+	* doc/Makefile.am: Added disthock to include the docs
+	* doc/*: monodoc docs regenerated. Added dia uml files and architecture
+	docs and images.
+	* examples/DbTest.cs: (DbTest.Main): Fixed
+	* examples/KitManagerTest.cs: New example test
+	(KitManagerTest.Main):
+	* examples/Makefile.am: New example test
+	* src/Addins/AddinLoader.cs: 
+	* src/Addins/AddinLoadingException.cs:
+	* src/Addins/AddinUnavailableException.cs:
+	* src/Addins/IAddin.cs: New Addins namespace
+	* src/Data/IDataKit.cs:
+	* src/Data/IMusicDb.cs: Renamed to IDataKit
+	* src/Kits/IKit.cs: 
+	* src/Kits/KitManager.cs: New Kits namespace
+	* src/Player/IPlayer.cs: Renamed to IPlayerKit
+	* src/Player/IPlayerKit.cs: 
+	* src/Plugins/IPlugin.cs:
+	* src/Plugins/PluginManager.cs: Added Plugins namespace
+	* src/Services/SdkServices.cs:
+	* src/Services/ServiceUnavailableException.cs:
+	* src/Services/tests/Makefile:
+	* src/Services/tests/SdkServicesTest.cs: Removed obsolete Services
+	namespace
+	* src/sources.list: updated
+
 2004-10-24  Sergio Rubio  <sergio.rubio at hispalinux.es>
 	
 	* Docs regenerated

Modified: player-sdk/trunk/DataKits/Sqlite/SqliteDataKit.cs
===================================================================
--- player-sdk/trunk/DataKits/Sqlite/SqliteDataKit.cs	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/DataKits/Sqlite/SqliteDataKit.cs	2004-11-07 14:06:09 UTC (rev 4)
@@ -27,7 +27,7 @@
     using System.IO;
     using System.Text;
 
-    public class SqliteDataKit : IMusicDb
+    public class SqliteDataKit : IDataKit 
     {
 	private SqliteConnection conn;
 	private string dbfile = "musicdb.sqlite";
@@ -44,6 +44,28 @@
 		SetupDb ();
 	}
 
+	private string name = "SqliteDataKit";
+	public string Name {
+		get {
+			return name;
+		}
+	}
+	
+	private string version = "0.1";
+	public string Version {
+		get {
+			return version;
+		}
+	}
+	
+	private string description = "Player.SDK sqlite database kit";
+	public string Description {
+		get {
+			return description;
+		}
+	}
+	
+
 	public ArrayList Songs {
 	    get {
 		ArrayList songs = new ArrayList ();
@@ -95,6 +117,14 @@
 	    }
 	}
 
+	public void Load ()
+	{
+	}
+
+	public void Unload ()
+	{
+	}
+
 	public bool AddSong (Song song)
 	{
 	    string artists = ArrayToSqlString (song.Artists);

Modified: player-sdk/trunk/PlayerKits/Gstreamer/GstPlayer.cs
===================================================================
--- player-sdk/trunk/PlayerKits/Gstreamer/GstPlayer.cs	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/PlayerKits/Gstreamer/GstPlayer.cs	2004-11-07 14:06:09 UTC (rev 4)
@@ -26,7 +26,7 @@
 using Player.Playlist;
 using Player.Data;
 
-public class GstPlayer : GLib.Object, IPlayer
+public class GstPlayer : GLib.Object, IPlayerKit
 {
 
     private bool stopped = true;
@@ -60,6 +60,77 @@
 	    }
     }
 
+
+    public event TickEventHandler TickEvent;
+
+    /*
+     * Set or get the position in the song.
+     */
+    public int Position {
+	    get {
+		    return player_tell (Raw);
+	    }
+
+	    set {
+		    player_seek (Raw, value);
+
+		    if (TickEvent != null)
+			    TickEvent (value);
+	    }
+    }
+
+    /*
+     * Controls the volume level of the player;
+     */
+    public int Volume {
+	    get {
+		    return player_get_volume (Raw);
+	    }
+
+	    set {
+		    player_set_volume (Raw, value);
+	    }
+    }
+
+    public IPlaylist Playlist {
+		get {
+			return playlist;
+		}
+		set {
+			Stop ();
+			this.playlist = value;
+		}
+    }
+
+	private string name = "GstPlayerKit";
+	public string Name {
+		get {
+			return name;
+		}
+	}
+
+	private string description = "Gstreamer Player Kit";
+	public string Description {
+		get {
+			return description;
+		}
+	}
+
+	private string version = "0.1";
+	public string Version {
+		get {
+			return version;
+		}
+	}
+	
+	public void Load ()
+	{
+	}
+
+	public void Unload ()
+	{
+	}
+
     public void Play ()
     {
 
@@ -83,7 +154,7 @@
 
     public void Pause ()
     {
-	player_pause (Raw);
+		player_pause (Raw);
     }
     
     /*
@@ -105,47 +176,6 @@
 	    if (StateEvent != null)
 		    StateEvent (playing);
     }
-
-    public event TickEventHandler TickEvent;
-
-    /*
-     * Set or get the position in the song.
-     */
-    public int Position {
-	    get {
-		    return player_tell (Raw);
-	    }
-
-	    set {
-		    player_seek (Raw, value);
-
-		    if (TickEvent != null)
-			    TickEvent (value);
-	    }
-    }
-
-    /*
-     * Controls the volume level of the player;
-     */
-    public int Volume {
-	    get {
-		    return player_get_volume (Raw);
-	    }
-
-	    set {
-		    player_set_volume (Raw, value);
-	    }
-    }
-
-    public IPlaylist Playlist {
-	get {
-	    return playlist;
-	}
-	set {
-	    Stop ();
-	    this.playlist = value;
-	}
-    }
     
     public void Next ()
     {

Deleted: player-sdk/trunk/PlayerKits/Gstreamer/GstPlayer.dll.config
===================================================================
--- player-sdk/trunk/PlayerKits/Gstreamer/GstPlayer.dll.config	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/PlayerKits/Gstreamer/GstPlayer.dll.config	2004-11-07 14:06:09 UTC (rev 4)
@@ -1,4 +0,0 @@
-<configuration>
-  <dllmap dll="libgstplayer" target="/home/rubiojr/svn/mspace/Muine.Sdk/PlayerKits/Gstreamer/libgstplayer.so"/>
-  <dllmap dll="libgobject-2.0-0.dll" target="libgobject-2.0.so.0"/>
-</configuration>

Added: player-sdk/trunk/PlayerKits/Gstreamer/GstPlayer.dll.config.in
===================================================================
--- player-sdk/trunk/PlayerKits/Gstreamer/GstPlayer.dll.config.in	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/PlayerKits/Gstreamer/GstPlayer.dll.config.in	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,4 @@
+<configuration>
+  <dllmap dll="libgstplayer" target="@prefix@/lib/Player.Sdk/PlayerKits/libgstplayer.so"/>
+  <dllmap dll="libgobject-2.0-0.dll" target="libgobject-2.0.so.0"/>
+</configuration>

Modified: player-sdk/trunk/PlayerKits/Gstreamer/Makefile.am
===================================================================
--- player-sdk/trunk/PlayerKits/Gstreamer/Makefile.am	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/PlayerKits/Gstreamer/Makefile.am	2004-11-07 14:06:09 UTC (rev 4)
@@ -16,6 +16,6 @@
 libgstplayerdir = $(prefix)/lib/Player.Sdk/PlayerKits
 libgstplayer_DATA = GstPlayer.dll libgstplayer.so GstPlayer.dll.config
 
-EXTRA_DIST = GstPlayer.dll.config $(CSSOURCES) $(CSOURCES) $(CHEADERS)
+EXTRA_DIST = GstPlayer.dll.config.in $(CSSOURCES) $(CSOURCES) $(CHEADERS)
 
-CLEANFILES = GstPlayer.dll libgstplayer.so
+CLEANFILES = GstPlayer.dll libgstplayer.so GstPlayer.dll.config

Modified: player-sdk/trunk/PlayerSdk.ini
===================================================================
--- player-sdk/trunk/PlayerSdk.ini	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/PlayerSdk.ini	2004-11-07 14:06:09 UTC (rev 4)
@@ -7,3 +7,6 @@
 DataKit.Assembly = SqliteDataKit
 
 [Playlist]
+
+[Plugins]
+Disabled =

Modified: player-sdk/trunk/configure.in
===================================================================
--- player-sdk/trunk/configure.in	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/configure.in	2004-11-07 14:06:09 UTC (rev 4)
@@ -41,6 +41,7 @@
 src/player-sdk.pc
 PlayerKits/Makefile
 PlayerKits/Gstreamer/Makefile
+PlayerKits/Gstreamer/GstPlayer.dll.config
 DataKits/Makefile
 DataKits/Sqlite/Makefile
 ])

Modified: player-sdk/trunk/doc/Makefile.am
===================================================================
--- player-sdk/trunk/doc/Makefile.am	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/Makefile.am	2004-11-07 14:06:09 UTC (rev 4)
@@ -14,6 +14,14 @@
 docsdir = `monodoc --get-sourcesdir`
 docs_DATA = player-sdk.source player-sdk.tree player-sdk.zip
 
+dist-hook:
+	mkdir -p $(distdir)/en
+	cp en/*.xml $(distdir)/en/
+	for i in $(NAMESPACES); do				\
+		mkdir -p $(distdir)/en/$$i;			\
+		cp $(srcdir)/en/$$i/*.xml $(distdir)/en/$$i;	\
+	done
+
 CLEANFILES = player-sdk.tree player-sdk.zip 
 
 EXTRA_DIST =			\

Added: player-sdk/trunk/doc/arch/Addins-Arch.dia
===================================================================
(Binary files differ)


Property changes on: player-sdk/trunk/doc/arch/Addins-Arch.dia
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: player-sdk/trunk/doc/arch/Architecture.sxw
===================================================================
(Binary files differ)


Property changes on: player-sdk/trunk/doc/arch/Architecture.sxw
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: player-sdk/trunk/doc/arch/Configuration.dia
===================================================================
(Binary files differ)


Property changes on: player-sdk/trunk/doc/arch/Configuration.dia
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: player-sdk/trunk/doc/arch/Kits-Arch.dia
===================================================================
(Binary files differ)


Property changes on: player-sdk/trunk/doc/arch/Kits-Arch.dia
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: player-sdk/trunk/doc/arch/Plugin-Arch.dia
===================================================================
(Binary files differ)


Property changes on: player-sdk/trunk/doc/arch/Plugin-Arch.dia
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: player-sdk/trunk/doc/arch/images/PlayerSDK-layers-lowcolor.svg
===================================================================
--- player-sdk/trunk/doc/arch/images/PlayerSDK-layers-lowcolor.svg	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/arch/images/PlayerSDK-layers-lowcolor.svg	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,214 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN"
+"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
+<!-- Created with Inkscape (http://www.inkscape.org/) -->
+<svg
+   id="svg1"
+   sodipodi:version="0.32"
+   inkscape:version="0.39"
+   width="210mm"
+   height="297mm"
+   sodipodi:docbase="/home/rubiojr/Desktop/player-sdk-trunk/doc/arch/images"
+   sodipodi:docname="PlayerSDK-layers-lowcolor.svg"
+   inkscape:export-filename="/home/rubiojr/Desktop/lowcolor.png"
+   inkscape:export-xdpi="66.110001"
+   inkscape:export-ydpi="66.110001"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:cc="http://web.resource.org/cc/"
+   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
+   xmlns:xml="http://www.w3.org/XML/1998/namespace"
+   xmlns:dc="http://purl.org/dc/elements/1.1/"
+   xmlns:xlink="http://www.w3.org/1999/xlink">
+  <defs
+     id="defs3" />
+  <sodipodi:namedview
+     id="base"
+     pagecolor="#ffffff"
+     bordercolor="#666666"
+     borderopacity="1.0"
+     inkscape:pageopacity="0.0"
+     inkscape:pageshadow="2"
+     inkscape:zoom="1.0000000"
+     inkscape:cx="289.78603"
+     inkscape:cy="536.56995"
+     inkscape:window-width="1016"
+     inkscape:window-height="697"
+     showguides="true"
+     inkscape:guide-bbox="true"
+     inkscape:window-x="0"
+     inkscape:window-y="25" />
+  <metadata
+     id="metadata4">
+    <rdf:RDF
+       id="RDF5">
+      <cc:Work
+         rdf:about=""
+         id="Work6">
+        <dc:format
+           id="format7">image/svg+xml</dc:format>
+        <dc:type
+           id="type9"
+           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
+      </cc:Work>
+    </rdf:RDF>
+  </metadata>
+  <rect
+     style="fill:#b9b9b9;fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000;"
+     id="rect908"
+     width="475.05707"
+     height="161.23149"
+     x="175.62717"
+     y="456.38150"
+     rx="0.0000000"
+     ry="39.570000"
+     transform="matrix(1.000000,0.000000,0.000000,1.234787,-37.42874,-96.92868)"
+     inkscape:export-filename="/home/rubiojr/Desktop/lowcolor.png"
+     inkscape:export-xdpi="66.000000"
+     inkscape:export-ydpi="66.000000" />
+  <rect
+     style="fill:#fd5252;fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000;"
+     id="rect1530"
+     width="475.05707"
+     height="161.23149"
+     x="175.62717"
+     y="456.38150"
+     rx="0.0000000"
+     ry="47.666561"
+     transform="matrix(1.000000,0.000000,0.000000,1.025048,-37.42874,-172.5226)" />
+  <rect
+     style="fill:#f4ff52;fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000;"
+     id="rect4644"
+     width="73.417908"
+     height="103.64882"
+     x="267.75943"
+     y="136.79764"
+     ry="63.933094"
+     rx="0.0000000"
+     transform="matrix(2.657195,0.000000,0.000000,0.574177,-548.1108,356.7164)" />
+  <text
+     xml:space="preserve"
+     style="font-size:12.000000;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;fill:#000000;fill-opacity:1.0000000;stroke:none;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000;font-family:Bitstream Vera Sans;text-anchor:start;writing-mode:lr;"
+     x="207.29762"
+     y="434.78799"
+     id="text4646"
+     sodipodi:linespacing="100%"
+     transform="matrix(1.985149,0.000000,0.000000,1.852538,-202.1242,-332.1549)"><tspan
+       x="207.29762"
+       y="434.78799"
+       sodipodi:role="line"
+       id="tspan4661">DataKit</tspan></text>
+  <text
+     xml:space="preserve"
+     style="font-size:12.000000;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;fill:#000000;fill-opacity:1.0000000;stroke:none;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000;font-family:Bitstream Vera Sans;text-anchor:start;writing-mode:lr;"
+     x="331.10040"
+     y="380.80423"
+     id="text4655"
+     transform="matrix(1.845173,0.000000,0.000000,1.743752,-464.7415,-344.1027)"
+     sodipodi:linespacing="100%"><tspan
+       id="tspan4656">Player.SDK</tspan></text>
+  <rect
+     style="fill:#f4ff52;fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000;"
+     id="rect1585"
+     width="73.417908"
+     height="103.64882"
+     x="267.75943"
+     y="136.79764"
+     ry="63.933094"
+     rx="0.0000000"
+     transform="matrix(2.657195,0.000000,0.000000,0.574177,-321.0187,356.7164)" />
+  <text
+     xml:space="preserve"
+     style="font-size:12.000000;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;fill:#000000;fill-opacity:1.0000000;stroke:none;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000;font-family:Bitstream Vera Sans;text-anchor:start;writing-mode:lr;"
+     x="207.29762"
+     y="434.78799"
+     id="text4683"
+     sodipodi:linespacing="100%"
+     transform="matrix(1.985149,0.000000,0.000000,1.852538,14.42957,-334.3964)"><tspan
+       x="207.29762"
+       y="434.78799"
+       sodipodi:role="line"
+       id="tspan4690">PlayerKit</tspan></text>
+  <text
+     xml:space="preserve"
+     style="font-size:12.000000;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;fill:#000000;fill-opacity:1.0000000;stroke:none;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000;font-family:Bitstream Vera Sans;text-anchor:start;writing-mode:lr;"
+     x="331.10040"
+     y="380.80423"
+     id="text4712"
+     transform="matrix(1.845173,0.000000,0.000000,1.743752,-347.5967,-92.18856)"
+     sodipodi:linespacing="100%"><tspan
+       x="331.10040"
+       y="380.80423"
+       sodipodi:role="line"
+       id="tspan4715">Operating System</tspan></text>
+  <rect
+     style="fill:#f4ff52;fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000;"
+     id="rect1577"
+     width="73.417908"
+     height="103.64882"
+     x="267.75943"
+     y="136.79764"
+     ry="103.99666"
+     rx="0.0000000"
+     transform="matrix(4.454352,0.000000,0.000000,0.352981,-980.4824,339.4165)" />
+  <text
+     xml:space="preserve"
+     style="font-size:12.000000;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;fill:#000000;fill-opacity:1.0000000;stroke:none;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000;font-family:Bitstream Vera Sans;text-anchor:start;writing-mode:lr;"
+     x="207.29762"
+     y="434.78799"
+     id="text1589"
+     sodipodi:linespacing="100%"
+     transform="matrix(1.534528,0.000000,0.000000,1.852538,18.92404,-393.4187)"><tspan
+       x="207.29762"
+       y="434.78799"
+       sodipodi:role="line"
+       id="tspan1592">Playlist</tspan></text>
+  <rect
+     style="fill:#f4ff52;fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000;"
+     id="rect1602"
+     width="73.417908"
+     height="103.64882"
+     x="267.75943"
+     y="136.79764"
+     ry="103.99666"
+     rx="0.0000000"
+     transform="matrix(5.762392,0.000000,0.000000,0.352981,-1380.899,292.6307)" />
+  <text
+     xml:space="preserve"
+     style="font-size:12.000000;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;fill:#000000;fill-opacity:1.0000000;stroke:none;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000;font-family:Bitstream Vera Sans;text-anchor:start;writing-mode:lr;"
+     x="207.29762"
+     y="434.78799"
+     id="text1603"
+     sodipodi:linespacing="100%"
+     transform="matrix(1.985149,0.000000,0.000000,1.852538,-88.01203,-440.2045)"><tspan
+       x="207.29762"
+       y="434.78799"
+       sodipodi:role="line"
+       id="tspan1610">Plugins</tspan></text>
+  <rect
+     style="fill:#8db8ff;fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000;"
+     id="rect943"
+     width="475.05707"
+     height="161.23149"
+     x="175.62717"
+     y="456.38150"
+     rx="0.0000000"
+     ry="95.914467"
+     transform="matrix(1.000000,0.000000,0.000000,0.509417,-37.42874,-25.56866)"
+     inkscape:export-filename="/home/rubiojr/Desktop/PlayerSDK-layers.png"
+     inkscape:export-xdpi="75.638313"
+     inkscape:export-ydpi="75.638313" />
+  <text
+     xml:space="preserve"
+     style="font-size:12.000000;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;fill:#000000;fill-opacity:1.0000000;stroke:none;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000;font-family:Bitstream Vera Sans;text-anchor:start;writing-mode:lr;"
+     x="331.10040"
+     y="380.80423"
+     id="text1566"
+     transform="matrix(1.845173,0.000000,0.000000,1.743752,-464.7415,-425.9749)"
+     sodipodi:linespacing="100%"><tspan
+       x="331.10040"
+       y="380.80423"
+       sodipodi:role="line"
+       id="tspan1569">Graphical User Interface</tspan></text>
+</svg>

Added: player-sdk/trunk/doc/arch/images/PlayerSDK-layers.svg
===================================================================
--- player-sdk/trunk/doc/arch/images/PlayerSDK-layers.svg	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/arch/images/PlayerSDK-layers.svg	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,215 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN"
+"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
+<!-- Created with Inkscape (http://www.inkscape.org/) -->
+<svg
+   id="svg1"
+   sodipodi:version="0.32"
+   inkscape:version="0.39"
+   width="210mm"
+   height="297mm"
+   sodipodi:docbase="/home/rubiojr/Desktop/player-sdk-trunk/doc/arch/images"
+   sodipodi:docname="PlayerSDK-layers.svg"
+   inkscape:export-filename="/home/rubiojr/Desktop/PlayerSDK-layers.png"
+   inkscape:export-xdpi="66.110001"
+   inkscape:export-ydpi="66.110001"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:cc="http://web.resource.org/cc/"
+   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
+   xmlns:xml="http://www.w3.org/XML/1998/namespace"
+   xmlns:dc="http://purl.org/dc/elements/1.1/"
+   xmlns:xlink="http://www.w3.org/1999/xlink">
+  <defs
+     id="defs3" />
+  <sodipodi:namedview
+     id="base"
+     pagecolor="#ffffff"
+     bordercolor="#666666"
+     borderopacity="1.0"
+     inkscape:pageopacity="0.0"
+     inkscape:pageshadow="2"
+     inkscape:zoom="1.0000000"
+     inkscape:cx="289.78603"
+     inkscape:cy="536.56995"
+     inkscape:window-width="1016"
+     inkscape:window-height="697"
+     showguides="true"
+     inkscape:guide-bbox="true"
+     inkscape:window-x="0"
+     inkscape:window-y="25" />
+  <metadata
+     id="metadata4">
+    <rdf:RDF
+       id="RDF5">
+      <cc:Work
+         rdf:about=""
+         id="Work6">
+        <dc:format
+           id="format7">image/svg+xml</dc:format>
+        <dc:type
+           id="type9"
+           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
+      </cc:Work>
+    </rdf:RDF>
+  </metadata>
+  <rect
+     style="fill:#b9b9b9;fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000;"
+     id="rect908"
+     width="475.05707"
+     height="161.23149"
+     x="175.62717"
+     y="456.38150"
+     rx="0.0000000"
+     ry="39.570000"
+     transform="matrix(1.000000,0.000000,0.000000,1.234787,-37.42874,-96.92868)" />
+  <rect
+     style="fill:#d40000;fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000;"
+     id="rect1530"
+     width="475.05707"
+     height="161.23149"
+     x="175.62717"
+     y="456.38150"
+     rx="0.0000000"
+     ry="47.666561"
+     transform="matrix(1.000000,0.000000,0.000000,1.025048,-37.42874,-172.5226)" />
+  <rect
+     style="fill:#f5ff00;fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000;"
+     id="rect4644"
+     width="73.417908"
+     height="103.64882"
+     x="267.75943"
+     y="136.79764"
+     ry="63.933094"
+     rx="0.0000000"
+     transform="matrix(2.657195,0.000000,0.000000,0.574177,-548.1108,356.7164)" />
+  <text
+     xml:space="preserve"
+     style="font-size:12.000000;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;fill:#000000;fill-opacity:1.0000000;stroke:none;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000;font-family:Bitstream Vera Sans;text-anchor:start;writing-mode:lr;"
+     x="207.29762"
+     y="434.78799"
+     id="text4646"
+     sodipodi:linespacing="100%"
+     transform="matrix(1.985149,0.000000,0.000000,1.852538,-202.1242,-332.1549)"><tspan
+       x="207.29762"
+       y="434.78799"
+       sodipodi:role="line"
+       id="tspan4661">DataKit</tspan></text>
+  <text
+     xml:space="preserve"
+     style="font-size:12.000000;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;fill:#000000;fill-opacity:1.0000000;stroke:none;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000;font-family:Bitstream Vera Sans;text-anchor:start;writing-mode:lr;"
+     x="331.10040"
+     y="380.80423"
+     id="text4655"
+     transform="matrix(1.845173,0.000000,0.000000,1.743752,-464.7415,-344.1027)"
+     sodipodi:linespacing="100%"><tspan
+       id="tspan4656">Player.SDK</tspan></text>
+  <rect
+     style="fill:#f5ff00;fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000;"
+     id="rect1585"
+     width="73.417908"
+     height="103.64882"
+     x="267.75943"
+     y="136.79764"
+     ry="63.933094"
+     rx="0.0000000"
+     transform="matrix(2.657195,0.000000,0.000000,0.574177,-321.0187,356.7164)" />
+  <text
+     xml:space="preserve"
+     style="font-size:12.000000;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;fill:#000000;fill-opacity:1.0000000;stroke:none;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000;font-family:Bitstream Vera Sans;text-anchor:start;writing-mode:lr;"
+     x="207.29762"
+     y="434.78799"
+     id="text4683"
+     sodipodi:linespacing="100%"
+     transform="matrix(1.985149,0.000000,0.000000,1.852538,14.42957,-334.3964)"><tspan
+       x="207.29762"
+       y="434.78799"
+       sodipodi:role="line"
+       id="tspan4690">PlayerKit</tspan></text>
+  <text
+     xml:space="preserve"
+     style="font-size:12.000000;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;fill:#000000;fill-opacity:1.0000000;stroke:none;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000;font-family:Bitstream Vera Sans;text-anchor:start;writing-mode:lr;"
+     x="331.10040"
+     y="380.80423"
+     id="text4712"
+     transform="matrix(1.845173,0.000000,0.000000,1.743752,-347.5967,-92.18856)"
+     sodipodi:linespacing="100%"><tspan
+       x="331.10040"
+       y="380.80423"
+       sodipodi:role="line"
+       id="tspan4715">Operating System</tspan></text>
+  <g
+     id="g1595"
+     transform="matrix(0.773004,0.000000,0.000000,1.000000,86.12319,0.000000)">
+    <rect
+       style="fill:#f5ff00;fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000;"
+       id="rect1577"
+       width="73.417908"
+       height="103.64882"
+       x="267.75943"
+       y="136.79764"
+       ry="103.99666"
+       rx="0.0000000"
+       transform="matrix(5.762392,0.000000,0.000000,0.352981,-1379.819,339.4165)" />
+    <text
+       xml:space="preserve"
+       style="font-size:12.000000;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;fill:#000000;fill-opacity:1.0000000;stroke:none;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000;font-family:Bitstream Vera Sans;text-anchor:start;writing-mode:lr;"
+       x="207.29762"
+       y="434.78799"
+       id="text1589"
+       sodipodi:linespacing="100%"
+       transform="matrix(1.985149,0.000000,0.000000,1.852538,-86.93247,-393.4187)"><tspan
+         x="207.29762"
+         y="434.78799"
+         sodipodi:role="line"
+         id="tspan1592">Playlist</tspan></text>
+  </g>
+  <rect
+     style="fill:#f5ff00;fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000;"
+     id="rect1602"
+     width="73.417908"
+     height="103.64882"
+     x="267.75943"
+     y="136.79764"
+     ry="103.99666"
+     rx="0.0000000"
+     transform="matrix(5.762392,0.000000,0.000000,0.352981,-1380.899,292.6307)" />
+  <text
+     xml:space="preserve"
+     style="font-size:12.000000;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;fill:#000000;fill-opacity:1.0000000;stroke:none;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000;font-family:Bitstream Vera Sans;text-anchor:start;writing-mode:lr;"
+     x="207.29762"
+     y="434.78799"
+     id="text1603"
+     sodipodi:linespacing="100%"
+     transform="matrix(1.985149,0.000000,0.000000,1.852538,-88.01203,-440.2045)"><tspan
+       x="207.29762"
+       y="434.78799"
+       sodipodi:role="line"
+       id="tspan1610">Plugins</tspan></text>
+  <rect
+     style="fill:#5f9bff;fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000;"
+     id="rect943"
+     width="475.05707"
+     height="161.23149"
+     x="175.62717"
+     y="456.38150"
+     rx="0.0000000"
+     ry="95.914467"
+     transform="matrix(1.000000,0.000000,0.000000,0.509417,-37.42874,-25.56866)"
+     inkscape:export-filename="/home/rubiojr/Desktop/PlayerSDK-layers.png"
+     inkscape:export-xdpi="75.638313"
+     inkscape:export-ydpi="75.638313" />
+  <text
+     xml:space="preserve"
+     style="font-size:12.000000;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;fill:#000000;fill-opacity:1.0000000;stroke:none;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000;font-family:Bitstream Vera Sans;text-anchor:start;writing-mode:lr;"
+     x="331.10040"
+     y="380.80423"
+     id="text1566"
+     transform="matrix(1.845173,0.000000,0.000000,1.743752,-464.7415,-425.9749)"
+     sodipodi:linespacing="100%"><tspan
+       x="331.10040"
+       y="380.80423"
+       sodipodi:role="line"
+       id="tspan1569">Graphical User Interface</tspan></text>
+</svg>

Added: player-sdk/trunk/doc/en/Player.Addins/AddinLoader.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Addins/AddinLoader.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Addins/AddinLoader.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,54 @@
+<Type Name="AddinLoader" FullName="Player.Addins.AddinLoader">
+  <TypeSignature Language="C#" Value="public class AddinLoader" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base>
+    <BaseTypeName>System.Object</BaseTypeName>
+  </Base>
+  <Interfaces />
+  <Attributes />
+  <Members>
+    <Member MemberName="LoadAddin">
+      <MemberSignature Language="C#" Value="public static Player.Addins.IAddin LoadAddin (string addinDir, string addinAssembly, string addinType);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>Player.Addins.IAddin</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="addinDir" Type="System.String" />
+        <Parameter Name="addinAssembly" Type="System.String" />
+        <Parameter Name="addinType" Type="System.String" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="addinDir">a <see cref="T:System.String" /></param>
+        <param name="addinAssembly">a <see cref="T:System.String" /></param>
+        <param name="addinType">a <see cref="T:System.String" /></param>
+        <returns>a <see cref="T:Player.Addins.IAddin" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public AddinLoader ();" />
+      <MemberType>Constructor</MemberType>
+      <ReturnValue />
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:Player.Addins.AddinLoader" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+  </Members>
+</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Addins/AddinLoadingException.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Addins/AddinLoadingException.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Addins/AddinLoadingException.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,43 @@
+<Type Name="AddinLoadingException" FullName="Player.Addins.AddinLoadingException">
+  <TypeSignature Language="C#" Value="public class AddinLoadingException : System.ApplicationException, ISerializable" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base>
+    <BaseTypeName>System.ApplicationException</BaseTypeName>
+  </Base>
+  <Interfaces>
+    <Interface>
+      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
+    </Interface>
+  </Interfaces>
+  <Attributes />
+  <Members>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public AddinLoadingException (string msg, Exception e);" />
+      <MemberType>Constructor</MemberType>
+      <ReturnValue />
+      <Parameters>
+        <Parameter Name="msg" Type="System.String" />
+        <Parameter Name="e" Type="System.Exception" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="msg">a <see cref="T:System.String" /></param>
+        <param name="e">a <see cref="T:System.Exception" /></param>
+        <returns>a <see cref="T:Player.Addins.AddinLoadingException" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+  </Members>
+</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Addins/AddinUnavailableException.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Addins/AddinUnavailableException.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Addins/AddinUnavailableException.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,57 @@
+<Type Name="AddinUnavailableException" FullName="Player.Addins.AddinUnavailableException">
+  <TypeSignature Language="C#" Value="public class AddinUnavailableException : System.ApplicationException, ISerializable" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base>
+    <BaseTypeName>System.ApplicationException</BaseTypeName>
+  </Base>
+  <Interfaces>
+    <Interface>
+      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
+    </Interface>
+  </Interfaces>
+  <Attributes />
+  <Members>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public AddinUnavailableException (string msg, Exception e);" />
+      <MemberType>Constructor</MemberType>
+      <ReturnValue />
+      <Parameters>
+        <Parameter Name="msg" Type="System.String" />
+        <Parameter Name="e" Type="System.Exception" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="msg">a <see cref="T:System.String" /></param>
+        <param name="e">a <see cref="T:System.Exception" /></param>
+        <returns>a <see cref="T:Player.Addins.AddinUnavailableException" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public AddinUnavailableException (string msg);" />
+      <MemberType>Constructor</MemberType>
+      <ReturnValue />
+      <Parameters>
+        <Parameter Name="msg" Type="System.String" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="msg">a <see cref="T:System.String" /></param>
+        <returns>a <see cref="T:Player.Addins.AddinUnavailableException" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+  </Members>
+</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Addins/IAddin.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Addins/IAddin.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Addins/IAddin.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,84 @@
+<Type Name="IAddin" FullName="Player.Addins.IAddin">
+  <TypeSignature Language="C#" Value="public abstract interface IAddin" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base />
+  <Interfaces />
+  <Attributes />
+  <Members>
+    <Member MemberName="Load">
+      <MemberSignature Language="C#" Value="public virtual void Load ();" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Unload">
+      <MemberSignature Language="C#" Value="public virtual void Unload ();" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Version">
+      <MemberSignature Language="C#" Value="public virtual string Version { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.String" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Name">
+      <MemberSignature Language="C#" Value="public virtual string Name { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.String" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Description">
+      <MemberSignature Language="C#" Value="public virtual string Description { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.String" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+  </Members>
+</Type>
\ No newline at end of file

Deleted: player-sdk/trunk/doc/en/Player.Configuration/Configuration.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Configuration/Configuration.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Configuration/Configuration.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -1,101 +0,0 @@
-<Type Name="Configuration" FullName="Player.Configuration.Configuration">
-  <TypeSignature Language="C#" Value="public class Configuration" Maintainer="auto" />
-  <AssemblyInfo>
-    <AssemblyName>Player.Sdk</AssemblyName>
-    <AssemblyPublicKey>
-    </AssemblyPublicKey>
-    <AssemblyVersion>0.0.0.0</AssemblyVersion>
-    <AssemblyCulture>neutral</AssemblyCulture>
-    <Attributes />
-  </AssemblyInfo>
-  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
-  <Docs>
-    <summary>To be added</summary>
-    <remarks>To be added</remarks>
-  </Docs>
-  <Base>
-    <BaseTypeName>System.Object</BaseTypeName>
-  </Base>
-  <Interfaces />
-  <Attributes />
-  <Members>
-    <Member MemberName="GetInstance">
-      <MemberSignature Language="C#" Value="public static Player.Configuration.Configuration GetInstance ();" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>Player.Configuration.Configuration</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:Player.Configuration.Configuration" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="UserConfigDir">
-      <MemberSignature Language="C#" Value="public string UserConfigDir { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.String</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.String" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="PlayerKitType">
-      <MemberSignature Language="C#" Value="public string PlayerKitType { set; get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.String</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.String" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="PlayerKitAssembly">
-      <MemberSignature Language="C#" Value="public string PlayerKitAssembly { set; get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.String</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.String" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="DataKitType">
-      <MemberSignature Language="C#" Value="public string DataKitType { set; get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.String</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.String" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="DataKitAssembly">
-      <MemberSignature Language="C#" Value="public string DataKitAssembly { set; get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.String</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.String" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-  </Members>
-</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Configuration/Configuration.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Configuration/Configuration.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Configuration/Configuration.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,101 @@
+<Type Name="Configuration" FullName="Player.Configuration.Configuration">
+  <TypeSignature Language="C#" Value="public class Configuration" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base>
+    <BaseTypeName>System.Object</BaseTypeName>
+  </Base>
+  <Interfaces />
+  <Attributes />
+  <Members>
+    <Member MemberName="GetInstance">
+      <MemberSignature Language="C#" Value="public static Player.Configuration.Configuration GetInstance ();" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>Player.Configuration.Configuration</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:Player.Configuration.Configuration" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="UserConfigDir">
+      <MemberSignature Language="C#" Value="public string UserConfigDir { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.String" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="PlayerKitType">
+      <MemberSignature Language="C#" Value="public string PlayerKitType { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.String" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="PlayerKitAssembly">
+      <MemberSignature Language="C#" Value="public string PlayerKitAssembly { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.String" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="DataKitType">
+      <MemberSignature Language="C#" Value="public string DataKitType { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.String" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="DataKitAssembly">
+      <MemberSignature Language="C#" Value="public string DataKitAssembly { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.String" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+  </Members>
+</Type>
\ No newline at end of file

Deleted: player-sdk/trunk/doc/en/Player.Configuration/FileStore.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Configuration/FileStore.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Configuration/FileStore.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -1,88 +0,0 @@
-<Type Name="FileStore" FullName="Player.Configuration.FileStore">
-  <TypeSignature Language="C#" Value="public class FileStore" Maintainer="auto" />
-  <AssemblyInfo>
-    <AssemblyName>Player.Sdk</AssemblyName>
-    <AssemblyPublicKey>
-    </AssemblyPublicKey>
-    <AssemblyVersion>0.0.0.0</AssemblyVersion>
-    <AssemblyCulture>neutral</AssemblyCulture>
-    <Attributes />
-  </AssemblyInfo>
-  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
-  <Docs>
-    <summary>To be added</summary>
-    <remarks>To be added</remarks>
-  </Docs>
-  <Base>
-    <BaseTypeName>System.Object</BaseTypeName>
-  </Base>
-  <Interfaces />
-  <Attributes>
-    <Attribute>
-      <AttributeName>System.Reflection.DefaultMemberAttribute</AttributeName>
-    </Attribute>
-  </Attributes>
-  <Members>
-    <Member MemberName="CreateFile">
-      <MemberSignature Language="C#" Value="public System.IO.FileStream CreateFile (string name, bool truncate);" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.IO.FileStream</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="name" Type="System.String" />
-        <Parameter Name="truncate" Type="System.Boolean" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="name">a <see cref="T:System.String" /></param>
-        <param name="truncate">a <see cref="T:System.Boolean" /></param>
-        <returns>a <see cref="T:System.IO.FileStream" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName=".ctor">
-      <MemberSignature Language="C#" Value="public FileStore (string storeName);" />
-      <MemberType>Constructor</MemberType>
-      <ReturnValue />
-      <Parameters>
-        <Parameter Name="storeName" Type="System.String" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="storeName">a <see cref="T:System.String" /></param>
-        <returns>a <see cref="T:Player.Configuration.FileStore" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Location">
-      <MemberSignature Language="C#" Value="public string Location { set; get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.String</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.String" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Item">
-      <MemberSignature Language="C#" Value="public string Item { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.String</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="objName" Type="System.String" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="objName">a <see cref="T:System.String" /></param>
-        <returns>a <see cref="T:System.String" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-  </Members>
-</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Configuration/FileStore.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Configuration/FileStore.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Configuration/FileStore.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,88 @@
+<Type Name="FileStore" FullName="Player.Configuration.FileStore">
+  <TypeSignature Language="C#" Value="public class FileStore" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base>
+    <BaseTypeName>System.Object</BaseTypeName>
+  </Base>
+  <Interfaces />
+  <Attributes>
+    <Attribute>
+      <AttributeName>System.Reflection.DefaultMemberAttribute</AttributeName>
+    </Attribute>
+  </Attributes>
+  <Members>
+    <Member MemberName="CreateFile">
+      <MemberSignature Language="C#" Value="public System.IO.FileStream CreateFile (string name, bool truncate);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.IO.FileStream</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="name" Type="System.String" />
+        <Parameter Name="truncate" Type="System.Boolean" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="name">a <see cref="T:System.String" /></param>
+        <param name="truncate">a <see cref="T:System.Boolean" /></param>
+        <returns>a <see cref="T:System.IO.FileStream" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public FileStore (string storeName);" />
+      <MemberType>Constructor</MemberType>
+      <ReturnValue />
+      <Parameters>
+        <Parameter Name="storeName" Type="System.String" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="storeName">a <see cref="T:System.String" /></param>
+        <returns>a <see cref="T:Player.Configuration.FileStore" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Location">
+      <MemberSignature Language="C#" Value="public string Location { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.String" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Item">
+      <MemberSignature Language="C#" Value="public string Item { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="objName" Type="System.String" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="objName">a <see cref="T:System.String" /></param>
+        <returns>a <see cref="T:System.String" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+  </Members>
+</Type>
\ No newline at end of file

Deleted: player-sdk/trunk/doc/en/Player.Data/Album.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Data/Album.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Data/Album.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -1,188 +0,0 @@
-<Type Name="Album" FullName="Player.Data.Album">
-  <TypeSignature Language="C#" Value="public class Album : ISearchable, IComparable" Maintainer="auto" />
-  <AssemblyInfo>
-    <AssemblyName>Player.Sdk</AssemblyName>
-    <AssemblyPublicKey>
-    </AssemblyPublicKey>
-    <AssemblyVersion>0.0.0.0</AssemblyVersion>
-    <AssemblyCulture>neutral</AssemblyCulture>
-    <Attributes />
-  </AssemblyInfo>
-  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
-  <Docs>
-    <summary>To be added</summary>
-    <remarks>To be added</remarks>
-  </Docs>
-  <Base>
-    <BaseTypeName>System.Object</BaseTypeName>
-  </Base>
-  <Interfaces>
-    <Interface>
-      <InterfaceName>Player.Data.ISearchable</InterfaceName>
-    </Interface>
-    <Interface>
-      <InterfaceName>System.IComparable</InterfaceName>
-    </Interface>
-  </Interfaces>
-  <Attributes />
-  <Members>
-    <Member MemberName="Compare">
-      <MemberSignature Language="C#" Value="public static int Compare (Player.Data.Album one, Player.Data.Album two);" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Int32</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="one" Type="Player.Data.Album" />
-        <Parameter Name="two" Type="Player.Data.Album" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="one">a <see cref="T:Player.Data.Album" /></param>
-        <param name="two">a <see cref="T:Player.Data.Album" /></param>
-        <returns>a <see cref="T:System.Int32" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="FitsCriteria">
-      <MemberSignature Language="C#" Value="public virtual bool FitsCriteria (string [] search_bits);" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Boolean</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="search_bits" Type="System.String[]" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="search_bits">a <see cref="T:System.String" /></param>
-        <returns>a <see cref="T:System.Boolean" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Equals">
-      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Boolean</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="obj" Type="System.Object" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="obj">a <see cref="T:System.Object" /></param>
-        <returns>a <see cref="T:System.Boolean" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="CompareTo">
-      <MemberSignature Language="C#" Value="public virtual int CompareTo (object obj);" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Int32</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="obj" Type="System.Object" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="obj">a <see cref="T:System.Object" /></param>
-        <returns>a <see cref="T:System.Int32" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName=".ctor">
-      <MemberSignature Language="C#" Value="public Album (Player.Data.AlbumMetadata metadata);" />
-      <MemberType>Constructor</MemberType>
-      <ReturnValue />
-      <Parameters>
-        <Parameter Name="metadata" Type="Player.Data.AlbumMetadata" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="metadata">a <see cref="T:Player.Data.AlbumMetadata" /></param>
-        <returns>a <see cref="T:Player.Data.Album" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Name">
-      <MemberSignature Language="C#" Value="public string Name { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.String</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.String" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Songs">
-      <MemberSignature Language="C#" Value="public System.Collections.ArrayList Songs { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Collections.ArrayList</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.Collections.ArrayList" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Artists">
-      <MemberSignature Language="C#" Value="public System.Collections.ArrayList Artists { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Collections.ArrayList</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.Collections.ArrayList" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Performers">
-      <MemberSignature Language="C#" Value="public System.Collections.ArrayList Performers { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Collections.ArrayList</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.Collections.ArrayList" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Year">
-      <MemberSignature Language="C#" Value="public int Year { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Int32</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.Int32" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Comparer">
-      <MemberSignature Language="C#" Value="public Player.Data.IAlbumComparer Comparer { set; get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>Player.Data.IAlbumComparer</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:Player.Data.IAlbumComparer" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-  </Members>
-</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Data/Album.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Data/Album.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Data/Album.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,188 @@
+<Type Name="Album" FullName="Player.Data.Album">
+  <TypeSignature Language="C#" Value="public class Album : ISearchable, IComparable" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base>
+    <BaseTypeName>System.Object</BaseTypeName>
+  </Base>
+  <Interfaces>
+    <Interface>
+      <InterfaceName>Player.Data.ISearchable</InterfaceName>
+    </Interface>
+    <Interface>
+      <InterfaceName>System.IComparable</InterfaceName>
+    </Interface>
+  </Interfaces>
+  <Attributes />
+  <Members>
+    <Member MemberName="Compare">
+      <MemberSignature Language="C#" Value="public static int Compare (Player.Data.Album one, Player.Data.Album two);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="one" Type="Player.Data.Album" />
+        <Parameter Name="two" Type="Player.Data.Album" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="one">a <see cref="T:Player.Data.Album" /></param>
+        <param name="two">a <see cref="T:Player.Data.Album" /></param>
+        <returns>a <see cref="T:System.Int32" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="FitsCriteria">
+      <MemberSignature Language="C#" Value="public virtual bool FitsCriteria (string [] search_bits);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="search_bits" Type="System.String[]" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="search_bits">a <see cref="T:System.String" /></param>
+        <returns>a <see cref="T:System.Boolean" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Equals">
+      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="obj" Type="System.Object" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="obj">a <see cref="T:System.Object" /></param>
+        <returns>a <see cref="T:System.Boolean" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="CompareTo">
+      <MemberSignature Language="C#" Value="public virtual int CompareTo (object obj);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="obj" Type="System.Object" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="obj">a <see cref="T:System.Object" /></param>
+        <returns>a <see cref="T:System.Int32" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public Album (Player.Data.AlbumMetadata metadata);" />
+      <MemberType>Constructor</MemberType>
+      <ReturnValue />
+      <Parameters>
+        <Parameter Name="metadata" Type="Player.Data.AlbumMetadata" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="metadata">a <see cref="T:Player.Data.AlbumMetadata" /></param>
+        <returns>a <see cref="T:Player.Data.Album" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Name">
+      <MemberSignature Language="C#" Value="public string Name { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.String" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Songs">
+      <MemberSignature Language="C#" Value="public System.Collections.ArrayList Songs { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Collections.ArrayList</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.Collections.ArrayList" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Artists">
+      <MemberSignature Language="C#" Value="public System.Collections.ArrayList Artists { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Collections.ArrayList</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.Collections.ArrayList" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Performers">
+      <MemberSignature Language="C#" Value="public System.Collections.ArrayList Performers { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Collections.ArrayList</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.Collections.ArrayList" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Year">
+      <MemberSignature Language="C#" Value="public int Year { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.Int32" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Comparer">
+      <MemberSignature Language="C#" Value="public Player.Data.IAlbumComparer Comparer { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>Player.Data.IAlbumComparer</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:Player.Data.IAlbumComparer" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+  </Members>
+</Type>
\ No newline at end of file

Deleted: player-sdk/trunk/doc/en/Player.Data/AlbumMetadata.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Data/AlbumMetadata.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Data/AlbumMetadata.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -1,99 +0,0 @@
-<Type Name="AlbumMetadata" FullName="Player.Data.AlbumMetadata">
-  <TypeSignature Language="C#" Value="public class AlbumMetadata" Maintainer="auto" />
-  <AssemblyInfo>
-    <AssemblyName>Player.Sdk</AssemblyName>
-    <AssemblyPublicKey>
-    </AssemblyPublicKey>
-    <AssemblyVersion>0.0.0.0</AssemblyVersion>
-    <AssemblyCulture>neutral</AssemblyCulture>
-    <Attributes />
-  </AssemblyInfo>
-  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
-  <Docs>
-    <summary>To be added</summary>
-    <remarks>To be added</remarks>
-  </Docs>
-  <Base>
-    <BaseTypeName>System.Object</BaseTypeName>
-  </Base>
-  <Interfaces />
-  <Attributes />
-  <Members>
-    <Member MemberName="Name">
-      <MemberSignature Language="C#" Value="public string Name;" />
-      <MemberType>Field</MemberType>
-      <ReturnValue>
-        <ReturnType>System.String</ReturnType>
-      </ReturnValue>
-      <Parameters>
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Songs">
-      <MemberSignature Language="C#" Value="public System.Collections.ArrayList Songs;" />
-      <MemberType>Field</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Collections.ArrayList</ReturnType>
-      </ReturnValue>
-      <Parameters>
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Artists">
-      <MemberSignature Language="C#" Value="public System.Collections.ArrayList Artists;" />
-      <MemberType>Field</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Collections.ArrayList</ReturnType>
-      </ReturnValue>
-      <Parameters>
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Performers">
-      <MemberSignature Language="C#" Value="public System.Collections.ArrayList Performers;" />
-      <MemberType>Field</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Collections.ArrayList</ReturnType>
-      </ReturnValue>
-      <Parameters>
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Year">
-      <MemberSignature Language="C#" Value="public int Year;" />
-      <MemberType>Field</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Int32</ReturnType>
-      </ReturnValue>
-      <Parameters>
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName=".ctor">
-      <MemberSignature Language="C#" Value="public AlbumMetadata ();" />
-      <MemberType>Constructor</MemberType>
-      <ReturnValue />
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:Player.Data.AlbumMetadata" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-  </Members>
-</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Data/AlbumMetadata.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Data/AlbumMetadata.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Data/AlbumMetadata.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,99 @@
+<Type Name="AlbumMetadata" FullName="Player.Data.AlbumMetadata">
+  <TypeSignature Language="C#" Value="public class AlbumMetadata" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base>
+    <BaseTypeName>System.Object</BaseTypeName>
+  </Base>
+  <Interfaces />
+  <Attributes />
+  <Members>
+    <Member MemberName="Name">
+      <MemberSignature Language="C#" Value="public string Name;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Parameters>
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Songs">
+      <MemberSignature Language="C#" Value="public System.Collections.ArrayList Songs;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Collections.ArrayList</ReturnType>
+      </ReturnValue>
+      <Parameters>
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Artists">
+      <MemberSignature Language="C#" Value="public System.Collections.ArrayList Artists;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Collections.ArrayList</ReturnType>
+      </ReturnValue>
+      <Parameters>
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Performers">
+      <MemberSignature Language="C#" Value="public System.Collections.ArrayList Performers;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Collections.ArrayList</ReturnType>
+      </ReturnValue>
+      <Parameters>
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Year">
+      <MemberSignature Language="C#" Value="public int Year;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Parameters>
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public AlbumMetadata ();" />
+      <MemberType>Constructor</MemberType>
+      <ReturnValue />
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:Player.Data.AlbumMetadata" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+  </Members>
+</Type>
\ No newline at end of file

Deleted: player-sdk/trunk/doc/en/Player.Data/Cover.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Data/Cover.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Data/Cover.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -1,76 +0,0 @@
-<Type Name="Cover" FullName="Player.Data.Cover">
-  <TypeSignature Language="C#" Value="public class Cover" Maintainer="auto" />
-  <AssemblyInfo>
-    <AssemblyName>Player.Sdk</AssemblyName>
-    <AssemblyPublicKey>
-    </AssemblyPublicKey>
-    <AssemblyVersion>0.0.0.0</AssemblyVersion>
-    <AssemblyCulture>neutral</AssemblyCulture>
-    <Attributes />
-  </AssemblyInfo>
-  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
-  <Docs>
-    <summary>To be added</summary>
-    <remarks>To be added</remarks>
-  </Docs>
-  <Base>
-    <BaseTypeName>System.Object</BaseTypeName>
-  </Base>
-  <Interfaces />
-  <Attributes />
-  <Members>
-    <Member MemberName="Equals">
-      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Boolean</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="obj" Type="System.Object" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="obj">a <see cref="T:System.Object" /></param>
-        <returns>a <see cref="T:System.Boolean" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName=".ctor">
-      <MemberSignature Language="C#" Value="public Cover ();" />
-      <MemberType>Constructor</MemberType>
-      <ReturnValue />
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:Player.Data.Cover" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Id">
-      <MemberSignature Language="C#" Value="public int Id { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Int32</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.Int32" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Filename">
-      <MemberSignature Language="C#" Value="public string Filename { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.String</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.String" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-  </Members>
-</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Data/Cover.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Data/Cover.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Data/Cover.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,76 @@
+<Type Name="Cover" FullName="Player.Data.Cover">
+  <TypeSignature Language="C#" Value="public class Cover" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base>
+    <BaseTypeName>System.Object</BaseTypeName>
+  </Base>
+  <Interfaces />
+  <Attributes />
+  <Members>
+    <Member MemberName="Equals">
+      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="obj" Type="System.Object" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="obj">a <see cref="T:System.Object" /></param>
+        <returns>a <see cref="T:System.Boolean" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public Cover ();" />
+      <MemberType>Constructor</MemberType>
+      <ReturnValue />
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:Player.Data.Cover" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Id">
+      <MemberSignature Language="C#" Value="public int Id { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.Int32" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Filename">
+      <MemberSignature Language="C#" Value="public string Filename { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.String" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+  </Members>
+</Type>
\ No newline at end of file

Deleted: player-sdk/trunk/doc/en/Player.Data/IAlbumComparer.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Data/IAlbumComparer.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Data/IAlbumComparer.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -1,39 +0,0 @@
-<Type Name="IAlbumComparer" FullName="Player.Data.IAlbumComparer">
-  <TypeSignature Language="C#" Value="public abstract interface IAlbumComparer" Maintainer="auto" />
-  <AssemblyInfo>
-    <AssemblyName>Player.Sdk</AssemblyName>
-    <AssemblyPublicKey>
-    </AssemblyPublicKey>
-    <AssemblyVersion>0.0.0.0</AssemblyVersion>
-    <AssemblyCulture>neutral</AssemblyCulture>
-    <Attributes />
-  </AssemblyInfo>
-  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
-  <Docs>
-    <summary>To be added</summary>
-    <remarks>To be added</remarks>
-  </Docs>
-  <Base />
-  <Interfaces />
-  <Attributes />
-  <Members>
-    <Member MemberName="Compare">
-      <MemberSignature Language="C#" Value="public virtual int Compare (Player.Data.Album one, Player.Data.Album two);" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Int32</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="one" Type="Player.Data.Album" />
-        <Parameter Name="two" Type="Player.Data.Album" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="one">a <see cref="T:Player.Data.Album" /></param>
-        <param name="two">a <see cref="T:Player.Data.Album" /></param>
-        <returns>a <see cref="T:System.Int32" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-  </Members>
-</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Data/IAlbumComparer.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Data/IAlbumComparer.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Data/IAlbumComparer.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,39 @@
+<Type Name="IAlbumComparer" FullName="Player.Data.IAlbumComparer">
+  <TypeSignature Language="C#" Value="public abstract interface IAlbumComparer" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base />
+  <Interfaces />
+  <Attributes />
+  <Members>
+    <Member MemberName="Compare">
+      <MemberSignature Language="C#" Value="public virtual int Compare (Player.Data.Album one, Player.Data.Album two);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="one" Type="Player.Data.Album" />
+        <Parameter Name="two" Type="Player.Data.Album" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="one">a <see cref="T:Player.Data.Album" /></param>
+        <param name="two">a <see cref="T:Player.Data.Album" /></param>
+        <returns>a <see cref="T:System.Int32" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+  </Members>
+</Type>
\ No newline at end of file

Deleted: player-sdk/trunk/doc/en/Player.Data/ICoverDb.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Data/ICoverDb.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Data/ICoverDb.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -1,66 +0,0 @@
-<Type Name="ICoverDb" FullName="Player.Data.ICoverDb">
-  <TypeSignature Language="C#" Value="public abstract interface ICoverDb" Maintainer="auto" />
-  <AssemblyInfo>
-    <AssemblyName>Player.Sdk</AssemblyName>
-    <AssemblyPublicKey>
-    </AssemblyPublicKey>
-    <AssemblyVersion>0.0.0.0</AssemblyVersion>
-    <AssemblyCulture>neutral</AssemblyCulture>
-    <Attributes />
-  </AssemblyInfo>
-  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
-  <Docs>
-    <summary>To be added</summary>
-    <remarks>To be added</remarks>
-  </Docs>
-  <Base />
-  <Interfaces />
-  <Attributes />
-  <Members>
-    <Member MemberName="AddCover">
-      <MemberSignature Language="C#" Value="public virtual bool AddCover (Player.Data.Cover cover);" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Boolean</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="cover" Type="Player.Data.Cover" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="cover">a <see cref="T:Player.Data.Cover" /></param>
-        <returns>a <see cref="T:System.Boolean" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="RemoveCover">
-      <MemberSignature Language="C#" Value="public virtual bool RemoveCover (Player.Data.Cover cover);" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Boolean</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="cover" Type="Player.Data.Cover" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="cover">a <see cref="T:Player.Data.Cover" /></param>
-        <returns>a <see cref="T:System.Boolean" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Covers">
-      <MemberSignature Language="C#" Value="public virtual System.Collections.ArrayList Covers { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Collections.ArrayList</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.Collections.ArrayList" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-  </Members>
-</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Data/ICoverDb.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Data/ICoverDb.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Data/ICoverDb.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,66 @@
+<Type Name="ICoverDb" FullName="Player.Data.ICoverDb">
+  <TypeSignature Language="C#" Value="public abstract interface ICoverDb" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base />
+  <Interfaces />
+  <Attributes />
+  <Members>
+    <Member MemberName="AddCover">
+      <MemberSignature Language="C#" Value="public virtual bool AddCover (Player.Data.Cover cover);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="cover" Type="Player.Data.Cover" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="cover">a <see cref="T:Player.Data.Cover" /></param>
+        <returns>a <see cref="T:System.Boolean" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="RemoveCover">
+      <MemberSignature Language="C#" Value="public virtual bool RemoveCover (Player.Data.Cover cover);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="cover" Type="Player.Data.Cover" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="cover">a <see cref="T:Player.Data.Cover" /></param>
+        <returns>a <see cref="T:System.Boolean" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Covers">
+      <MemberSignature Language="C#" Value="public virtual System.Collections.ArrayList Covers { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Collections.ArrayList</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.Collections.ArrayList" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+  </Members>
+</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Data/IDataKit.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Data/IDataKit.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Data/IDataKit.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,118 @@
+<Type Name="IDataKit" FullName="Player.Data.IDataKit">
+  <TypeSignature Language="C#" Value="public abstract interface IDataKit" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base />
+  <Interfaces>
+    <Interface>
+      <InterfaceName>Player.Kits.IKit</InterfaceName>
+    </Interface>
+    <Interface>
+      <InterfaceName>Player.Addins.IAddin</InterfaceName>
+    </Interface>
+  </Interfaces>
+  <Attributes />
+  <Members>
+    <Member MemberName="AddSong">
+      <MemberSignature Language="C#" Value="public virtual bool AddSong (Player.Data.Song song);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="song" Type="Player.Data.Song" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="song">a <see cref="T:Player.Data.Song" /></param>
+        <returns>a <see cref="T:System.Boolean" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="AddAlbum">
+      <MemberSignature Language="C#" Value="public virtual bool AddAlbum (Player.Data.Album album);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="album" Type="Player.Data.Album" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="album">a <see cref="T:Player.Data.Album" /></param>
+        <returns>a <see cref="T:System.Boolean" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="RemoveSong">
+      <MemberSignature Language="C#" Value="public virtual bool RemoveSong (Player.Data.Song song);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="song" Type="Player.Data.Song" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="song">a <see cref="T:Player.Data.Song" /></param>
+        <returns>a <see cref="T:System.Boolean" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="RemoveAlbum">
+      <MemberSignature Language="C#" Value="public virtual bool RemoveAlbum (Player.Data.Album album);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="album" Type="Player.Data.Album" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="album">a <see cref="T:Player.Data.Album" /></param>
+        <returns>a <see cref="T:System.Boolean" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Songs">
+      <MemberSignature Language="C#" Value="public virtual System.Collections.ArrayList Songs { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Collections.ArrayList</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.Collections.ArrayList" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Albums">
+      <MemberSignature Language="C#" Value="public virtual System.Collections.ArrayList Albums { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Collections.ArrayList</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.Collections.ArrayList" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+  </Members>
+</Type>
\ No newline at end of file

Deleted: player-sdk/trunk/doc/en/Player.Data/IMusicDb.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Data/IMusicDb.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Data/IMusicDb.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -1,111 +0,0 @@
-<Type Name="IMusicDb" FullName="Player.Data.IMusicDb">
-  <TypeSignature Language="C#" Value="public abstract interface IMusicDb" Maintainer="auto" />
-  <AssemblyInfo>
-    <AssemblyName>Player.Sdk</AssemblyName>
-    <AssemblyPublicKey>
-    </AssemblyPublicKey>
-    <AssemblyVersion>0.0.0.0</AssemblyVersion>
-    <AssemblyCulture>neutral</AssemblyCulture>
-    <Attributes />
-  </AssemblyInfo>
-  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
-  <Docs>
-    <summary>To be added</summary>
-    <remarks>To be added</remarks>
-  </Docs>
-  <Base />
-  <Interfaces />
-  <Attributes />
-  <Members>
-    <Member MemberName="AddSong">
-      <MemberSignature Language="C#" Value="public virtual bool AddSong (Player.Data.Song song);" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Boolean</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="song" Type="Player.Data.Song" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="song">a <see cref="T:Player.Data.Song" /></param>
-        <returns>a <see cref="T:System.Boolean" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="AddAlbum">
-      <MemberSignature Language="C#" Value="public virtual bool AddAlbum (Player.Data.Album album);" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Boolean</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="album" Type="Player.Data.Album" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="album">a <see cref="T:Player.Data.Album" /></param>
-        <returns>a <see cref="T:System.Boolean" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="RemoveSong">
-      <MemberSignature Language="C#" Value="public virtual bool RemoveSong (Player.Data.Song song);" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Boolean</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="song" Type="Player.Data.Song" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="song">a <see cref="T:Player.Data.Song" /></param>
-        <returns>a <see cref="T:System.Boolean" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="RemoveAlbum">
-      <MemberSignature Language="C#" Value="public virtual bool RemoveAlbum (Player.Data.Album album);" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Boolean</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="album" Type="Player.Data.Album" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="album">a <see cref="T:Player.Data.Album" /></param>
-        <returns>a <see cref="T:System.Boolean" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Songs">
-      <MemberSignature Language="C#" Value="public virtual System.Collections.ArrayList Songs { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Collections.ArrayList</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.Collections.ArrayList" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Albums">
-      <MemberSignature Language="C#" Value="public virtual System.Collections.ArrayList Albums { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Collections.ArrayList</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.Collections.ArrayList" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-  </Members>
-</Type>
\ No newline at end of file

Deleted: player-sdk/trunk/doc/en/Player.Data/ISearchable.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Data/ISearchable.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Data/ISearchable.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -1,37 +0,0 @@
-<Type Name="ISearchable" FullName="Player.Data.ISearchable">
-  <TypeSignature Language="C#" Value="public abstract interface ISearchable" Maintainer="auto" />
-  <AssemblyInfo>
-    <AssemblyName>Player.Sdk</AssemblyName>
-    <AssemblyPublicKey>
-    </AssemblyPublicKey>
-    <AssemblyVersion>0.0.0.0</AssemblyVersion>
-    <AssemblyCulture>neutral</AssemblyCulture>
-    <Attributes />
-  </AssemblyInfo>
-  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
-  <Docs>
-    <summary>To be added</summary>
-    <remarks>To be added</remarks>
-  </Docs>
-  <Base />
-  <Interfaces />
-  <Attributes />
-  <Members>
-    <Member MemberName="FitsCriteria">
-      <MemberSignature Language="C#" Value="public virtual bool FitsCriteria (string [] searchBits);" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Boolean</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="searchBits" Type="System.String[]" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="searchBits">a <see cref="T:System.String" /></param>
-        <returns>a <see cref="T:System.Boolean" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-  </Members>
-</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Data/ISearchable.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Data/ISearchable.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Data/ISearchable.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,37 @@
+<Type Name="ISearchable" FullName="Player.Data.ISearchable">
+  <TypeSignature Language="C#" Value="public abstract interface ISearchable" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base />
+  <Interfaces />
+  <Attributes />
+  <Members>
+    <Member MemberName="FitsCriteria">
+      <MemberSignature Language="C#" Value="public virtual bool FitsCriteria (string [] searchBits);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="searchBits" Type="System.String[]" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="searchBits">a <see cref="T:System.String" /></param>
+        <returns>a <see cref="T:System.Boolean" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+  </Members>
+</Type>
\ No newline at end of file

Deleted: player-sdk/trunk/doc/en/Player.Data/ISongComparer.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Data/ISongComparer.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Data/ISongComparer.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -1,39 +0,0 @@
-<Type Name="ISongComparer" FullName="Player.Data.ISongComparer">
-  <TypeSignature Language="C#" Value="public abstract interface ISongComparer" Maintainer="auto" />
-  <AssemblyInfo>
-    <AssemblyName>Player.Sdk</AssemblyName>
-    <AssemblyPublicKey>
-    </AssemblyPublicKey>
-    <AssemblyVersion>0.0.0.0</AssemblyVersion>
-    <AssemblyCulture>neutral</AssemblyCulture>
-    <Attributes />
-  </AssemblyInfo>
-  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
-  <Docs>
-    <summary>To be added</summary>
-    <remarks>To be added</remarks>
-  </Docs>
-  <Base />
-  <Interfaces />
-  <Attributes />
-  <Members>
-    <Member MemberName="Compare">
-      <MemberSignature Language="C#" Value="public virtual int Compare (Player.Data.Song one, Player.Data.Song two);" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Int32</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="one" Type="Player.Data.Song" />
-        <Parameter Name="two" Type="Player.Data.Song" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="one">a <see cref="T:Player.Data.Song" /></param>
-        <param name="two">a <see cref="T:Player.Data.Song" /></param>
-        <returns>a <see cref="T:System.Int32" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-  </Members>
-</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Data/ISongComparer.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Data/ISongComparer.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Data/ISongComparer.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,39 @@
+<Type Name="ISongComparer" FullName="Player.Data.ISongComparer">
+  <TypeSignature Language="C#" Value="public abstract interface ISongComparer" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base />
+  <Interfaces />
+  <Attributes />
+  <Members>
+    <Member MemberName="Compare">
+      <MemberSignature Language="C#" Value="public virtual int Compare (Player.Data.Song one, Player.Data.Song two);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="one" Type="Player.Data.Song" />
+        <Parameter Name="two" Type="Player.Data.Song" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="one">a <see cref="T:Player.Data.Song" /></param>
+        <param name="two">a <see cref="T:Player.Data.Song" /></param>
+        <returns>a <see cref="T:System.Int32" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+  </Members>
+</Type>
\ No newline at end of file

Deleted: player-sdk/trunk/doc/en/Player.Data/SimpleAlbumComparer.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Data/SimpleAlbumComparer.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Data/SimpleAlbumComparer.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -1,56 +0,0 @@
-<Type Name="SimpleAlbumComparer" FullName="Player.Data.SimpleAlbumComparer">
-  <TypeSignature Language="C#" Value="public class SimpleAlbumComparer : IAlbumComparer" Maintainer="auto" />
-  <AssemblyInfo>
-    <AssemblyName>Player.Sdk</AssemblyName>
-    <AssemblyPublicKey>
-    </AssemblyPublicKey>
-    <AssemblyVersion>0.0.0.0</AssemblyVersion>
-    <AssemblyCulture>neutral</AssemblyCulture>
-    <Attributes />
-  </AssemblyInfo>
-  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
-  <Docs>
-    <summary>To be added</summary>
-    <remarks>To be added</remarks>
-  </Docs>
-  <Base>
-    <BaseTypeName>System.Object</BaseTypeName>
-  </Base>
-  <Interfaces>
-    <Interface>
-      <InterfaceName>Player.Data.IAlbumComparer</InterfaceName>
-    </Interface>
-  </Interfaces>
-  <Attributes />
-  <Members>
-    <Member MemberName="Compare">
-      <MemberSignature Language="C#" Value="public virtual int Compare (Player.Data.Album one, Player.Data.Album two);" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Int32</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="one" Type="Player.Data.Album" />
-        <Parameter Name="two" Type="Player.Data.Album" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="one">a <see cref="T:Player.Data.Album" /></param>
-        <param name="two">a <see cref="T:Player.Data.Album" /></param>
-        <returns>a <see cref="T:System.Int32" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName=".ctor">
-      <MemberSignature Language="C#" Value="public SimpleAlbumComparer ();" />
-      <MemberType>Constructor</MemberType>
-      <ReturnValue />
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:Player.Data.SimpleAlbumComparer" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-  </Members>
-</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Data/SimpleAlbumComparer.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Data/SimpleAlbumComparer.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Data/SimpleAlbumComparer.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,56 @@
+<Type Name="SimpleAlbumComparer" FullName="Player.Data.SimpleAlbumComparer">
+  <TypeSignature Language="C#" Value="public class SimpleAlbumComparer : IAlbumComparer" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base>
+    <BaseTypeName>System.Object</BaseTypeName>
+  </Base>
+  <Interfaces>
+    <Interface>
+      <InterfaceName>Player.Data.IAlbumComparer</InterfaceName>
+    </Interface>
+  </Interfaces>
+  <Attributes />
+  <Members>
+    <Member MemberName="Compare">
+      <MemberSignature Language="C#" Value="public virtual int Compare (Player.Data.Album one, Player.Data.Album two);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="one" Type="Player.Data.Album" />
+        <Parameter Name="two" Type="Player.Data.Album" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="one">a <see cref="T:Player.Data.Album" /></param>
+        <param name="two">a <see cref="T:Player.Data.Album" /></param>
+        <returns>a <see cref="T:System.Int32" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public SimpleAlbumComparer ();" />
+      <MemberType>Constructor</MemberType>
+      <ReturnValue />
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:Player.Data.SimpleAlbumComparer" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+  </Members>
+</Type>
\ No newline at end of file

Deleted: player-sdk/trunk/doc/en/Player.Data/SimpleSongComparer.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Data/SimpleSongComparer.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Data/SimpleSongComparer.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -1,56 +0,0 @@
-<Type Name="SimpleSongComparer" FullName="Player.Data.SimpleSongComparer">
-  <TypeSignature Language="C#" Value="public class SimpleSongComparer : ISongComparer" Maintainer="auto" />
-  <AssemblyInfo>
-    <AssemblyName>Player.Sdk</AssemblyName>
-    <AssemblyPublicKey>
-    </AssemblyPublicKey>
-    <AssemblyVersion>0.0.0.0</AssemblyVersion>
-    <AssemblyCulture>neutral</AssemblyCulture>
-    <Attributes />
-  </AssemblyInfo>
-  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
-  <Docs>
-    <summary>To be added</summary>
-    <remarks>To be added</remarks>
-  </Docs>
-  <Base>
-    <BaseTypeName>System.Object</BaseTypeName>
-  </Base>
-  <Interfaces>
-    <Interface>
-      <InterfaceName>Player.Data.ISongComparer</InterfaceName>
-    </Interface>
-  </Interfaces>
-  <Attributes />
-  <Members>
-    <Member MemberName="Compare">
-      <MemberSignature Language="C#" Value="public virtual int Compare (Player.Data.Song one, Player.Data.Song two);" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Int32</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="one" Type="Player.Data.Song" />
-        <Parameter Name="two" Type="Player.Data.Song" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="one">a <see cref="T:Player.Data.Song" /></param>
-        <param name="two">a <see cref="T:Player.Data.Song" /></param>
-        <returns>a <see cref="T:System.Int32" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName=".ctor">
-      <MemberSignature Language="C#" Value="public SimpleSongComparer ();" />
-      <MemberType>Constructor</MemberType>
-      <ReturnValue />
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:Player.Data.SimpleSongComparer" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-  </Members>
-</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Data/SimpleSongComparer.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Data/SimpleSongComparer.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Data/SimpleSongComparer.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,56 @@
+<Type Name="SimpleSongComparer" FullName="Player.Data.SimpleSongComparer">
+  <TypeSignature Language="C#" Value="public class SimpleSongComparer : ISongComparer" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base>
+    <BaseTypeName>System.Object</BaseTypeName>
+  </Base>
+  <Interfaces>
+    <Interface>
+      <InterfaceName>Player.Data.ISongComparer</InterfaceName>
+    </Interface>
+  </Interfaces>
+  <Attributes />
+  <Members>
+    <Member MemberName="Compare">
+      <MemberSignature Language="C#" Value="public virtual int Compare (Player.Data.Song one, Player.Data.Song two);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="one" Type="Player.Data.Song" />
+        <Parameter Name="two" Type="Player.Data.Song" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="one">a <see cref="T:Player.Data.Song" /></param>
+        <param name="two">a <see cref="T:Player.Data.Song" /></param>
+        <returns>a <see cref="T:System.Int32" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public SimpleSongComparer ();" />
+      <MemberType>Constructor</MemberType>
+      <ReturnValue />
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:Player.Data.SimpleSongComparer" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+  </Members>
+</Type>
\ No newline at end of file

Deleted: player-sdk/trunk/doc/en/Player.Data/Song.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Data/Song.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Data/Song.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -1,280 +0,0 @@
-<Type Name="Song" FullName="Player.Data.Song">
-  <TypeSignature Language="C#" Value="public class Song : ISearchable, IComparable" Maintainer="auto" />
-  <AssemblyInfo>
-    <AssemblyName>Player.Sdk</AssemblyName>
-    <AssemblyPublicKey>
-    </AssemblyPublicKey>
-    <AssemblyVersion>0.0.0.0</AssemblyVersion>
-    <AssemblyCulture>neutral</AssemblyCulture>
-    <Attributes />
-  </AssemblyInfo>
-  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
-  <Docs>
-    <summary>To be added</summary>
-    <remarks>To be added</remarks>
-  </Docs>
-  <Base>
-    <BaseTypeName>System.Object</BaseTypeName>
-  </Base>
-  <Interfaces>
-    <Interface>
-      <InterfaceName>Player.Data.ISearchable</InterfaceName>
-    </Interface>
-    <Interface>
-      <InterfaceName>System.IComparable</InterfaceName>
-    </Interface>
-  </Interfaces>
-  <Attributes />
-  <Members>
-    <Member MemberName="FitsCriteria">
-      <MemberSignature Language="C#" Value="public virtual bool FitsCriteria (string [] search_bits);" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Boolean</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="search_bits" Type="System.String[]" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="search_bits">a <see cref="T:System.String" /></param>
-        <returns>a <see cref="T:System.Boolean" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Equals">
-      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Boolean</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="obj" Type="System.Object" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="obj">a <see cref="T:System.Object" /></param>
-        <returns>a <see cref="T:System.Boolean" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="CompareTo">
-      <MemberSignature Language="C#" Value="public virtual int CompareTo (object obj);" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Int32</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="obj" Type="System.Object" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="obj">a <see cref="T:System.Object" /></param>
-        <returns>a <see cref="T:System.Int32" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Compare">
-      <MemberSignature Language="C#" Value="public int Compare (Player.Data.Song one, Player.Data.Song two);" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Int32</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="one" Type="Player.Data.Song" />
-        <Parameter Name="two" Type="Player.Data.Song" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="one">a <see cref="T:Player.Data.Song" /></param>
-        <param name="two">a <see cref="T:Player.Data.Song" /></param>
-        <returns>a <see cref="T:System.Int32" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName=".ctor">
-      <MemberSignature Language="C#" Value="public Song (Player.Data.SongMetadata metadata);" />
-      <MemberType>Constructor</MemberType>
-      <ReturnValue />
-      <Parameters>
-        <Parameter Name="metadata" Type="Player.Data.SongMetadata" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="metadata">a <see cref="T:Player.Data.SongMetadata" /></param>
-        <returns>a <see cref="T:Player.Data.Song" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName=".ctor">
-      <MemberSignature Language="C#" Value="public Song (string filename);" />
-      <MemberType>Constructor</MemberType>
-      <ReturnValue />
-      <Parameters>
-        <Parameter Name="filename" Type="System.String" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="filename">a <see cref="T:System.String" /></param>
-        <returns>a <see cref="T:Player.Data.Song" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Filename">
-      <MemberSignature Language="C#" Value="public string Filename { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.String</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.String" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Title">
-      <MemberSignature Language="C#" Value="public string Title { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.String</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.String" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Artists">
-      <MemberSignature Language="C#" Value="public System.Collections.ArrayList Artists { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Collections.ArrayList</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.Collections.ArrayList" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Performers">
-      <MemberSignature Language="C#" Value="public System.Collections.ArrayList Performers { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Collections.ArrayList</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.Collections.ArrayList" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Album">
-      <MemberSignature Language="C#" Value="public string Album { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.String</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.String" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="TrackNumber">
-      <MemberSignature Language="C#" Value="public int TrackNumber { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Int32</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.Int32" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Year">
-      <MemberSignature Language="C#" Value="public int Year { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Int32</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.Int32" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Duration">
-      <MemberSignature Language="C#" Value="public int Duration { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Int32</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.Int32" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="MTime">
-      <MemberSignature Language="C#" Value="public int MTime { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Int32</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.Int32" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Gain">
-      <MemberSignature Language="C#" Value="public double Gain { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Double</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.Double" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Peak">
-      <MemberSignature Language="C#" Value="public double Peak { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Double</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.Double" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Comparer">
-      <MemberSignature Language="C#" Value="public Player.Data.ISongComparer Comparer { set; get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>Player.Data.ISongComparer</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:Player.Data.ISongComparer" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-  </Members>
-</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Data/Song.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Data/Song.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Data/Song.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,280 @@
+<Type Name="Song" FullName="Player.Data.Song">
+  <TypeSignature Language="C#" Value="public class Song : ISearchable, IComparable" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base>
+    <BaseTypeName>System.Object</BaseTypeName>
+  </Base>
+  <Interfaces>
+    <Interface>
+      <InterfaceName>Player.Data.ISearchable</InterfaceName>
+    </Interface>
+    <Interface>
+      <InterfaceName>System.IComparable</InterfaceName>
+    </Interface>
+  </Interfaces>
+  <Attributes />
+  <Members>
+    <Member MemberName="FitsCriteria">
+      <MemberSignature Language="C#" Value="public virtual bool FitsCriteria (string [] search_bits);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="search_bits" Type="System.String[]" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="search_bits">a <see cref="T:System.String" /></param>
+        <returns>a <see cref="T:System.Boolean" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Equals">
+      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="obj" Type="System.Object" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="obj">a <see cref="T:System.Object" /></param>
+        <returns>a <see cref="T:System.Boolean" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="CompareTo">
+      <MemberSignature Language="C#" Value="public virtual int CompareTo (object obj);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="obj" Type="System.Object" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="obj">a <see cref="T:System.Object" /></param>
+        <returns>a <see cref="T:System.Int32" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Compare">
+      <MemberSignature Language="C#" Value="public int Compare (Player.Data.Song one, Player.Data.Song two);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="one" Type="Player.Data.Song" />
+        <Parameter Name="two" Type="Player.Data.Song" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="one">a <see cref="T:Player.Data.Song" /></param>
+        <param name="two">a <see cref="T:Player.Data.Song" /></param>
+        <returns>a <see cref="T:System.Int32" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public Song (Player.Data.SongMetadata metadata);" />
+      <MemberType>Constructor</MemberType>
+      <ReturnValue />
+      <Parameters>
+        <Parameter Name="metadata" Type="Player.Data.SongMetadata" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="metadata">a <see cref="T:Player.Data.SongMetadata" /></param>
+        <returns>a <see cref="T:Player.Data.Song" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public Song (string filename);" />
+      <MemberType>Constructor</MemberType>
+      <ReturnValue />
+      <Parameters>
+        <Parameter Name="filename" Type="System.String" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="filename">a <see cref="T:System.String" /></param>
+        <returns>a <see cref="T:Player.Data.Song" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Filename">
+      <MemberSignature Language="C#" Value="public string Filename { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.String" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Title">
+      <MemberSignature Language="C#" Value="public string Title { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.String" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Artists">
+      <MemberSignature Language="C#" Value="public System.Collections.ArrayList Artists { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Collections.ArrayList</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.Collections.ArrayList" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Performers">
+      <MemberSignature Language="C#" Value="public System.Collections.ArrayList Performers { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Collections.ArrayList</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.Collections.ArrayList" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Album">
+      <MemberSignature Language="C#" Value="public string Album { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.String" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="TrackNumber">
+      <MemberSignature Language="C#" Value="public int TrackNumber { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.Int32" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Year">
+      <MemberSignature Language="C#" Value="public int Year { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.Int32" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Duration">
+      <MemberSignature Language="C#" Value="public int Duration { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.Int32" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="MTime">
+      <MemberSignature Language="C#" Value="public int MTime { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.Int32" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Gain">
+      <MemberSignature Language="C#" Value="public double Gain { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Double</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.Double" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Peak">
+      <MemberSignature Language="C#" Value="public double Peak { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Double</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.Double" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Comparer">
+      <MemberSignature Language="C#" Value="public Player.Data.ISongComparer Comparer { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>Player.Data.ISongComparer</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:Player.Data.ISongComparer" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+  </Members>
+</Type>
\ No newline at end of file

Deleted: player-sdk/trunk/doc/en/Player.Data/SongMetadata.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Data/SongMetadata.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Data/SongMetadata.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -1,177 +0,0 @@
-<Type Name="SongMetadata" FullName="Player.Data.SongMetadata">
-  <TypeSignature Language="C#" Value="public class SongMetadata" Maintainer="auto" />
-  <AssemblyInfo>
-    <AssemblyName>Player.Sdk</AssemblyName>
-    <AssemblyPublicKey>
-    </AssemblyPublicKey>
-    <AssemblyVersion>0.0.0.0</AssemblyVersion>
-    <AssemblyCulture>neutral</AssemblyCulture>
-    <Attributes />
-  </AssemblyInfo>
-  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
-  <Docs>
-    <summary>To be added</summary>
-    <remarks>To be added</remarks>
-  </Docs>
-  <Base>
-    <BaseTypeName>System.Object</BaseTypeName>
-  </Base>
-  <Interfaces />
-  <Attributes />
-  <Members>
-    <Member MemberName="Filename">
-      <MemberSignature Language="C#" Value="public string Filename;" />
-      <MemberType>Field</MemberType>
-      <ReturnValue>
-        <ReturnType>System.String</ReturnType>
-      </ReturnValue>
-      <Parameters>
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Title">
-      <MemberSignature Language="C#" Value="public string Title;" />
-      <MemberType>Field</MemberType>
-      <ReturnValue>
-        <ReturnType>System.String</ReturnType>
-      </ReturnValue>
-      <Parameters>
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Artists">
-      <MemberSignature Language="C#" Value="public System.Collections.ArrayList Artists;" />
-      <MemberType>Field</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Collections.ArrayList</ReturnType>
-      </ReturnValue>
-      <Parameters>
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Performers">
-      <MemberSignature Language="C#" Value="public System.Collections.ArrayList Performers;" />
-      <MemberType>Field</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Collections.ArrayList</ReturnType>
-      </ReturnValue>
-      <Parameters>
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Album">
-      <MemberSignature Language="C#" Value="public string Album;" />
-      <MemberType>Field</MemberType>
-      <ReturnValue>
-        <ReturnType>System.String</ReturnType>
-      </ReturnValue>
-      <Parameters>
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="TrackNumber">
-      <MemberSignature Language="C#" Value="public int TrackNumber;" />
-      <MemberType>Field</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Int32</ReturnType>
-      </ReturnValue>
-      <Parameters>
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Year">
-      <MemberSignature Language="C#" Value="public int Year;" />
-      <MemberType>Field</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Int32</ReturnType>
-      </ReturnValue>
-      <Parameters>
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Duration">
-      <MemberSignature Language="C#" Value="public int Duration;" />
-      <MemberType>Field</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Int32</ReturnType>
-      </ReturnValue>
-      <Parameters>
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="MTime">
-      <MemberSignature Language="C#" Value="public int MTime;" />
-      <MemberType>Field</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Int32</ReturnType>
-      </ReturnValue>
-      <Parameters>
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Gain">
-      <MemberSignature Language="C#" Value="public double Gain;" />
-      <MemberType>Field</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Double</ReturnType>
-      </ReturnValue>
-      <Parameters>
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Peak">
-      <MemberSignature Language="C#" Value="public double Peak;" />
-      <MemberType>Field</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Double</ReturnType>
-      </ReturnValue>
-      <Parameters>
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName=".ctor">
-      <MemberSignature Language="C#" Value="public SongMetadata ();" />
-      <MemberType>Constructor</MemberType>
-      <ReturnValue />
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:Player.Data.SongMetadata" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-  </Members>
-</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Data/SongMetadata.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Data/SongMetadata.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Data/SongMetadata.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,177 @@
+<Type Name="SongMetadata" FullName="Player.Data.SongMetadata">
+  <TypeSignature Language="C#" Value="public class SongMetadata" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base>
+    <BaseTypeName>System.Object</BaseTypeName>
+  </Base>
+  <Interfaces />
+  <Attributes />
+  <Members>
+    <Member MemberName="Filename">
+      <MemberSignature Language="C#" Value="public string Filename;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Parameters>
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Title">
+      <MemberSignature Language="C#" Value="public string Title;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Parameters>
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Artists">
+      <MemberSignature Language="C#" Value="public System.Collections.ArrayList Artists;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Collections.ArrayList</ReturnType>
+      </ReturnValue>
+      <Parameters>
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Performers">
+      <MemberSignature Language="C#" Value="public System.Collections.ArrayList Performers;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Collections.ArrayList</ReturnType>
+      </ReturnValue>
+      <Parameters>
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Album">
+      <MemberSignature Language="C#" Value="public string Album;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Parameters>
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="TrackNumber">
+      <MemberSignature Language="C#" Value="public int TrackNumber;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Parameters>
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Year">
+      <MemberSignature Language="C#" Value="public int Year;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Parameters>
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Duration">
+      <MemberSignature Language="C#" Value="public int Duration;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Parameters>
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="MTime">
+      <MemberSignature Language="C#" Value="public int MTime;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Parameters>
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Gain">
+      <MemberSignature Language="C#" Value="public double Gain;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Double</ReturnType>
+      </ReturnValue>
+      <Parameters>
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Peak">
+      <MemberSignature Language="C#" Value="public double Peak;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Double</ReturnType>
+      </ReturnValue>
+      <Parameters>
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public SongMetadata ();" />
+      <MemberType>Constructor</MemberType>
+      <ReturnValue />
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:Player.Data.SongMetadata" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+  </Members>
+</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Kits/IKit.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Kits/IKit.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Kits/IKit.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,24 @@
+<Type Name="IKit" FullName="Player.Kits.IKit">
+  <TypeSignature Language="C#" Value="public abstract interface IKit" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base />
+  <Interfaces>
+    <Interface>
+      <InterfaceName>Player.Addins.IAddin</InterfaceName>
+    </Interface>
+  </Interfaces>
+  <Attributes />
+  <Members />
+</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Kits/KitManager.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Kits/KitManager.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Kits/KitManager.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,85 @@
+<Type Name="KitManager" FullName="Player.Kits.KitManager">
+  <TypeSignature Language="C#" Value="public class KitManager" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base>
+    <BaseTypeName>System.Object</BaseTypeName>
+  </Base>
+  <Interfaces />
+  <Attributes>
+    <Attribute>
+      <AttributeName>System.Reflection.DefaultMemberAttribute</AttributeName>
+    </Attribute>
+  </Attributes>
+  <Members>
+    <Member MemberName="GetInstance">
+      <MemberSignature Language="C#" Value="public static Player.Kits.KitManager GetInstance ();" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>Player.Kits.KitManager</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:Player.Kits.KitManager" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="UpdateKits">
+      <MemberSignature Language="C#" Value="public void UpdateKits ();" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="SwapKit">
+      <MemberSignature Language="C#" Value="public void SwapKit (string kitType, Player.Kits.IKit kit);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="kitType" Type="System.String" />
+        <Parameter Name="kit" Type="Player.Kits.IKit" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="kitType">a <see cref="T:System.String" /></param>
+        <param name="kit">a <see cref="T:Player.Kits.IKit" /></param>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Item">
+      <MemberSignature Language="C#" Value="public Player.Kits.IKit Item { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>Player.Kits.IKit</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="kitName" Type="System.String" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="kitName">a <see cref="T:System.String" /></param>
+        <returns>a <see cref="T:Player.Kits.IKit" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+  </Members>
+</Type>
\ No newline at end of file

Deleted: player-sdk/trunk/doc/en/Player.Player/EOSEventHandler.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Player/EOSEventHandler.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Player/EOSEventHandler.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -1,33 +0,0 @@
-<Type Name="EOSEventHandler" FullName="Player.Player.EOSEventHandler">
-  <TypeSignature Language="C#" Value="public sealed delegate void EOSEventHandler ();" Maintainer="auto" />
-  <AssemblyInfo>
-    <AssemblyName>Player.Sdk</AssemblyName>
-    <AssemblyPublicKey>
-    </AssemblyPublicKey>
-    <AssemblyVersion>0.0.0.0</AssemblyVersion>
-    <AssemblyCulture>neutral</AssemblyCulture>
-    <Attributes />
-  </AssemblyInfo>
-  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
-  <Docs>
-    <summary>To be added</summary>
-    <remarks>To be added</remarks>
-  </Docs>
-  <Base>
-    <BaseTypeName>System.Delegate</BaseTypeName>
-  </Base>
-  <Interfaces>
-    <Interface>
-      <InterfaceName>System.ICloneable</InterfaceName>
-    </Interface>
-    <Interface>
-      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
-    </Interface>
-  </Interfaces>
-  <Attributes />
-  <Members />
-  <ReturnValue>
-    <ReturnType>System.Void</ReturnType>
-  </ReturnValue>
-  <Parameters />
-</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Player/EOSEventHandler.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Player/EOSEventHandler.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Player/EOSEventHandler.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,33 @@
+<Type Name="EOSEventHandler" FullName="Player.Player.EOSEventHandler">
+  <TypeSignature Language="C#" Value="public sealed delegate void EOSEventHandler ();" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base>
+    <BaseTypeName>System.Delegate</BaseTypeName>
+  </Base>
+  <Interfaces>
+    <Interface>
+      <InterfaceName>System.ICloneable</InterfaceName>
+    </Interface>
+    <Interface>
+      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
+    </Interface>
+  </Interfaces>
+  <Attributes />
+  <Members />
+  <ReturnValue>
+    <ReturnType>System.Void</ReturnType>
+  </ReturnValue>
+  <Parameters />
+</Type>
\ No newline at end of file

Deleted: player-sdk/trunk/doc/en/Player.Player/IPlayer.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Player/IPlayer.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Player/IPlayer.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -1,184 +0,0 @@
-<Type Name="IPlayer" FullName="Player.Player.IPlayer">
-  <TypeSignature Language="C#" Value="public abstract interface IPlayer" Maintainer="auto" />
-  <AssemblyInfo>
-    <AssemblyName>Player.Sdk</AssemblyName>
-    <AssemblyPublicKey>
-    </AssemblyPublicKey>
-    <AssemblyVersion>0.0.0.0</AssemblyVersion>
-    <AssemblyCulture>neutral</AssemblyCulture>
-    <Attributes />
-  </AssemblyInfo>
-  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
-  <Docs>
-    <summary>To be added</summary>
-    <remarks>To be added</remarks>
-  </Docs>
-  <Base />
-  <Interfaces />
-  <Attributes />
-  <Members>
-    <Member MemberName="Play">
-      <MemberSignature Language="C#" Value="public virtual void Play ();" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Void</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Pause">
-      <MemberSignature Language="C#" Value="public virtual void Pause ();" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Void</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Stop">
-      <MemberSignature Language="C#" Value="public virtual void Stop ();" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Void</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Next">
-      <MemberSignature Language="C#" Value="public virtual void Next ();" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Void</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Previous">
-      <MemberSignature Language="C#" Value="public virtual void Previous ();" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Void</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Repeat">
-      <MemberSignature Language="C#" Value="public virtual void Repeat (Player.Player.RepetitionType type);" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Void</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="type" Type="Player.Player.RepetitionType" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="type">a <see cref="T:System.Int32" /></param>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Playing">
-      <MemberSignature Language="C#" Value="public virtual bool Playing { set; get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Boolean</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.Boolean" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Position">
-      <MemberSignature Language="C#" Value="public virtual int Position { set; get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Int32</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.Int32" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Volume">
-      <MemberSignature Language="C#" Value="public virtual int Volume { set; get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Int32</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.Int32" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Playlist">
-      <MemberSignature Language="C#" Value="public virtual Player.Playlist.IPlaylist Playlist { set; get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>Player.Playlist.IPlaylist</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:Player.Playlist.IPlaylist" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="EOSEvent">
-      <MemberSignature Language="C#" Value="public virtual event Player.Player.EOSEventHandler EOSEvent;" />
-      <MemberType>Event</MemberType>
-      <ReturnValue>
-        <ReturnType>Player.Player.EOSEventHandler</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="TickEvent">
-      <MemberSignature Language="C#" Value="public virtual event Player.Player.TickEventHandler TickEvent;" />
-      <MemberType>Event</MemberType>
-      <ReturnValue>
-        <ReturnType>Player.Player.TickEventHandler</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="StateEvent">
-      <MemberSignature Language="C#" Value="public virtual event Player.Player.StateEventHandler StateEvent;" />
-      <MemberType>Event</MemberType>
-      <ReturnValue>
-        <ReturnType>Player.Player.StateEventHandler</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-  </Members>
-</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Player/IPlayerKit.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Player/IPlayerKit.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Player/IPlayerKit.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,191 @@
+<Type Name="IPlayerKit" FullName="Player.Player.IPlayerKit">
+  <TypeSignature Language="C#" Value="public abstract interface IPlayerKit" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base />
+  <Interfaces>
+    <Interface>
+      <InterfaceName>Player.Kits.IKit</InterfaceName>
+    </Interface>
+    <Interface>
+      <InterfaceName>Player.Addins.IAddin</InterfaceName>
+    </Interface>
+  </Interfaces>
+  <Attributes />
+  <Members>
+    <Member MemberName="Play">
+      <MemberSignature Language="C#" Value="public virtual void Play ();" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Pause">
+      <MemberSignature Language="C#" Value="public virtual void Pause ();" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Stop">
+      <MemberSignature Language="C#" Value="public virtual void Stop ();" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Next">
+      <MemberSignature Language="C#" Value="public virtual void Next ();" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Previous">
+      <MemberSignature Language="C#" Value="public virtual void Previous ();" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Repeat">
+      <MemberSignature Language="C#" Value="public virtual void Repeat (Player.Player.RepetitionType type);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="type" Type="Player.Player.RepetitionType" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="type">a <see cref="T:System.Int32" /></param>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Playing">
+      <MemberSignature Language="C#" Value="public virtual bool Playing { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.Boolean" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Position">
+      <MemberSignature Language="C#" Value="public virtual int Position { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.Int32" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Volume">
+      <MemberSignature Language="C#" Value="public virtual int Volume { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.Int32" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Playlist">
+      <MemberSignature Language="C#" Value="public virtual Player.Playlist.IPlaylist Playlist { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>Player.Playlist.IPlaylist</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:Player.Playlist.IPlaylist" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="EOSEvent">
+      <MemberSignature Language="C#" Value="public virtual event Player.Player.EOSEventHandler EOSEvent;" />
+      <MemberType>Event</MemberType>
+      <ReturnValue>
+        <ReturnType>Player.Player.EOSEventHandler</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="TickEvent">
+      <MemberSignature Language="C#" Value="public virtual event Player.Player.TickEventHandler TickEvent;" />
+      <MemberType>Event</MemberType>
+      <ReturnValue>
+        <ReturnType>Player.Player.TickEventHandler</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="StateEvent">
+      <MemberSignature Language="C#" Value="public virtual event Player.Player.StateEventHandler StateEvent;" />
+      <MemberType>Event</MemberType>
+      <ReturnValue>
+        <ReturnType>Player.Player.StateEventHandler</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+  </Members>
+</Type>
\ No newline at end of file

Deleted: player-sdk/trunk/doc/en/Player.Player/RepetitionType.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Player/RepetitionType.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Player/RepetitionType.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -1,72 +0,0 @@
-<Type Name="RepetitionType" FullName="Player.Player.RepetitionType">
-  <TypeSignature Language="C#" Value="public enum RepetitionType" Maintainer="auto" />
-  <AssemblyInfo>
-    <AssemblyName>Player.Sdk</AssemblyName>
-    <AssemblyPublicKey>
-    </AssemblyPublicKey>
-    <AssemblyVersion>0.0.0.0</AssemblyVersion>
-    <AssemblyCulture>neutral</AssemblyCulture>
-    <Attributes />
-  </AssemblyInfo>
-  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
-  <Docs>
-    <summary>To be added</summary>
-    <remarks>To be added</remarks>
-  </Docs>
-  <Base>
-    <BaseTypeName>System.Enum</BaseTypeName>
-  </Base>
-  <Interfaces>
-    <Interface>
-      <InterfaceName>System.IComparable</InterfaceName>
-    </Interface>
-    <Interface>
-      <InterfaceName>System.IConvertible</InterfaceName>
-    </Interface>
-    <Interface>
-      <InterfaceName>System.IFormattable</InterfaceName>
-    </Interface>
-  </Interfaces>
-  <Attributes />
-  <Members>
-    <Member MemberName="RepeatSong">
-      <MemberSignature Language="C#" Value="RepeatSong" />
-      <MemberType>Field</MemberType>
-      <ReturnValue>
-        <ReturnType>Player.Player.RepetitionType</ReturnType>
-      </ReturnValue>
-      <Parameters>
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="RepeatPlaylist">
-      <MemberSignature Language="C#" Value="RepeatPlaylist" />
-      <MemberType>Field</MemberType>
-      <ReturnValue>
-        <ReturnType>Player.Player.RepetitionType</ReturnType>
-      </ReturnValue>
-      <Parameters>
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="value__">
-      <MemberSignature Language="C#" Value="value__" />
-      <MemberType>Field</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Int32</ReturnType>
-      </ReturnValue>
-      <Parameters>
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-  </Members>
-</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Player/RepetitionType.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Player/RepetitionType.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Player/RepetitionType.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,72 @@
+<Type Name="RepetitionType" FullName="Player.Player.RepetitionType">
+  <TypeSignature Language="C#" Value="public enum RepetitionType" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base>
+    <BaseTypeName>System.Enum</BaseTypeName>
+  </Base>
+  <Interfaces>
+    <Interface>
+      <InterfaceName>System.IComparable</InterfaceName>
+    </Interface>
+    <Interface>
+      <InterfaceName>System.IConvertible</InterfaceName>
+    </Interface>
+    <Interface>
+      <InterfaceName>System.IFormattable</InterfaceName>
+    </Interface>
+  </Interfaces>
+  <Attributes />
+  <Members>
+    <Member MemberName="RepeatSong">
+      <MemberSignature Language="C#" Value="RepeatSong" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>Player.Player.RepetitionType</ReturnType>
+      </ReturnValue>
+      <Parameters>
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="RepeatPlaylist">
+      <MemberSignature Language="C#" Value="RepeatPlaylist" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>Player.Player.RepetitionType</ReturnType>
+      </ReturnValue>
+      <Parameters>
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="value__">
+      <MemberSignature Language="C#" Value="value__" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Parameters>
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+  </Members>
+</Type>
\ No newline at end of file

Deleted: player-sdk/trunk/doc/en/Player.Player/StateEventHandler.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Player/StateEventHandler.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Player/StateEventHandler.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -1,35 +0,0 @@
-<Type Name="StateEventHandler" FullName="Player.Player.StateEventHandler">
-  <TypeSignature Language="C#" Value="public sealed delegate void StateEventHandler (bool playing);" Maintainer="auto" />
-  <AssemblyInfo>
-    <AssemblyName>Player.Sdk</AssemblyName>
-    <AssemblyPublicKey>
-    </AssemblyPublicKey>
-    <AssemblyVersion>0.0.0.0</AssemblyVersion>
-    <AssemblyCulture>neutral</AssemblyCulture>
-    <Attributes />
-  </AssemblyInfo>
-  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
-  <Docs>
-    <summary>To be added</summary>
-    <remarks>To be added</remarks>
-  </Docs>
-  <Base>
-    <BaseTypeName>System.Delegate</BaseTypeName>
-  </Base>
-  <Interfaces>
-    <Interface>
-      <InterfaceName>System.ICloneable</InterfaceName>
-    </Interface>
-    <Interface>
-      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
-    </Interface>
-  </Interfaces>
-  <Attributes />
-  <Members />
-  <ReturnValue>
-    <ReturnType>System.Void</ReturnType>
-  </ReturnValue>
-  <Parameters>
-    <Parameter Name="playing" Type="System.Boolean" />
-  </Parameters>
-</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Player/StateEventHandler.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Player/StateEventHandler.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Player/StateEventHandler.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,35 @@
+<Type Name="StateEventHandler" FullName="Player.Player.StateEventHandler">
+  <TypeSignature Language="C#" Value="public sealed delegate void StateEventHandler (bool playing);" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base>
+    <BaseTypeName>System.Delegate</BaseTypeName>
+  </Base>
+  <Interfaces>
+    <Interface>
+      <InterfaceName>System.ICloneable</InterfaceName>
+    </Interface>
+    <Interface>
+      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
+    </Interface>
+  </Interfaces>
+  <Attributes />
+  <Members />
+  <ReturnValue>
+    <ReturnType>System.Void</ReturnType>
+  </ReturnValue>
+  <Parameters>
+    <Parameter Name="playing" Type="System.Boolean" />
+  </Parameters>
+</Type>
\ No newline at end of file

Deleted: player-sdk/trunk/doc/en/Player.Player/TickEventHandler.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Player/TickEventHandler.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Player/TickEventHandler.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -1,35 +0,0 @@
-<Type Name="TickEventHandler" FullName="Player.Player.TickEventHandler">
-  <TypeSignature Language="C#" Value="public sealed delegate void TickEventHandler (int pos);" Maintainer="auto" />
-  <AssemblyInfo>
-    <AssemblyName>Player.Sdk</AssemblyName>
-    <AssemblyPublicKey>
-    </AssemblyPublicKey>
-    <AssemblyVersion>0.0.0.0</AssemblyVersion>
-    <AssemblyCulture>neutral</AssemblyCulture>
-    <Attributes />
-  </AssemblyInfo>
-  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
-  <Docs>
-    <summary>To be added</summary>
-    <remarks>To be added</remarks>
-  </Docs>
-  <Base>
-    <BaseTypeName>System.Delegate</BaseTypeName>
-  </Base>
-  <Interfaces>
-    <Interface>
-      <InterfaceName>System.ICloneable</InterfaceName>
-    </Interface>
-    <Interface>
-      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
-    </Interface>
-  </Interfaces>
-  <Attributes />
-  <Members />
-  <ReturnValue>
-    <ReturnType>System.Void</ReturnType>
-  </ReturnValue>
-  <Parameters>
-    <Parameter Name="pos" Type="System.Int32" />
-  </Parameters>
-</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Player/TickEventHandler.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Player/TickEventHandler.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Player/TickEventHandler.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,35 @@
+<Type Name="TickEventHandler" FullName="Player.Player.TickEventHandler">
+  <TypeSignature Language="C#" Value="public sealed delegate void TickEventHandler (int pos);" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base>
+    <BaseTypeName>System.Delegate</BaseTypeName>
+  </Base>
+  <Interfaces>
+    <Interface>
+      <InterfaceName>System.ICloneable</InterfaceName>
+    </Interface>
+    <Interface>
+      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
+    </Interface>
+  </Interfaces>
+  <Attributes />
+  <Members />
+  <ReturnValue>
+    <ReturnType>System.Void</ReturnType>
+  </ReturnValue>
+  <Parameters>
+    <Parameter Name="pos" Type="System.Int32" />
+  </Parameters>
+</Type>
\ No newline at end of file

Deleted: player-sdk/trunk/doc/en/Player.Playlist/ClearedEventHandler.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Playlist/ClearedEventHandler.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Playlist/ClearedEventHandler.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -1,35 +0,0 @@
-<Type Name="ClearedEventHandler" FullName="Player.Playlist.ClearedEventHandler">
-  <TypeSignature Language="C#" Value="public sealed delegate void ClearedEventHandler (object obj);" Maintainer="auto" />
-  <AssemblyInfo>
-    <AssemblyName>Player.Sdk</AssemblyName>
-    <AssemblyPublicKey>
-    </AssemblyPublicKey>
-    <AssemblyVersion>0.0.0.0</AssemblyVersion>
-    <AssemblyCulture>neutral</AssemblyCulture>
-    <Attributes />
-  </AssemblyInfo>
-  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
-  <Docs>
-    <summary>To be added</summary>
-    <remarks>To be added</remarks>
-  </Docs>
-  <Base>
-    <BaseTypeName>System.Delegate</BaseTypeName>
-  </Base>
-  <Interfaces>
-    <Interface>
-      <InterfaceName>System.ICloneable</InterfaceName>
-    </Interface>
-    <Interface>
-      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
-    </Interface>
-  </Interfaces>
-  <Attributes />
-  <Members />
-  <ReturnValue>
-    <ReturnType>System.Void</ReturnType>
-  </ReturnValue>
-  <Parameters>
-    <Parameter Name="obj" Type="System.Object" />
-  </Parameters>
-</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Playlist/ClearedEventHandler.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Playlist/ClearedEventHandler.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Playlist/ClearedEventHandler.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,35 @@
+<Type Name="ClearedEventHandler" FullName="Player.Playlist.ClearedEventHandler">
+  <TypeSignature Language="C#" Value="public sealed delegate void ClearedEventHandler (object obj);" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base>
+    <BaseTypeName>System.Delegate</BaseTypeName>
+  </Base>
+  <Interfaces>
+    <Interface>
+      <InterfaceName>System.ICloneable</InterfaceName>
+    </Interface>
+    <Interface>
+      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
+    </Interface>
+  </Interfaces>
+  <Attributes />
+  <Members />
+  <ReturnValue>
+    <ReturnType>System.Void</ReturnType>
+  </ReturnValue>
+  <Parameters>
+    <Parameter Name="obj" Type="System.Object" />
+  </Parameters>
+</Type>
\ No newline at end of file

Deleted: player-sdk/trunk/doc/en/Player.Playlist/IPlaylist.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Playlist/IPlaylist.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Playlist/IPlaylist.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -1,70 +0,0 @@
-<Type Name="IPlaylist" FullName="Player.Playlist.IPlaylist">
-  <TypeSignature Language="C#" Value="public abstract interface IPlaylist" Maintainer="auto" />
-  <AssemblyInfo>
-    <AssemblyName>Player.Sdk</AssemblyName>
-    <AssemblyPublicKey>
-    </AssemblyPublicKey>
-    <AssemblyVersion>0.0.0.0</AssemblyVersion>
-    <AssemblyCulture>neutral</AssemblyCulture>
-    <Attributes />
-  </AssemblyInfo>
-  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
-  <Docs>
-    <summary>To be added</summary>
-    <remarks>To be added</remarks>
-  </Docs>
-  <Base />
-  <Interfaces>
-    <Interface>
-      <InterfaceName>System.Collections.IList</InterfaceName>
-    </Interface>
-    <Interface>
-      <InterfaceName>System.Collections.ICollection</InterfaceName>
-    </Interface>
-    <Interface>
-      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
-    </Interface>
-  </Interfaces>
-  <Attributes />
-  <Members>
-    <Member MemberName="Current">
-      <MemberSignature Language="C#" Value="public virtual Player.Data.Song Current { set; get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>Player.Data.Song</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:Player.Data.Song" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Next">
-      <MemberSignature Language="C#" Value="public virtual Player.Data.Song Next { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>Player.Data.Song</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:Player.Data.Song" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Previous">
-      <MemberSignature Language="C#" Value="public virtual Player.Data.Song Previous { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>Player.Data.Song</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:Player.Data.Song" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-  </Members>
-</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Playlist/IPlaylist.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Playlist/IPlaylist.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Playlist/IPlaylist.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,70 @@
+<Type Name="IPlaylist" FullName="Player.Playlist.IPlaylist">
+  <TypeSignature Language="C#" Value="public abstract interface IPlaylist" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base />
+  <Interfaces>
+    <Interface>
+      <InterfaceName>System.Collections.IList</InterfaceName>
+    </Interface>
+    <Interface>
+      <InterfaceName>System.Collections.ICollection</InterfaceName>
+    </Interface>
+    <Interface>
+      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
+    </Interface>
+  </Interfaces>
+  <Attributes />
+  <Members>
+    <Member MemberName="Current">
+      <MemberSignature Language="C#" Value="public virtual Player.Data.Song Current { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>Player.Data.Song</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:Player.Data.Song" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Next">
+      <MemberSignature Language="C#" Value="public virtual Player.Data.Song Next { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>Player.Data.Song</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:Player.Data.Song" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Previous">
+      <MemberSignature Language="C#" Value="public virtual Player.Data.Song Previous { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>Player.Data.Song</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:Player.Data.Song" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+  </Members>
+</Type>
\ No newline at end of file

Deleted: player-sdk/trunk/doc/en/Player.Playlist/Playlist.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Playlist/Playlist.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Playlist/Playlist.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -1,356 +0,0 @@
-<Type Name="Playlist" FullName="Player.Playlist.Playlist">
-  <TypeSignature Language="C#" Value="public class Playlist : IPlaylist, IList, ICollection, IEnumerable" Maintainer="auto" />
-  <AssemblyInfo>
-    <AssemblyName>Player.Sdk</AssemblyName>
-    <AssemblyPublicKey>
-    </AssemblyPublicKey>
-    <AssemblyVersion>0.0.0.0</AssemblyVersion>
-    <AssemblyCulture>neutral</AssemblyCulture>
-    <Attributes />
-  </AssemblyInfo>
-  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
-  <Docs>
-    <summary>To be added</summary>
-    <remarks>To be added</remarks>
-  </Docs>
-  <Base>
-    <BaseTypeName>System.Object</BaseTypeName>
-  </Base>
-  <Interfaces>
-    <Interface>
-      <InterfaceName>Player.Playlist.IPlaylist</InterfaceName>
-    </Interface>
-    <Interface>
-      <InterfaceName>System.Collections.IList</InterfaceName>
-    </Interface>
-    <Interface>
-      <InterfaceName>System.Collections.ICollection</InterfaceName>
-    </Interface>
-    <Interface>
-      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
-    </Interface>
-  </Interfaces>
-  <Attributes>
-    <Attribute>
-      <AttributeName>System.Reflection.DefaultMemberAttribute</AttributeName>
-    </Attribute>
-  </Attributes>
-  <Members>
-    <Member MemberName="Add">
-      <MemberSignature Language="C#" Value="public virtual int Add (object obj);" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Int32</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="obj" Type="System.Object" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="obj">a <see cref="T:System.Object" /></param>
-        <returns>a <see cref="T:System.Int32" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Insert">
-      <MemberSignature Language="C#" Value="public virtual void Insert (int index, object obj);" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Void</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="index" Type="System.Int32" />
-        <Parameter Name="obj" Type="System.Object" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="index">a <see cref="T:System.Int32" /></param>
-        <param name="obj">a <see cref="T:System.Object" /></param>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Remove">
-      <MemberSignature Language="C#" Value="public virtual void Remove (object obj);" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Void</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="obj" Type="System.Object" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="obj">a <see cref="T:System.Object" /></param>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="RemoveAt">
-      <MemberSignature Language="C#" Value="public virtual void RemoveAt (int index);" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Void</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="index" Type="System.Int32" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="index">a <see cref="T:System.Int32" /></param>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Clear">
-      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Void</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Contains">
-      <MemberSignature Language="C#" Value="public virtual bool Contains (object obj);" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Boolean</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="obj" Type="System.Object" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="obj">a <see cref="T:System.Object" /></param>
-        <returns>a <see cref="T:System.Boolean" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="IndexOf">
-      <MemberSignature Language="C#" Value="public virtual int IndexOf (object obj);" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Int32</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="obj" Type="System.Object" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="obj">a <see cref="T:System.Object" /></param>
-        <returns>a <see cref="T:System.Int32" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="CopyTo">
-      <MemberSignature Language="C#" Value="public virtual void CopyTo (Array array, int index);" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Void</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="array" Type="System.Array" />
-        <Parameter Name="index" Type="System.Int32" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="array">a <see cref="T:System.Array" /></param>
-        <param name="index">a <see cref="T:System.Int32" /></param>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="GetEnumerator">
-      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetEnumerator ();" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Collections.IEnumerator</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.Collections.IEnumerator" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName=".ctor">
-      <MemberSignature Language="C#" Value="public Playlist ();" />
-      <MemberType>Constructor</MemberType>
-      <ReturnValue />
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:Player.Playlist.Playlist" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="IsReadOnly">
-      <MemberSignature Language="C#" Value="public virtual bool IsReadOnly { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Boolean</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.Boolean" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="IsFixedSize">
-      <MemberSignature Language="C#" Value="public virtual bool IsFixedSize { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Boolean</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.Boolean" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Count">
-      <MemberSignature Language="C#" Value="public virtual int Count { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Int32</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.Int32" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="IsSynchronized">
-      <MemberSignature Language="C#" Value="public virtual bool IsSynchronized { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Boolean</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.Boolean" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="SyncRoot">
-      <MemberSignature Language="C#" Value="public virtual object SyncRoot { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Object</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:System.Object" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Current">
-      <MemberSignature Language="C#" Value="public virtual Player.Data.Song Current { set; get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>Player.Data.Song</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:Player.Data.Song" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Next">
-      <MemberSignature Language="C#" Value="public virtual Player.Data.Song Next { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>Player.Data.Song</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:Player.Data.Song" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Previous">
-      <MemberSignature Language="C#" Value="public virtual Player.Data.Song Previous { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>Player.Data.Song</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <returns>a <see cref="T:Player.Data.Song" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="Item">
-      <MemberSignature Language="C#" Value="public virtual object Item { set; get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Object</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="index" Type="System.Int32" />
-      </Parameters>
-      <Docs>
-        <summary>To be added</summary>
-        <param name="index">a <see cref="T:System.Int32" /></param>
-        <returns>a <see cref="T:System.Object" /></returns>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="SongAddedEvent">
-      <MemberSignature Language="C#" Value="public event Player.Playlist.SongAddedEventHandler SongAddedEvent;" />
-      <MemberType>Event</MemberType>
-      <ReturnValue>
-        <ReturnType>Player.Playlist.SongAddedEventHandler</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="SongRemovedEvent">
-      <MemberSignature Language="C#" Value="public event Player.Playlist.SongRemovedEventHandler SongRemovedEvent;" />
-      <MemberType>Event</MemberType>
-      <ReturnValue>
-        <ReturnType>Player.Playlist.SongRemovedEventHandler</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="ClearedEvent">
-      <MemberSignature Language="C#" Value="public event Player.Playlist.ClearedEventHandler ClearedEvent;" />
-      <MemberType>Event</MemberType>
-      <ReturnValue>
-        <ReturnType>Player.Playlist.ClearedEventHandler</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="SongChangedEvent">
-      <MemberSignature Language="C#" Value="public event Player.Playlist.SongChangedEventHandler SongChangedEvent;" />
-      <MemberType>Event</MemberType>
-      <ReturnValue>
-        <ReturnType>Player.Playlist.SongChangedEventHandler</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>To be added</summary>
-        <remarks>To be added</remarks>
-      </Docs>
-    </Member>
-  </Members>
-</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Playlist/Playlist.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Playlist/Playlist.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Playlist/Playlist.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,356 @@
+<Type Name="Playlist" FullName="Player.Playlist.Playlist">
+  <TypeSignature Language="C#" Value="public class Playlist : IPlaylist, IList, ICollection, IEnumerable" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base>
+    <BaseTypeName>System.Object</BaseTypeName>
+  </Base>
+  <Interfaces>
+    <Interface>
+      <InterfaceName>Player.Playlist.IPlaylist</InterfaceName>
+    </Interface>
+    <Interface>
+      <InterfaceName>System.Collections.IList</InterfaceName>
+    </Interface>
+    <Interface>
+      <InterfaceName>System.Collections.ICollection</InterfaceName>
+    </Interface>
+    <Interface>
+      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
+    </Interface>
+  </Interfaces>
+  <Attributes>
+    <Attribute>
+      <AttributeName>System.Reflection.DefaultMemberAttribute</AttributeName>
+    </Attribute>
+  </Attributes>
+  <Members>
+    <Member MemberName="Add">
+      <MemberSignature Language="C#" Value="public virtual int Add (object obj);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="obj" Type="System.Object" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="obj">a <see cref="T:System.Object" /></param>
+        <returns>a <see cref="T:System.Int32" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Insert">
+      <MemberSignature Language="C#" Value="public virtual void Insert (int index, object obj);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="index" Type="System.Int32" />
+        <Parameter Name="obj" Type="System.Object" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="index">a <see cref="T:System.Int32" /></param>
+        <param name="obj">a <see cref="T:System.Object" /></param>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Remove">
+      <MemberSignature Language="C#" Value="public virtual void Remove (object obj);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="obj" Type="System.Object" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="obj">a <see cref="T:System.Object" /></param>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="RemoveAt">
+      <MemberSignature Language="C#" Value="public virtual void RemoveAt (int index);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="index" Type="System.Int32" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="index">a <see cref="T:System.Int32" /></param>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Clear">
+      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Contains">
+      <MemberSignature Language="C#" Value="public virtual bool Contains (object obj);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="obj" Type="System.Object" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="obj">a <see cref="T:System.Object" /></param>
+        <returns>a <see cref="T:System.Boolean" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="IndexOf">
+      <MemberSignature Language="C#" Value="public virtual int IndexOf (object obj);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="obj" Type="System.Object" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="obj">a <see cref="T:System.Object" /></param>
+        <returns>a <see cref="T:System.Int32" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="CopyTo">
+      <MemberSignature Language="C#" Value="public virtual void CopyTo (Array array, int index);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="array" Type="System.Array" />
+        <Parameter Name="index" Type="System.Int32" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="array">a <see cref="T:System.Array" /></param>
+        <param name="index">a <see cref="T:System.Int32" /></param>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="GetEnumerator">
+      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetEnumerator ();" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Collections.IEnumerator</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.Collections.IEnumerator" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public Playlist ();" />
+      <MemberType>Constructor</MemberType>
+      <ReturnValue />
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:Player.Playlist.Playlist" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="IsReadOnly">
+      <MemberSignature Language="C#" Value="public virtual bool IsReadOnly { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.Boolean" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="IsFixedSize">
+      <MemberSignature Language="C#" Value="public virtual bool IsFixedSize { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.Boolean" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Count">
+      <MemberSignature Language="C#" Value="public virtual int Count { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.Int32" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="IsSynchronized">
+      <MemberSignature Language="C#" Value="public virtual bool IsSynchronized { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.Boolean" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="SyncRoot">
+      <MemberSignature Language="C#" Value="public virtual object SyncRoot { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Object</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:System.Object" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Current">
+      <MemberSignature Language="C#" Value="public virtual Player.Data.Song Current { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>Player.Data.Song</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:Player.Data.Song" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Next">
+      <MemberSignature Language="C#" Value="public virtual Player.Data.Song Next { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>Player.Data.Song</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:Player.Data.Song" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Previous">
+      <MemberSignature Language="C#" Value="public virtual Player.Data.Song Previous { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>Player.Data.Song</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:Player.Data.Song" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Item">
+      <MemberSignature Language="C#" Value="public virtual object Item { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Object</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="index" Type="System.Int32" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="index">a <see cref="T:System.Int32" /></param>
+        <returns>a <see cref="T:System.Object" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="SongAddedEvent">
+      <MemberSignature Language="C#" Value="public event Player.Playlist.SongAddedEventHandler SongAddedEvent;" />
+      <MemberType>Event</MemberType>
+      <ReturnValue>
+        <ReturnType>Player.Playlist.SongAddedEventHandler</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="SongRemovedEvent">
+      <MemberSignature Language="C#" Value="public event Player.Playlist.SongRemovedEventHandler SongRemovedEvent;" />
+      <MemberType>Event</MemberType>
+      <ReturnValue>
+        <ReturnType>Player.Playlist.SongRemovedEventHandler</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="ClearedEvent">
+      <MemberSignature Language="C#" Value="public event Player.Playlist.ClearedEventHandler ClearedEvent;" />
+      <MemberType>Event</MemberType>
+      <ReturnValue>
+        <ReturnType>Player.Playlist.ClearedEventHandler</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="SongChangedEvent">
+      <MemberSignature Language="C#" Value="public event Player.Playlist.SongChangedEventHandler SongChangedEvent;" />
+      <MemberType>Event</MemberType>
+      <ReturnValue>
+        <ReturnType>Player.Playlist.SongChangedEventHandler</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+  </Members>
+</Type>
\ No newline at end of file

Deleted: player-sdk/trunk/doc/en/Player.Playlist/SongAddedEventHandler.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Playlist/SongAddedEventHandler.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Playlist/SongAddedEventHandler.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -1,36 +0,0 @@
-<Type Name="SongAddedEventHandler" FullName="Player.Playlist.SongAddedEventHandler">
-  <TypeSignature Language="C#" Value="public sealed delegate void SongAddedEventHandler (object obj, Player.Data.Song song);" Maintainer="auto" />
-  <AssemblyInfo>
-    <AssemblyName>Player.Sdk</AssemblyName>
-    <AssemblyPublicKey>
-    </AssemblyPublicKey>
-    <AssemblyVersion>0.0.0.0</AssemblyVersion>
-    <AssemblyCulture>neutral</AssemblyCulture>
-    <Attributes />
-  </AssemblyInfo>
-  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
-  <Docs>
-    <summary>To be added</summary>
-    <remarks>To be added</remarks>
-  </Docs>
-  <Base>
-    <BaseTypeName>System.Delegate</BaseTypeName>
-  </Base>
-  <Interfaces>
-    <Interface>
-      <InterfaceName>System.ICloneable</InterfaceName>
-    </Interface>
-    <Interface>
-      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
-    </Interface>
-  </Interfaces>
-  <Attributes />
-  <Members />
-  <ReturnValue>
-    <ReturnType>System.Void</ReturnType>
-  </ReturnValue>
-  <Parameters>
-    <Parameter Name="obj" Type="System.Object" />
-    <Parameter Name="song" Type="Player.Data.Song" />
-  </Parameters>
-</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Playlist/SongAddedEventHandler.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Playlist/SongAddedEventHandler.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Playlist/SongAddedEventHandler.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,36 @@
+<Type Name="SongAddedEventHandler" FullName="Player.Playlist.SongAddedEventHandler">
+  <TypeSignature Language="C#" Value="public sealed delegate void SongAddedEventHandler (object obj, Player.Data.Song song);" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base>
+    <BaseTypeName>System.Delegate</BaseTypeName>
+  </Base>
+  <Interfaces>
+    <Interface>
+      <InterfaceName>System.ICloneable</InterfaceName>
+    </Interface>
+    <Interface>
+      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
+    </Interface>
+  </Interfaces>
+  <Attributes />
+  <Members />
+  <ReturnValue>
+    <ReturnType>System.Void</ReturnType>
+  </ReturnValue>
+  <Parameters>
+    <Parameter Name="obj" Type="System.Object" />
+    <Parameter Name="song" Type="Player.Data.Song" />
+  </Parameters>
+</Type>
\ No newline at end of file

Deleted: player-sdk/trunk/doc/en/Player.Playlist/SongChangedEventHandler.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Playlist/SongChangedEventHandler.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Playlist/SongChangedEventHandler.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -1,36 +0,0 @@
-<Type Name="SongChangedEventHandler" FullName="Player.Playlist.SongChangedEventHandler">
-  <TypeSignature Language="C#" Value="public sealed delegate void SongChangedEventHandler (object obj, Player.Data.Song song);" Maintainer="auto" />
-  <AssemblyInfo>
-    <AssemblyName>Player.Sdk</AssemblyName>
-    <AssemblyPublicKey>
-    </AssemblyPublicKey>
-    <AssemblyVersion>0.0.0.0</AssemblyVersion>
-    <AssemblyCulture>neutral</AssemblyCulture>
-    <Attributes />
-  </AssemblyInfo>
-  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
-  <Docs>
-    <summary>To be added</summary>
-    <remarks>To be added</remarks>
-  </Docs>
-  <Base>
-    <BaseTypeName>System.Delegate</BaseTypeName>
-  </Base>
-  <Interfaces>
-    <Interface>
-      <InterfaceName>System.ICloneable</InterfaceName>
-    </Interface>
-    <Interface>
-      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
-    </Interface>
-  </Interfaces>
-  <Attributes />
-  <Members />
-  <ReturnValue>
-    <ReturnType>System.Void</ReturnType>
-  </ReturnValue>
-  <Parameters>
-    <Parameter Name="obj" Type="System.Object" />
-    <Parameter Name="song" Type="Player.Data.Song" />
-  </Parameters>
-</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Playlist/SongChangedEventHandler.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Playlist/SongChangedEventHandler.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Playlist/SongChangedEventHandler.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,36 @@
+<Type Name="SongChangedEventHandler" FullName="Player.Playlist.SongChangedEventHandler">
+  <TypeSignature Language="C#" Value="public sealed delegate void SongChangedEventHandler (object obj, Player.Data.Song song);" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base>
+    <BaseTypeName>System.Delegate</BaseTypeName>
+  </Base>
+  <Interfaces>
+    <Interface>
+      <InterfaceName>System.ICloneable</InterfaceName>
+    </Interface>
+    <Interface>
+      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
+    </Interface>
+  </Interfaces>
+  <Attributes />
+  <Members />
+  <ReturnValue>
+    <ReturnType>System.Void</ReturnType>
+  </ReturnValue>
+  <Parameters>
+    <Parameter Name="obj" Type="System.Object" />
+    <Parameter Name="song" Type="Player.Data.Song" />
+  </Parameters>
+</Type>
\ No newline at end of file

Deleted: player-sdk/trunk/doc/en/Player.Playlist/SongRemovedEventHandler.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Playlist/SongRemovedEventHandler.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Playlist/SongRemovedEventHandler.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -1,36 +0,0 @@
-<Type Name="SongRemovedEventHandler" FullName="Player.Playlist.SongRemovedEventHandler">
-  <TypeSignature Language="C#" Value="public sealed delegate void SongRemovedEventHandler (object obj, Player.Data.Song song);" Maintainer="auto" />
-  <AssemblyInfo>
-    <AssemblyName>Player.Sdk</AssemblyName>
-    <AssemblyPublicKey>
-    </AssemblyPublicKey>
-    <AssemblyVersion>0.0.0.0</AssemblyVersion>
-    <AssemblyCulture>neutral</AssemblyCulture>
-    <Attributes />
-  </AssemblyInfo>
-  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
-  <Docs>
-    <summary>To be added</summary>
-    <remarks>To be added</remarks>
-  </Docs>
-  <Base>
-    <BaseTypeName>System.Delegate</BaseTypeName>
-  </Base>
-  <Interfaces>
-    <Interface>
-      <InterfaceName>System.ICloneable</InterfaceName>
-    </Interface>
-    <Interface>
-      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
-    </Interface>
-  </Interfaces>
-  <Attributes />
-  <Members />
-  <ReturnValue>
-    <ReturnType>System.Void</ReturnType>
-  </ReturnValue>
-  <Parameters>
-    <Parameter Name="obj" Type="System.Object" />
-    <Parameter Name="song" Type="Player.Data.Song" />
-  </Parameters>
-</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Playlist/SongRemovedEventHandler.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Playlist/SongRemovedEventHandler.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Playlist/SongRemovedEventHandler.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,36 @@
+<Type Name="SongRemovedEventHandler" FullName="Player.Playlist.SongRemovedEventHandler">
+  <TypeSignature Language="C#" Value="public sealed delegate void SongRemovedEventHandler (object obj, Player.Data.Song song);" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base>
+    <BaseTypeName>System.Delegate</BaseTypeName>
+  </Base>
+  <Interfaces>
+    <Interface>
+      <InterfaceName>System.ICloneable</InterfaceName>
+    </Interface>
+    <Interface>
+      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
+    </Interface>
+  </Interfaces>
+  <Attributes />
+  <Members />
+  <ReturnValue>
+    <ReturnType>System.Void</ReturnType>
+  </ReturnValue>
+  <Parameters>
+    <Parameter Name="obj" Type="System.Object" />
+    <Parameter Name="song" Type="Player.Data.Song" />
+  </Parameters>
+</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Plugins/IPlugin.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Plugins/IPlugin.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Plugins/IPlugin.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,24 @@
+<Type Name="IPlugin" FullName="Player.Plugins.IPlugin">
+  <TypeSignature Language="C#" Value="public abstract interface IPlugin" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base />
+  <Interfaces>
+    <Interface>
+      <InterfaceName>Player.Addins.IAddin</InterfaceName>
+    </Interface>
+  </Interfaces>
+  <Attributes />
+  <Members />
+</Type>
\ No newline at end of file

Added: player-sdk/trunk/doc/en/Player.Plugins/PluginManager.xml
===================================================================
--- player-sdk/trunk/doc/en/Player.Plugins/PluginManager.xml	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/doc/en/Player.Plugins/PluginManager.xml	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,109 @@
+<Type Name="PluginManager" FullName="Player.Plugins.PluginManager">
+  <TypeSignature Language="C#" Value="public class PluginManager" Maintainer="auto" />
+  <AssemblyInfo>
+    <AssemblyName>Player.Sdk</AssemblyName>
+    <AssemblyPublicKey>
+    </AssemblyPublicKey>
+    <AssemblyVersion>0.0.0.0</AssemblyVersion>
+    <AssemblyCulture>neutral</AssemblyCulture>
+    <Attributes />
+  </AssemblyInfo>
+  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
+  <Docs>
+    <summary>To be added</summary>
+    <remarks>To be added</remarks>
+  </Docs>
+  <Base>
+    <BaseTypeName>System.Object</BaseTypeName>
+  </Base>
+  <Interfaces />
+  <Attributes />
+  <Members>
+    <Member MemberName="UnloadPlugin">
+      <MemberSignature Language="C#" Value="public void UnloadPlugin (string pluginId);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="pluginId" Type="System.String" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="pluginId">a <see cref="T:System.String" /></param>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="UpdatePlugin">
+      <MemberSignature Language="C#" Value="public void UpdatePlugin (string pluginId);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="pluginId" Type="System.String" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="pluginId">a <see cref="T:System.String" /></param>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="LoadPlugin">
+      <MemberSignature Language="C#" Value="public void LoadPlugin (string pluginId);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="pluginId" Type="System.String" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="pluginId">a <see cref="T:System.String" /></param>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="DisablePlugin">
+      <MemberSignature Language="C#" Value="public void DisablePlugin (string pluginId);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="pluginId" Type="System.String" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="pluginId">a <see cref="T:System.String" /></param>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="EnablePlugin">
+      <MemberSignature Language="C#" Value="public void EnablePlugin (string pluginId);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="pluginId" Type="System.String" />
+      </Parameters>
+      <Docs>
+        <summary>To be added</summary>
+        <param name="pluginId">a <see cref="T:System.String" /></param>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public PluginManager ();" />
+      <MemberType>Constructor</MemberType>
+      <ReturnValue />
+      <Parameters />
+      <Docs>
+        <summary>To be added</summary>
+        <returns>a <see cref="T:Player.Plugins.PluginManager" /></returns>
+        <remarks>To be added</remarks>
+      </Docs>
+    </Member>
+  </Members>
+</Type>
\ No newline at end of file

Modified: player-sdk/trunk/examples/DbTest.cs
===================================================================
--- player-sdk/trunk/examples/DbTest.cs	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/examples/DbTest.cs	2004-11-07 14:06:09 UTC (rev 4)
@@ -19,7 +19,6 @@
 
 using System;    
 using Player.Data;
-using Player.Services;
 using Gtk;
 
 public class DbTest
@@ -32,7 +31,6 @@
     {
 	    Application.Init ();
 	    Song s = new Song ("test.mp3");
-	    SdkServices.MusicDb.AddSong (s);
 	    Application.Run ();
     }
 }

Added: player-sdk/trunk/examples/KitManagerTest.cs
===================================================================
--- player-sdk/trunk/examples/KitManagerTest.cs	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/examples/KitManagerTest.cs	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,34 @@
+/*
+ * Copyright (C) 2004 Sergio Rubio <sergio.rubio at hispalinux.es>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this program; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */
+
+using System;    
+using Player.Kits;
+using Gtk;
+
+public class KitManagerTest
+{
+	public static void Main ()
+	{
+		Application.Init ();
+		KitManager manager = KitManager.GetInstance ();
+		Application.Run ();
+	}
+}
+
+

Modified: player-sdk/trunk/examples/Makefile.am
===================================================================
--- player-sdk/trunk/examples/Makefile.am	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/examples/Makefile.am	2004-11-07 14:06:09 UTC (rev 4)
@@ -2,7 +2,11 @@
 	-pkg:gtk-sharp				\
 	-r:../src/Player.Sdk.dll
 
-all: db-test.exe
+all: db-test.exe kitmanager-test.exe
 
 db-test.exe: DbTest.cs
 	mcs DbTest.cs -o $@ $(REFERENCES)
+
+kitmanager-test.exe: KitManagerTest.cs
+	mcs KitManagerTest.cs -o $@ $(REFERENCES)
+	

Added: player-sdk/trunk/src/Addins/AddinLoader.cs
===================================================================
--- player-sdk/trunk/src/Addins/AddinLoader.cs	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/src/Addins/AddinLoader.cs	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,82 @@
+/*
+ * Copyright (C) 2004 Sergio Rubio <sergio.rubio at hispalinux.es>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this program; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */
+
+namespace Player.Addins 
+{
+    using System;    
+	using System.Reflection;
+	using System.IO;
+	using Player.Configuration;
+
+	public class AddinLoader
+	{
+
+		public static IAddin LoadAddin (string addinDir, string addinAssembly, string addinType)
+		{
+			char separator = Path.DirectorySeparatorChar;
+			IAddin addinObject = null;
+			Assembly asm = null;
+			//First, the addin is loaded from the user config dir.
+			//If not, try to the system wide addin.
+			try {
+				string userConfigDir = Configuration.GetInstance ().UserConfigDir;
+				string userAddinLocation;
+				if (addinAssembly.EndsWith (".dll"))
+					userAddinLocation = userConfigDir + separator + addinDir + separator + addinAssembly;
+				else
+					userAddinLocation = userConfigDir + separator + addinDir + separator + addinAssembly + ".dll";
+
+				if (File.Exists (userAddinLocation))
+				{
+					Console.WriteLine ("Loading {0} from USER addins", addinAssembly);
+					asm = Assembly.LoadFrom (userAddinLocation);
+					if (asm != null)
+						Console.WriteLine ("{0} loaded succesfully", addinAssembly);
+					addinObject = (IAddin) asm.CreateInstance (addinType);
+
+				//Loading from system addins
+				} else {
+					Console.WriteLine ("Loading {0} from SYSTEM addins", addinAssembly);
+					string sdkDir = Path.GetDirectoryName (Assembly.GetCallingAssembly ().Location);
+					string systemAddinLocation = sdkDir + separator + "Player.Sdk" + 
+								separator + addinDir + separator + addinAssembly + ".dll";
+					Console.WriteLine ("Addin location: {0}", systemAddinLocation);
+					asm = Assembly.LoadFrom (systemAddinLocation);
+					if (asm != null)
+						Console.WriteLine ("Assembly {0}.dll loaded succesfully", addinAssembly);
+					addinObject = (IAddin) asm.CreateInstance (addinType);
+				}
+
+				if (addinObject == null)
+				{
+					Console.WriteLine ("Error initiating {0}", addinType);
+					throw new AddinUnavailableException (String.Format ("ERROR: Addin {0} unavailable.", addinType));
+				}
+				return addinObject;
+						
+			} catch (Exception e) {
+				Console.WriteLine (e.StackTrace);
+				Console.WriteLine (e.Message);
+				throw new AddinLoadingException (String.Format ("ERROR: Error loading addin {0}.", addinType), e);
+			}
+		}
+	}
+
+}
+

Added: player-sdk/trunk/src/Addins/AddinLoadingException.cs
===================================================================
--- player-sdk/trunk/src/Addins/AddinLoadingException.cs	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/src/Addins/AddinLoadingException.cs	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,30 @@
+/*
+ * Copyright (C) 2004 Sergio Rubio <sergio.rubio at hispalinux.es>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this program; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */
+
+namespace Player.Addins 
+{
+    using System;    
+
+	public class AddinLoadingException : ApplicationException
+	{
+		public AddinLoadingException (string msg, Exception e) : base (msg, e) {}
+	}
+
+}
+

Added: player-sdk/trunk/src/Addins/AddinUnavailableException.cs
===================================================================
--- player-sdk/trunk/src/Addins/AddinUnavailableException.cs	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/src/Addins/AddinUnavailableException.cs	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2004 Sergio Rubio <sergio.rubio at hispalinux.es>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this program; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */
+
+namespace Player.Addins 
+{
+    using System;    
+
+	public class AddinUnavailableException : ApplicationException
+	{
+		public AddinUnavailableException (string msg, Exception e) : base (msg, e) {}
+
+		public AddinUnavailableException (string msg) : base (msg) {}
+	}
+
+}
+

Added: player-sdk/trunk/src/Addins/IAddin.cs
===================================================================
--- player-sdk/trunk/src/Addins/IAddin.cs	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/src/Addins/IAddin.cs	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,36 @@
+/*
+ * Copyright (C) 2004 Sergio Rubio <sergio.rubio at hispalinux.es>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this program; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */
+
+namespace Player.Addins
+{
+    using System;    
+
+	public interface IAddin
+	{
+
+		string Version { get; }
+		string Name { get; }
+		string Description { get; }
+		void Load ();
+		void Unload ();
+		
+	}
+
+}
+

Copied: player-sdk/trunk/src/Data/IDataKit.cs (from rev 3, player-sdk/trunk/src/Data/IMusicDb.cs)
===================================================================
--- player-sdk/trunk/src/Data/IMusicDb.cs	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/src/Data/IDataKit.cs	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,42 @@
+/*
+ * Copyright (C) 2004 Sergio Rubio <sergio.rubio at hispalinux.es>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this program; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */
+
+namespace Player.Data 
+{
+    using System;
+    using System.Collections;
+	using Player.Kits;
+
+    public interface IDataKit : IKit
+    {
+		ArrayList Songs { get; }
+
+		ArrayList Albums { get; }
+
+		bool AddSong (Song song);
+
+		bool AddAlbum (Album album);
+
+		bool RemoveSong (Song song);
+
+		bool RemoveAlbum (Album album);
+    }
+
+}
+

Deleted: player-sdk/trunk/src/Data/IMusicDb.cs
===================================================================
--- player-sdk/trunk/src/Data/IMusicDb.cs	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/src/Data/IMusicDb.cs	2004-11-07 14:06:09 UTC (rev 4)
@@ -1,41 +0,0 @@
-/*
- * Copyright (C) 2004 Sergio Rubio <sergio.rubio at hispalinux.es>
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License as
- * published by the Free Software Foundation; either version 2 of the
- * License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * General Public License for more details.
- *
- * You should have received a copy of the GNU General Public
- * License along with this program; if not, write to the
- * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
- * Boston, MA 02111-1307, USA.
- */
-
-namespace Player.Data 
-{
-    using System;
-    using System.Collections;
-
-    public interface IMusicDb
-    {
-	ArrayList Songs { get; }
-
-	ArrayList Albums { get; }
-
-	bool AddSong (Song song);
-
-	bool AddAlbum (Album album);
-
-	bool RemoveSong (Song song);
-
-	bool RemoveAlbum (Album album);
-    }
-
-}
-

Added: player-sdk/trunk/src/Kits/IKit.cs
===================================================================
--- player-sdk/trunk/src/Kits/IKit.cs	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/src/Kits/IKit.cs	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,30 @@
+/*
+ * Copyright (C) 2004 Sergio Rubio <sergio.rubio at hispalinux.es>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this program; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */
+
+namespace Player.Kits 
+{
+    using System;    
+	using Player.Addins;
+
+	public interface IKit : IAddin
+	{
+	}
+
+}
+

Added: player-sdk/trunk/src/Kits/KitManager.cs
===================================================================
--- player-sdk/trunk/src/Kits/KitManager.cs	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/src/Kits/KitManager.cs	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,78 @@
+/*
+ * Copyright (C) 2004 Sergio Rubio <sergio.rubio at hispalinux.es>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this program; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */
+
+namespace Player.Kits 
+{
+    using System;    
+	using Player.Addins;
+	using Player.Player;
+	using Player.Data;
+	using Player.Configuration;
+	using System.Collections;
+
+	public class KitManager
+	{
+		private Hashtable kits = new Hashtable ();
+		private string playerKitLocation = "PlayerKits";
+		private string dataKitLocation = "DataKits";
+		private static KitManager instance;
+		private Configuration config = Configuration.GetInstance ();
+		
+		private KitManager ()
+		{
+			LoadKits ();
+		}
+
+		public IKit this [string kitName]
+		{
+			get {
+				return (IKit) kits[kitName];
+			}
+
+			set {
+				((IKit)kits[kitName]).Unload ();
+				value.Load ();
+				kits[kitName] = value; 
+			}
+		}
+
+		public static KitManager GetInstance ()
+		{
+			if (instance == null)
+				instance = new KitManager ();
+			return instance;
+		}
+
+		public void UpdateKits ()
+		{
+		}
+
+		public void SwapKit (string kitType, IKit kit)
+		{
+		}
+
+		private void LoadKits ()
+		{
+			kits.Add ("DataKit", AddinLoader.LoadAddin (dataKitLocation, config.DataKitAssembly, config.DataKitType));
+			kits.Add ("PlayerKit", AddinLoader.LoadAddin (playerKitLocation, config.PlayerKitAssembly, config.PlayerKitAssembly));
+		}
+	}
+
+}
+

Deleted: player-sdk/trunk/src/Player/IPlayer.cs
===================================================================
--- player-sdk/trunk/src/Player/IPlayer.cs	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/src/Player/IPlayer.cs	2004-11-07 14:06:09 UTC (rev 4)
@@ -1,34 +0,0 @@
-// created on 08/31/2004 at 13:24
-namespace Player.Player
-{
-
-    using Player.Playlist;
-
-	public enum RepetitionType {
-				    RepeatSong,
-				    RepeatPlaylist
-				    }
-	
-	public delegate void EOSEventHandler ();
-	public delegate void TickEventHandler (int pos);
-	public delegate void StateEventHandler (bool playing);
-						
-	public interface IPlayer {
-	
-	    bool Playing {get; set;}
-	    int Position {get; set;}
-	    int Volume {get; set;}
-	    IPlaylist Playlist {get; set;}
-	    void Play ();
-	    void Pause ();
-	    void Stop ();
-	    void Next ();
-	    void Previous ();
-	    void Repeat (RepetitionType type);
-	    
-	    event EOSEventHandler EOSEvent;
-	    event TickEventHandler TickEvent;
-	    event StateEventHandler StateEvent;
-		
-	}
-}

Copied: player-sdk/trunk/src/Player/IPlayerKit.cs (from rev 3, player-sdk/trunk/src/Player/IPlayer.cs)
===================================================================
--- player-sdk/trunk/src/Player/IPlayer.cs	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/src/Player/IPlayerKit.cs	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,35 @@
+// created on 08/31/2004 at 13:24
+namespace Player.Player
+{
+
+    using Player.Playlist;
+	using Player.Kits;
+
+	public enum RepetitionType {
+				    RepeatSong,
+				    RepeatPlaylist
+				    }
+	
+	public delegate void EOSEventHandler ();
+	public delegate void TickEventHandler (int pos);
+	public delegate void StateEventHandler (bool playing);
+						
+	public interface IPlayerKit : IKit {
+	
+	    bool Playing {get; set;}
+	    int Position {get; set;}
+	    int Volume {get; set;}
+	    IPlaylist Playlist {get; set;}
+	    void Play ();
+	    void Pause ();
+	    void Stop ();
+	    void Next ();
+	    void Previous ();
+	    void Repeat (RepetitionType type);
+	    
+	    event EOSEventHandler EOSEvent;
+	    event TickEventHandler TickEvent;
+	    event StateEventHandler StateEvent;
+		
+	}
+}

Added: player-sdk/trunk/src/Plugins/IPlugin.cs
===================================================================
--- player-sdk/trunk/src/Plugins/IPlugin.cs	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/src/Plugins/IPlugin.cs	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,30 @@
+/*
+ * Copyright (C) 2004 Sergio Rubio <sergio.rubio at hispalinux.es>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this program; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */
+
+namespace Player.Plugins 
+{
+    using System;
+	using Player.Addins;
+
+	public interface IPlugin : IAddin
+	{
+	}
+
+}
+

Added: player-sdk/trunk/src/Plugins/PluginManager.cs
===================================================================
--- player-sdk/trunk/src/Plugins/PluginManager.cs	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/src/Plugins/PluginManager.cs	2004-11-07 14:06:09 UTC (rev 4)
@@ -0,0 +1,61 @@
+/*
+ * Copyright (C) 2004 Sergio Rubio <sergio.rubio at hispalinux.es>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this program; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */
+
+namespace Player.Plugins 
+{
+    using System;
+	using System.Collections;
+
+	public class PluginManager
+	{
+
+		private Hashtable plugins;
+		private Hashtable loadedPlugins;
+
+		public PluginManager ()
+		{
+		}
+
+		internal void LoadAllPlugins ()
+		{
+		}
+
+		public void UnloadPlugin (string pluginId)
+		{
+		}
+
+		public void UpdatePlugin (string pluginId)
+		{
+		}
+
+		public void LoadPlugin (string pluginId)
+		{
+		}
+
+		public void DisablePlugin (string pluginId)
+		{
+		}
+
+		public void EnablePlugin (string pluginId)
+		{
+		}
+	}
+
+}
+

Modified: player-sdk/trunk/src/sources.list
===================================================================
--- player-sdk/trunk/src/sources.list	2004-10-25 17:08:47 UTC (rev 3)
+++ player-sdk/trunk/src/sources.list	2004-11-07 14:06:09 UTC (rev 4)
@@ -1,18 +1,24 @@
 CSSOURCES=
 CSSOURCES += ./Playlist/Playlist.cs
 CSSOURCES += ./Playlist/IPlaylist.cs
-CSSOURCES += ./Services/ServiceUnavailableException.cs
-CSSOURCES += ./Services/SdkServices.cs
 CSSOURCES += ./Data/AlbumMetadata.cs
 CSSOURCES += ./Data/ICoverDb.cs
 CSSOURCES += ./Data/Cover.cs
-CSSOURCES += ./Data/IMusicDb.cs
 CSSOURCES += ./Data/Album.cs
 CSSOURCES += ./Data/IAlbumComparer.cs
 CSSOURCES += ./Data/ISearchable.cs
 CSSOURCES += ./Data/Song.cs
 CSSOURCES += ./Data/SongMetadata.cs
 CSSOURCES += ./Data/ISongComparer.cs
+CSSOURCES += ./Data/IDataKit.cs
+CSSOURCES += ./Configuration/FileStore.cs
 CSSOURCES += ./Configuration/Configuration.cs
-CSSOURCES += ./Configuration/FileStore.cs
-CSSOURCES += ./Player/IPlayer.cs
+CSSOURCES += ./Player/IPlayerKit.cs
+CSSOURCES += ./Kits/IKit.cs
+CSSOURCES += ./Kits/KitManager.cs
+CSSOURCES += ./Addins/AddinLoader.cs
+CSSOURCES += ./Addins/IAddin.cs
+CSSOURCES += ./Addins/AddinUnavailableException.cs
+CSSOURCES += ./Addins/AddinLoadingException.cs
+CSSOURCES += ./Plugins/IPlugin.cs
+CSSOURCES += ./Plugins/PluginManager.cs



From rubiojr at sheep.berlios.de  Tue Nov  9 00:40:59 2004
From: rubiojr at sheep.berlios.de (Sergio Rubio at BerliOS)
Date: Tue, 9 Nov 2004 00:40:59 +0100
Subject: [Player-sdk-checkins] r5 - in player-sdk/trunk: . PlayerKits/Gstreamer examples src/Playlist
Message-ID: <200411082340.iA8NexLu031369@sheep.berlios.de>

Author: rubiojr
Date: 2004-11-09 00:40:56 +0100 (Tue, 09 Nov 2004)
New Revision: 5

Added:
   player-sdk/trunk/examples/PlayerTest.cs
   player-sdk/trunk/examples/test.ogg
Modified:
   player-sdk/trunk/ChangeLog
   player-sdk/trunk/PlayerKits/Gstreamer/GstPlayer.cs
   player-sdk/trunk/examples/Makefile.am
   player-sdk/trunk/src/Playlist/Playlist.cs
Log:
	* PlayerKits/Gstreamer/GstPlayer.cs: Added null or wrong file check
    call g_type_init ()

    * examples/Makefile.am: added new PlayerTest example
    * examples/PlayerTest.cs:

    * src/Playlist/Playlist.cs: Added check for file



Modified: player-sdk/trunk/ChangeLog
===================================================================
--- player-sdk/trunk/ChangeLog	2004-11-07 14:06:09 UTC (rev 4)
+++ player-sdk/trunk/ChangeLog	2004-11-08 23:40:56 UTC (rev 5)
@@ -1,3 +1,13 @@
+2004-11-09  Sergio Rubio  <sergio.rubio at hispalinux.es>
+
+	* PlayerKits/Gstreamer/GstPlayer.cs: Added null or wrong file check
+	call g_type_init ()
+	
+	* examples/Makefile.am: added new PlayerTest example
+	* examples/PlayerTest.cs:
+	
+	* src/Playlist/Playlist.cs: Added check for file
+
 2004-11-07  Sergio Rubio  <sergio.rubio at hispalinux.es>
 
 	* DataKits/Sqlite/SqliteDataKit.cs:

Modified: player-sdk/trunk/PlayerKits/Gstreamer/GstPlayer.cs
===================================================================
--- player-sdk/trunk/PlayerKits/Gstreamer/GstPlayer.cs	2004-11-07 14:06:09 UTC (rev 4)
+++ player-sdk/trunk/PlayerKits/Gstreamer/GstPlayer.cs	2004-11-08 23:40:56 UTC (rev 5)
@@ -20,6 +20,7 @@
 
 
 using System;
+using System.IO;
 using System.Runtime.InteropServices;
 using GLib;
 using Player.Player;
@@ -31,7 +32,33 @@
 
     private bool stopped = true;
     private IPlaylist playlist;
+    
+	/*
+     * Main constructor
+     */
+    public GstPlayer (IPlaylist playlist) : base (IntPtr.Zero)
+    {
+		g_type_init ();
+	    this.playlist = playlist;
+	    IntPtr error_ptr;
+	    
+	    Raw = player_new (out error_ptr);
+	    if (error_ptr != IntPtr.Zero) {
+		    string error = GLib.Marshaller.PtrToStringGFree (error_ptr);
 
+		    throw new Exception (error);
+	    }
+	    
+	    ConnectInt.g_signal_connect_data (Raw, "tick", new IntSignalDelegate (TickCallback),
+					      IntPtr.Zero, IntPtr.Zero, 0);
+	    Connect.g_signal_connect_data (Raw, "end_of_stream", new SignalDelegate (EosCallback),
+					   IntPtr.Zero, IntPtr.Zero, 0);
+	    ConnectString.g_signal_connect_data (Raw, "error", new StringSignalDelegate (ErrorCallback),
+						 IntPtr.Zero, IntPtr.Zero, 0);
+
+	    playing = false;
+    }
+
     public event StateEventHandler StateEvent;
     /*
      * Indicates whether the player is playing or paused.
@@ -49,11 +76,9 @@
 		    playing = value;
 
 		    if (playing)
-		    {
-			Play ();
-		    }
+				Play ();
 		    else
-			Pause ();
+				Pause ();
 
 		    if (StateEvent != null)
 			    StateEvent (playing);
@@ -137,6 +162,11 @@
 	    IntPtr error_ptr;
 
 	    Song song = playlist.Current;
+		if (song == null || !File.Exists(song.Filename))
+		{
+			Console.WriteLine ("WARNING: Playlist empty or invalid.");
+			return;
+		}
 	    player_set_file (Raw, song.Filename , out error_ptr);
 	    if (error_ptr != IntPtr.Zero) {
 		    string error = GLib.Marshaller.PtrToStringGFree (error_ptr);
@@ -148,8 +178,11 @@
 	    if (TickEvent != null)
 		    TickEvent (0);
 
-	    if (playing)
-		    player_play (Raw);
+	    if (!playing)
+			playing = true;
+		Console.WriteLine ("Playing " + song.Filename);
+		player_play (Raw);
+		
     }
 
     public void Pause ()
@@ -196,31 +229,6 @@
     {
     }
 
-    /*
-     * Main constructor
-     */
-    public GstPlayer (IPlaylist playlist) : base (IntPtr.Zero)
-    {
-	    this.playlist = playlist;
-	    IntPtr error_ptr;
-	    
-	    Raw = player_new (out error_ptr);
-	    if (error_ptr != IntPtr.Zero) {
-		    string error = GLib.Marshaller.PtrToStringGFree (error_ptr);
-
-		    throw new Exception (error);
-	    }
-	    
-	    ConnectInt.g_signal_connect_data (Raw, "tick", new IntSignalDelegate (TickCallback),
-					      IntPtr.Zero, IntPtr.Zero, 0);
-	    Connect.g_signal_connect_data (Raw, "end_of_stream", new SignalDelegate (EosCallback),
-					   IntPtr.Zero, IntPtr.Zero, 0);
-	    ConnectString.g_signal_connect_data (Raw, "error", new StringSignalDelegate (ErrorCallback),
-						 IntPtr.Zero, IntPtr.Zero, 0);
-
-	    playing = false;
-    }
-
     ~GstPlayer ()
     {
 	    Dispose ();
@@ -252,6 +260,9 @@
     /***********************************************************/	
     /********************** Native calls ***********************/
     /***********************************************************/	
+	[DllImport("libgobject-2.0.so")]
+	private static extern void g_type_init ();
+	
     private class Connect
     {
 	    [DllImport ("libgobject-2.0-0.dll")]

Modified: player-sdk/trunk/examples/Makefile.am
===================================================================
--- player-sdk/trunk/examples/Makefile.am	2004-11-07 14:06:09 UTC (rev 4)
+++ player-sdk/trunk/examples/Makefile.am	2004-11-08 23:40:56 UTC (rev 5)
@@ -2,11 +2,14 @@
 	-pkg:gtk-sharp				\
 	-r:../src/Player.Sdk.dll
 
-all: db-test.exe kitmanager-test.exe
+all: db-test.exe kitmanager-test.exe player-test.exe
 
 db-test.exe: DbTest.cs
 	mcs DbTest.cs -o $@ $(REFERENCES)
 
+player-test.exe: PlayerTest.cs
+	mcs PlayerTest.cs -o $@ $(REFERENCES)
+	
 kitmanager-test.exe: KitManagerTest.cs
 	mcs KitManagerTest.cs -o $@ $(REFERENCES)
 	

Added: player-sdk/trunk/examples/PlayerTest.cs
===================================================================
--- player-sdk/trunk/examples/PlayerTest.cs	2004-11-07 14:06:09 UTC (rev 4)
+++ player-sdk/trunk/examples/PlayerTest.cs	2004-11-08 23:40:56 UTC (rev 5)
@@ -0,0 +1,46 @@
+/*
+ * Copyright (C) 2004 Sergio Rubio <sergio.rubio at hispalinux.es>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this program; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */
+
+using System;    
+using Player.Player;
+using Player.Playlist;
+using Player.Data;
+using Player.Kits;
+using Gtk;
+
+public class PlayerTest
+{
+	public static void Main ()
+	{
+		Application.Init ();
+		Playlist p = new Playlist ();
+		p.Add (new Song ("test.ogg"));
+		IPlayerKit kit = (IPlayerKit) KitManager.GetInstance ()["PlayerKit"];
+		kit.EOSEvent += EndOfStream;
+		kit.Volume = 50;
+		kit.Playlist = p;
+		kit.Play ();
+		Application.Run ();
+	}
+	public static void EndOfStream ()
+	{
+		Application.Quit ();
+	}
+}
+

Added: player-sdk/trunk/examples/test.ogg
===================================================================
(Binary files differ)


Property changes on: player-sdk/trunk/examples/test.ogg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Modified: player-sdk/trunk/src/Playlist/Playlist.cs
===================================================================
--- player-sdk/trunk/src/Playlist/Playlist.cs	2004-11-07 14:06:09 UTC (rev 4)
+++ player-sdk/trunk/src/Playlist/Playlist.cs	2004-11-08 23:40:56 UTC (rev 5)
@@ -22,6 +22,7 @@
 
     using System.Collections;
     using System;
+	using System.IO;
     using Player.Data;
 
     /* 
@@ -140,20 +141,20 @@
 
 	public Song Current {
 	    get {
-		if (list.Count == 0)
-		    return null;
-		return list[currentSong] as Song;
+			if (list.Count == 0)
+				return null;
+			return list[currentSong] as Song;
 	    }
 	    set {
-		int index = IndexOf (value);
-		if (index != -1)
-		{
-		    currentSong = index;
-		    if (SongChangedEvent != null)
-			SongChangedEvent (this, value);
-		}
-		else
-		    Console.WriteLine ("WARNING: Invalid current item in playlist");
+			int index = IndexOf (value);
+			if (index != -1)
+			{
+				currentSong = index;
+				if (SongChangedEvent != null)
+				SongChangedEvent (this, value);
+			}
+			else
+				Console.WriteLine ("WARNING: Invalid current item in playlist");
 	    }
 	}
 
@@ -185,7 +186,9 @@
 	private void CheckSong (object obj)
 	{
 	    if (!(obj is Song))
-		throw new ArgumentException ("You should only append Songs to the playlist");
+			throw new ArgumentException ("You should only append Songs to the playlist");
+		if (!File.Exists (((Song)obj).Filename))
+			throw new ArgumentException ("ERROR: Song does not exists");
 	}
 
 	public object this[int index] {



From rubiojr at sheep.berlios.de  Tue Nov  9 00:43:20 2004
From: rubiojr at sheep.berlios.de (Sergio Rubio at BerliOS)
Date: Tue, 9 Nov 2004 00:43:20 +0100
Subject: [Player-sdk-checkins] r6 - in player-sdk/trunk: . examples
Message-ID: <200411082343.iA8NhK8k001514@sheep.berlios.de>

Author: rubiojr
Date: 2004-11-09 00:43:14 +0100 (Tue, 09 Nov 2004)
New Revision: 6

Modified:
   player-sdk/trunk/ChangeLog
   player-sdk/trunk/examples/Makefile.am
Log:
* examples/Makefile.am: Added EXTRA_DIST and CLEANFILES



Modified: player-sdk/trunk/ChangeLog
===================================================================
--- player-sdk/trunk/ChangeLog	2004-11-08 23:40:56 UTC (rev 5)
+++ player-sdk/trunk/ChangeLog	2004-11-08 23:43:14 UTC (rev 6)
@@ -1,5 +1,9 @@
 2004-11-09  Sergio Rubio  <sergio.rubio at hispalinux.es>
 
+	* examples/Makefile.am: Added EXTRA_DIST and CLEANFILES
+
+2004-11-09  Sergio Rubio  <sergio.rubio at hispalinux.es>
+
 	* PlayerKits/Gstreamer/GstPlayer.cs: Added null or wrong file check
 	call g_type_init ()
 	

Modified: player-sdk/trunk/examples/Makefile.am
===================================================================
--- player-sdk/trunk/examples/Makefile.am	2004-11-08 23:40:56 UTC (rev 5)
+++ player-sdk/trunk/examples/Makefile.am	2004-11-08 23:43:14 UTC (rev 6)
@@ -13,3 +13,5 @@
 kitmanager-test.exe: KitManagerTest.cs
 	mcs KitManagerTest.cs -o $@ $(REFERENCES)
 	
+EXTRA_DIST= *.cs test.ogg
+CLEANFILES= *.exe



From rubiojr at sheep.berlios.de  Tue Nov  9 00:50:19 2004
From: rubiojr at sheep.berlios.de (Sergio Rubio at BerliOS)
Date: Tue, 9 Nov 2004 00:50:19 +0100
Subject: [Player-sdk-checkins] r7 - player-sdk/trunk
Message-ID: <200411082350.iA8NoJNk015476@sheep.berlios.de>

Author: rubiojr
Date: 2004-11-09 00:50:06 +0100 (Tue, 09 Nov 2004)
New Revision: 7

Modified:
   player-sdk/trunk/ChangeLog
   player-sdk/trunk/TODO
Log:
Updated 



Modified: player-sdk/trunk/ChangeLog
===================================================================
--- player-sdk/trunk/ChangeLog	2004-11-08 23:43:14 UTC (rev 6)
+++ player-sdk/trunk/ChangeLog	2004-11-08 23:50:06 UTC (rev 7)
@@ -1,5 +1,9 @@
 2004-11-09  Sergio Rubio  <sergio.rubio at hispalinux.es>
 
+	* TODO: Updated
+
+2004-11-09  Sergio Rubio  <sergio.rubio at hispalinux.es>
+
 	* examples/Makefile.am: Added EXTRA_DIST and CLEANFILES
 
 2004-11-09  Sergio Rubio  <sergio.rubio at hispalinux.es>

Modified: player-sdk/trunk/TODO
===================================================================
--- player-sdk/trunk/TODO	2004-11-08 23:43:14 UTC (rev 6)
+++ player-sdk/trunk/TODO	2004-11-08 23:50:06 UTC (rev 7)
@@ -1,14 +1,16 @@
-Plugin Architecture
+General
+---------
+* Use log4net
+* Include the Nini framework and remove chicken dep
+
+Plugins
 --------------------
-* Add support for a plugin arch. Plugins should be able to be
-loaded and unloaded from user dir or system wide.
-* Plugins have access to the sdk services.
-* Some example plugins:
+* Finish implementation and add some test 
+* Implement some plugins
 	- Exporting playlist as a webservice.
 	- DBus support
 	- Playlist export
 
-
 DataKits
 ---------
 * SqliteDataKit is not finished yet.



From rubiojr at sheep.berlios.de  Tue Nov  9 13:23:22 2004
From: rubiojr at sheep.berlios.de (Sergio Rubio at BerliOS)
Date: Tue, 9 Nov 2004 13:23:22 +0100
Subject: [Player-sdk-checkins] r8 - in player-sdk/trunk: . src src/Nini src/Nini/Config src/Nini/Ini src/Nini/Util
Message-ID: <200411091223.iA9CNMNt019755@sheep.berlios.de>

Author: rubiojr
Date: 2004-11-09 13:23:21 +0100 (Tue, 09 Nov 2004)
New Revision: 8

Added:
   player-sdk/trunk/src/Nini/
   player-sdk/trunk/src/Nini/AssemblyInfo.cs
   player-sdk/trunk/src/Nini/Config/
   player-sdk/trunk/src/Nini/Config/AliasText.cs
   player-sdk/trunk/src/Nini/Config/ArgvConfigSource.cs
   player-sdk/trunk/src/Nini/Config/ConfigBase.cs
   player-sdk/trunk/src/Nini/Config/ConfigCollection.cs
   player-sdk/trunk/src/Nini/Config/ConfigSourceBase.cs
   player-sdk/trunk/src/Nini/Config/DotNetConfigSource.cs
   player-sdk/trunk/src/Nini/Config/IConfig.cs
   player-sdk/trunk/src/Nini/Config/IConfigSource.cs
   player-sdk/trunk/src/Nini/Config/IniConfigSource.cs
   player-sdk/trunk/src/Nini/Config/RegistryConfigSource.cs
   player-sdk/trunk/src/Nini/Config/XmlConfigSource.cs
   player-sdk/trunk/src/Nini/Ini/
   player-sdk/trunk/src/Nini/Ini/IniDocument.cs
   player-sdk/trunk/src/Nini/Ini/IniException.cs
   player-sdk/trunk/src/Nini/Ini/IniItem.cs
   player-sdk/trunk/src/Nini/Ini/IniReader.cs
   player-sdk/trunk/src/Nini/Ini/IniSection.cs
   player-sdk/trunk/src/Nini/Ini/IniSectionCollection.cs
   player-sdk/trunk/src/Nini/Ini/IniWriter.cs
   player-sdk/trunk/src/Nini/README
   player-sdk/trunk/src/Nini/Util/
   player-sdk/trunk/src/Nini/Util/ArgvParser.cs
   player-sdk/trunk/src/Nini/Util/IOrderedDictionary.cs
   player-sdk/trunk/src/Nini/Util/OrderedList.cs
   player-sdk/trunk/src/Nini/Util/OrderedListEnumerator.cs
Modified:
   player-sdk/trunk/ChangeLog
   player-sdk/trunk/TODO
   player-sdk/trunk/src/Makefile.am
   player-sdk/trunk/src/sources.list
Log:
    * TODO: Updated

    * src/Makefile.am: Removed chicken dep.

    * src/Nini/*: Added Nini framework and removed Chicken dependencie.

    * src/sources.list: regenerated



Modified: player-sdk/trunk/ChangeLog
===================================================================
--- player-sdk/trunk/ChangeLog	2004-11-08 23:50:06 UTC (rev 7)
+++ player-sdk/trunk/ChangeLog	2004-11-09 12:23:21 UTC (rev 8)
@@ -1,9 +1,19 @@
 2004-11-09  Sergio Rubio  <sergio.rubio at hispalinux.es>
 
 	* TODO: Updated
+	
+	* src/Makefile.am: Removed chicken dep.
+	
+	* src/Nini/*: Added Nini framework and removed Chicken dependencie.
+	
+	* src/sources.list: regenerated
 
 2004-11-09  Sergio Rubio  <sergio.rubio at hispalinux.es>
 
+	* TODO: Updated
+
+2004-11-09  Sergio Rubio  <sergio.rubio at hispalinux.es>
+
 	* examples/Makefile.am: Added EXTRA_DIST and CLEANFILES
 
 2004-11-09  Sergio Rubio  <sergio.rubio at hispalinux.es>

Modified: player-sdk/trunk/TODO
===================================================================
--- player-sdk/trunk/TODO	2004-11-08 23:50:06 UTC (rev 7)
+++ player-sdk/trunk/TODO	2004-11-09 12:23:21 UTC (rev 8)
@@ -1,7 +1,6 @@
 General
 ---------
 * Use log4net
-* Include the Nini framework and remove chicken dep
 
 Plugins
 --------------------

Modified: player-sdk/trunk/src/Makefile.am
===================================================================
--- player-sdk/trunk/src/Makefile.am	2004-11-08 23:50:06 UTC (rev 7)
+++ player-sdk/trunk/src/Makefile.am	2004-11-09 12:23:21 UTC (rev 8)
@@ -1,7 +1,7 @@
 include sources.list
 
 MISCRS = /resource:../PlayerSdk.ini,PlayerSdk.ini
-REFERENCES = -pkg:chicken
+#REFERENCES = -pkg:chicken
 
 Player.Sdk.dll: $(CSSOURCES)
 	mcs /out:$@ $(CSSOURCES) /target:library $(MISCRS) $(REFERENCES)

Added: player-sdk/trunk/src/Nini/AssemblyInfo.cs
===================================================================
--- player-sdk/trunk/src/Nini/AssemblyInfo.cs	2004-11-08 23:50:06 UTC (rev 7)
+++ player-sdk/trunk/src/Nini/AssemblyInfo.cs	2004-11-09 12:23:21 UTC (rev 8)
@@ -0,0 +1,50 @@
+#region Copyright
+//
+// Nini Configuration Project.
+// Copyright (C) 2004 Brent R. Matzelle.  All rights reserved.
+//
+// This software is published under the terms of the MIT X11 license, a copy of 
+// which has been included with this distribution in the LICENSE.txt file.
+// 
+#endregion
+
+using System.Reflection;
+using System.Runtime.CompilerServices;
+
+#if (NET_1_0)
+[assembly: AssemblyTitle("Nini for .NET Framework 1.0")]
+#elif (NET_1_1)
+[assembly: AssemblyTitle("Nini for .NET Framework 1.1")]
+#elif (MONO_1_0)
+[assembly: AssemblyTitle("Nini for Mono 1.0")]
+#else
+[assembly: AssemblyTitle("Nini")]
+#endif
+
+[assembly: AssemblyDescription("Configuration Library - http://nini.sourceforge.net/")]
+[assembly: AssemblyConfiguration("")]
+[assembly: AssemblyCompany("Brent R. Matzelle")]
+[assembly: AssemblyProduct("Nini")]
+[assembly: AssemblyCopyright("Copyright (c) 2004 Brent R. Matzelle. All Rights Reserved.")]
+[assembly: AssemblyTrademark("Copyright (c) 2004 Brent R. Matzelle. All Rights Reserved.")]
+[assembly: AssemblyDefaultAlias("Nini")]
+[assembly: AssemblyCulture("")]
+
+#if STRONG
+[assembly: AssemblyDelaySign(false)]
+[assembly: AssemblyKeyFile(@"..\..\Nini.snk")]
+#endif
+
+//
+// Version information for an assembly consists of the following four values:
+//
+//      Major Version
+//      Minor Version 
+//      Build Number
+//      Revision
+//
+// You can specify all the values or you can default the Revision and Build Numbers 
+// by using the '*' as shown below:
+
+[assembly: System.Reflection.AssemblyVersion("0.8.0.0")]
+

Added: player-sdk/trunk/src/Nini/Config/AliasText.cs
===================================================================
--- player-sdk/trunk/src/Nini/Config/AliasText.cs	2004-11-08 23:50:06 UTC (rev 7)
+++ player-sdk/trunk/src/Nini/Config/AliasText.cs	2004-11-09 12:23:21 UTC (rev 8)
@@ -0,0 +1,127 @@
+#region Copyright
+//
+// Nini Configuration Project.
+// Copyright (C) 2004 Brent R. Matzelle.  All rights reserved.
+//
+// This software is published under the terms of the MIT X11 license, a copy of 
+// which has been included with this distribution in the LICENSE.txt file.
+// 
+#endregion
+
+using System;
+using System.Collections;
+
+namespace Nini.Config
+{
+	/// <include file='AliasText.xml' path='//Class[@name="AliasText"]/docs/*' />
+	public class AliasText
+	{
+		#region Private variables
+		Hashtable intAlias = new Hashtable ();
+		Hashtable booleanAlias = new Hashtable ();
+		#endregion
+
+		#region Constructors
+		/// <include file='AliasText.xml' path='//Constructor[@name="AliasText"]/docs/*' />
+		public AliasText ()
+		{
+		}
+		#endregion
+		
+		#region Public methods
+		/// <include file='AliasText.xml' path='//Method[@name="AddAliasInt"]/docs/*' />
+		public void AddAlias (string key, string alias, int value)
+		{
+			string lowerAlias = alias.ToLower ();
+
+			if (intAlias.Contains (key)) {
+				Hashtable keys = (Hashtable)intAlias[key];
+				if (keys.Contains (lowerAlias))
+					throw new Exception ("Alias text already exists");
+				
+				keys[lowerAlias] = value;
+			} else {
+				Hashtable keys = new Hashtable ();
+				keys[lowerAlias] = value;
+				intAlias.Add (key, keys);
+			}
+		}
+		
+		/// <include file='AliasText.xml' path='//Method[@name="AddAliasBoolean"]/docs/*' />
+		public void AddAlias (string alias, bool value)
+		{
+			booleanAlias.Add (alias.ToLower (), value);
+		}
+		
+		/// <include file='AliasText.xml' path='//Method[@name="AddAliasEnum"]/docs/*' />
+		public void AddAlias (string key, Enum enumAlias)
+		{
+			SetAliasTypes (key, enumAlias);
+		}
+		
+		/// <include file='AliasText.xml' path='//Method[@name="ContainsBoolean"]/docs/*' />
+		public bool ContainsBoolean (string key)
+		{
+			return booleanAlias.Contains (key.ToLower ());
+		}
+		
+		/// <include file='AliasText.xml' path='//Method[@name="ContainsInt"]/docs/*' />
+		public bool ContainsInt (string key, string alias)
+		{
+			bool result = false;
+
+			if (intAlias.Contains (key)) {
+				Hashtable keys = (Hashtable)intAlias[key];
+				result = (keys.Contains (alias.ToLower ()));
+			}
+			
+			return result;
+		}
+		
+		/// <include file='AliasText.xml' path='//Method[@name="GetBoolean"]/docs/*' />
+		public bool GetBoolean (string key)
+		{
+			string lowerAlias = key.ToLower ();
+			if (!booleanAlias.Contains (lowerAlias)) {
+				throw new Exception ("Alias does not exist for text");
+			}
+			
+			return (bool)booleanAlias[lowerAlias];
+		}
+		
+		/// <include file='AliasText.xml' path='//Method[@name="GetInt"]/docs/*' />
+		public int GetInt (string key, string alias)
+		{
+			if (!intAlias.Contains (key)) {
+				throw new Exception ("Alias does not exist for key");
+			}
+
+			string lowerAlias = alias.ToLower ();			
+			Hashtable keys = (Hashtable)intAlias[key];
+
+			if (!keys.Contains (lowerAlias)) {
+				throw new Exception ("Config value does not match a " +
+									 "supplied alias");
+			}
+			
+			return (int)keys[lowerAlias];
+		}
+		#endregion
+		
+		#region Private methods
+		/// <summary>
+		/// Extracts and sets the alias types from an enumeration.
+		/// </summary>
+		private void SetAliasTypes (string key, Enum enumAlias)
+		{
+			string[] names = Enum.GetNames (enumAlias.GetType ());
+			int[] values = (int[])Enum.GetValues (enumAlias.GetType ());
+			
+			for (int i = 0; i < names.Length; i++)
+			{
+				AddAlias (key, names[i], values[i]);
+			}
+		}
+		#endregion
+	}
+}
\ No newline at end of file

Added: player-sdk/trunk/src/Nini/Config/ArgvConfigSource.cs
===================================================================
--- player-sdk/trunk/src/Nini/Config/ArgvConfigSource.cs	2004-11-08 23:50:06 UTC (rev 7)
+++ player-sdk/trunk/src/Nini/Config/ArgvConfigSource.cs	2004-11-09 12:23:21 UTC (rev 8)
@@ -0,0 +1,95 @@
+#region Copyright
+//
+// Nini Configuration Project.
+// Copyright (C) 2004 Brent R. Matzelle.  All rights reserved.
+//
+// This software is published under the terms of the MIT X11 license, a copy of 
+// which has been included with this distribution in the LICENSE.txt file.
+// 
+#endregion
+
+using System;
+using System.IO;
+using System.Text;
+using System.Collections;
+using Nini.Util;
+
+namespace Nini.Config
+{
+	/// <include file='ArgvConfigSource.xml' path='//Class[@name="ArgvConfigSource"]/docs/*' />
+	public class ArgvConfigSource : ConfigSourceBase, IConfigSource
+	{
+		#region Private variables
+		ArgvParser parser = null;
+		string[] arguments = null;
+		#endregion
+
+		#region Constructors
+		/// <include file='ArgvConfigSource.xml' path='//Constructor[@name="Constructor"]/docs/*' />
+		public ArgvConfigSource (string[] arguments)
+		{
+			parser = new ArgvParser (arguments);
+			this.arguments = arguments;
+		}
+		#endregion
+		
+		#region Public properties
+		/// <include file='ArgvConfigSource.xml' path='//Property[@name="Arguments"]/docs/*' />
+		public string[] Arguments
+		{
+			get { return this.arguments; }
+		}
+		#endregion
+		
+		#region Public methods
+		/// <include file='ArgvConfigSource.xml' path='//Method[@name="Save"]/docs/*' />
+		public void Save ()
+		{
+			throw new Exception ("Source is read only");
+		}
+		
+		/// <include file='ArgvConfigSource.xml' path='//Method[@name="AddSwitch"]/docs/*' />
+		public void AddSwitch (string configName, string longName)
+		{
+			AddSwitch (configName, longName, null);
+		}
+		
+		/// <include file='ArgvConfigSource.xml' path='//Method[@name="AddSwitchShort"]/docs/*' />
+		public void AddSwitch (string configName, string longName, 
+								string shortName)
+		{
+			IConfig config = GetConfig (configName);
+			
+			if (shortName.Length < 1 || shortName.Length > 2) {
+				throw new Exception ("Short name may only be 1 or 2 characters");
+			}
+
+			// Look for the long name first
+			if (parser[longName] != null) {
+				config.Set (longName, parser[longName]);
+			} else if (shortName != null && parser[shortName] != null) {
+				config.Set (longName, parser[shortName]);
+			}
+		}
+		#endregion
+
+		#region Private methods
+		/// <summary>
+		/// Returns an IConfig.  If it does not exist then it is added.
+		/// </summary>
+		private IConfig GetConfig (string name)
+		{
+			IConfig result = null;
+			
+			if (this.Configs[name] == null) {
+				result = new ConfigBase (name, this);
+				this.Configs.Add (result);
+			} else {
+				result = this.Configs[name];
+			}
+			
+			return result;
+		}
+		#endregion
+	}
+}
\ No newline at end of file

Added: player-sdk/trunk/src/Nini/Config/ConfigBase.cs
===================================================================
--- player-sdk/trunk/src/Nini/Config/ConfigBase.cs	2004-11-08 23:50:06 UTC (rev 7)
+++ player-sdk/trunk/src/Nini/Config/ConfigBase.cs	2004-11-09 12:23:21 UTC (rev 8)
@@ -0,0 +1,307 @@
+#region Copyright
+//
+// Nini Configuration Project.
+// Copyright (C) 2004 Brent R. Matzelle.  All rights reserved.
+//
+// This software is published under the terms of the MIT X11 license, a copy of 
+// which has been included with this distribution in the LICENSE.txt file.
+// 
+#endregion
+
+using System;
+using System.Collections;
+using Nini.Util;
+
+namespace Nini.Config
+{
+	/// <include file='IConfig.xml' path='//Interface[@name="IConfig"]/docs/*' />
+	public class ConfigBase : IConfig
+	{
+		#region Private variables
+		string configName = null;
+		OrderedList keys = new OrderedList ();
+		IConfigSource configSource = null;
+		AliasText aliasText = null;
+		#endregion
+		
+		#region Constructors
+		/// <include file='ConfigBase.xml' path='//Constructor[@name="ConfigBase"]/docs/*' />
+		public ConfigBase (string name, IConfigSource source)
+		{
+			configName = name;
+			configSource = source;
+			aliasText = new AliasText ();
+		}
+		#endregion
+
+		#region Public properties
+		/// <include file='IConfig.xml' path='//Property[@name="Name"]/docs/*' />
+		public string Name
+		{
+			get { return configName; }
+		}
+		
+		/// <include file='IConfig.xml' path='//Property[@name="ConfigSource"]/docs/*' />
+		public IConfigSource ConfigSource
+		{
+			get { return configSource; }
+		}
+		
+		/// <include file='IConfig.xml' path='//Property[@name="Alias"]/docs/*' />
+		public AliasText Alias
+		{
+			get { return aliasText; }
+		}
+		#endregion
+
+		#region Public methods
+		/// <include file='IConfig.xml' path='//Method[@name="Get"]/docs/*' />
+		public string Get (string key)
+		{
+			return GetValue (key);
+		}
+		
+		/// <include file='IConfig.xml' path='//Method[@name="GetDefault"]/docs/*' />
+		public string Get (string key, string defaultValue)
+		{
+			string result = Get (key);
+			
+			return (result == null) ? defaultValue : result;
+		}
+		
+		/// <include file='IConfig.xml' path='//Method[@name="Get"]/docs/*' />
+		public string GetString (string key)
+		{
+			return Get (key);
+		}
+		
+		/// <include file='IConfig.xml' path='//Method[@name="GetDefault"]/docs/*' />
+		public string GetString (string key, string defaultValue)
+		{
+			return Get (key, defaultValue);
+		}
+		
+		/// <include file='IConfig.xml' path='//Method[@name="GetInt"]/docs/*' />
+		public int GetInt (string key)
+		{
+			string text = GetValue (key);
+			
+			if (text == null) {
+				throw new Exception ("Integer value not found");
+			}
+
+			return Convert.ToInt32 (text);
+		}
+		
+		/// <include file='IConfig.xml' path='//Method[@name="GetIntAlias"]/docs/*' />
+		public int GetInt (string key, bool fromAlias)
+		{
+			if (!fromAlias) {
+				return GetInt (key);
+			}
+
+			string result = Get (key);
+			
+			if (result == null) {
+				throw new Exception ("Integer value not found");
+			}
+
+			return GetIntAlias (key, result);
+		}
+		
+		/// <include file='IConfig.xml' path='//Method[@name="GetIntDefault"]/docs/*' />
+		public int GetInt (string key, int defaultValue)
+		{
+			string result = GetValue (key);
+			
+			return (result == null) ? defaultValue : Convert.ToInt32 (result);
+		}
+		
+		/// <include file='IConfig.xml' path='//Method[@name="GetIntDefaultAlias"]/docs/*' />
+		public int GetInt (string key, int defaultValue, bool fromAlias)
+		{
+			if (!fromAlias) {
+				return GetInt (key, defaultValue);
+			}
+
+			string result = GetValue (key);
+			
+			return (result == null) ? defaultValue : GetIntAlias (key, result);
+		}
+		
+		/// <include file='IConfig.xml' path='//Method[@name="GetLong"]/docs/*' />
+		public long GetLong (string key)
+		{
+			string text = GetValue (key);
+			
+			if (text == null) {
+				throw new Exception ("Long value not found");
+			}
+			
+			return Convert.ToInt64 (text);
+		}
+		
+		/// <include file='IConfig.xml' path='//Method[@name="GetLongDefault"]/docs/*' />
+		public long GetLong (string key, long defaultValue)
+		{
+			string result = GetValue (key);
+			
+			return (result == null) ? defaultValue : Convert.ToInt64 (result);
+		}
+		
+		/// <include file='IConfig.xml' path='//Method[@name="GetBoolean"]/docs/*' />
+		public bool GetBoolean (string key)
+		{
+			string text = GetValue (key);
+			
+			if (text == null) {
+				throw new Exception ("Boolean value not found");
+			}
+			
+			return GetBooleanAlias (text);
+		}
+		
+		/// <include file='IConfig.xml' path='//Method[@name="GetBooleanDefault"]/docs/*' />
+		public bool GetBoolean (string key, bool defaultValue)
+		{
+			string text = GetValue (key);
+			
+			return (text == null) ? defaultValue : GetBooleanAlias (text);
+		}
+		
+		/// <include file='IConfig.xml' path='//Method[@name="GetFloat"]/docs/*' />
+		public float GetFloat (string key)
+		{
+			string text = GetValue (key);
+			
+			if (text == null) {
+				throw new Exception ("Float value not found");
+			}
+			
+			return Convert.ToSingle (text);
+		}
+		
+		/// <include file='IConfig.xml' path='//Method[@name="GetFloatDefault"]/docs/*' />
+		public float GetFloat (string key, float defaultValue)
+		{
+			string result = GetValue (key);
+			
+			return (result == null) ? defaultValue : Convert.ToSingle (result);
+		}
+
+		/// <include file='IConfig.xml' path='//Method[@name="GetDouble"]/docs/*' />
+		public double GetDouble (string key)
+		{
+			string text = GetValue (key);
+			
+			if (text == null) {
+				throw new Exception ("Double value not found");
+			}
+			
+			return Convert.ToDouble (text);
+		}
+		
+		/// <include file='IConfig.xml' path='//Method[@name="GetDoubleDefault"]/docs/*' />
+		public double GetDouble (string key, double defaultValue)
+		{
+			string result = GetValue (key);
+			
+			return (result == null) ? defaultValue : Convert.ToDouble (result);
+		}
+
+		/// <include file='IConfig.xml' path='//Method[@name="GetKeys"]/docs/*' />
+		public string[] GetKeys ()
+		{
+			string[] result = new string[keys.Keys.Count];
+			
+			keys.Keys.CopyTo (result, 0);
+			
+			return result;
+		}
+		
+		/// <include file='ConfigBase.xml' path='//Method[@name="Add"]/docs/*' />
+		public void Add (string key, string value)
+		{
+			keys.Add (key, value);
+		}
+		
+		/// <include file='IConfig.xml' path='//Method[@name="Set"]/docs/*' />
+		public void Set (string key, object value)
+		{
+			if (value == null) {
+				throw new ArgumentNullException ("Value may not be null");
+			}
+
+			if (!keys.Contains (key)) {
+				keys.Add (key, value);
+			} else {
+				keys[key] = value.ToString ();
+			}
+
+			if (ConfigSource.AutoSave) {
+				ConfigSource.Save ();
+			}
+		}
+		
+		/// <include file='IConfig.xml' path='//Method[@name="Remove"]/docs/*' />
+		public void Remove (string key)
+		{
+			if (key == null) {
+				throw new ArgumentNullException ("Key may not be null");
+			}
+			
+			keys.Remove (key);
+		}
+		#endregion
+		
+		#region Private methods
+		/// <summary>
+		/// Returns the value if the given key.
+		/// </summary>
+		private string GetValue (string key)
+		{
+			string result = null;
+			
+			if (keys.Contains (key)) {
+				result = (string)keys[key];
+			}
+
+			return result;
+		}
+		
+		/// <summary>
+		/// Returns the integer alias first from this IConfig then 
+		/// the parent if there is none.
+		/// </summary>
+		private int GetIntAlias (string key, string alias)
+		{
+			int result = -1;
+			
+			if (aliasText.ContainsInt (key, alias)) {
+				result = aliasText.GetInt (key, alias);
+			} else {
+				result = ConfigSource.GlobalAlias.GetInt (key, alias);
+			}			
+			
+			return result;
+		}
+		
+		/// <summary>
+		/// Returns the boolean alias first from this IConfig then 
+		/// the parent if there is none.
+		/// </summary>
+		private bool GetBooleanAlias (string key)
+		{
+			bool result = false;
+			
+			if (aliasText.ContainsBoolean (key)) {
+				result = aliasText.GetBoolean (key);
+			} else {
+				result = ConfigSource.GlobalAlias.GetBoolean (key);
+			}	
+			
+			return result;
+		}
+		#endregion
+	}
+}
\ No newline at end of file

Added: player-sdk/trunk/src/Nini/Config/ConfigCollection.cs
===================================================================
--- player-sdk/trunk/src/Nini/Config/ConfigCollection.cs	2004-11-08 23:50:06 UTC (rev 7)
+++ player-sdk/trunk/src/Nini/Config/ConfigCollection.cs	2004-11-09 12:23:21 UTC (rev 8)
@@ -0,0 +1,112 @@
+#region Copyright
+//
+// Nini Configuration Project.
+// Copyright (C) 2004 Brent R. Matzelle.  All rights reserved.
+//
+// This software is published under the terms of the MIT X11 license, a copy of 
+// which has been included with this distribution in the LICENSE.txt file.
+// 
+#endregion
+
+using System;
+using System.Collections;
+
+namespace Nini.Config
+{
+	/// <include file='ConfigCollection.xml' path='//Class[@name="ConfigCollection"]/docs/*' />
+	public class ConfigCollection : ICollection, IEnumerable
+	{
+		#region Private variables
+		ArrayList configList = new ArrayList ();
+		#endregion
+		
+		#region Public properties
+		/// <include file='ConfigCollection.xml' path='//Property[@name="Count"]/docs/*' />
+		public int Count
+		{
+			get { return configList.Count; }
+		}
+		
+		/// <include file='ConfigCollection.xml' path='//Property[@name="IsSynchronized"]/docs/*' />
+		public bool IsSynchronized
+		{
+			get { return false; }
+		}
+		
+		/// <include file='ConfigCollection.xml' path='//Property[@name="SyncRoot"]/docs/*' />
+		public object SyncRoot
+		{
+			get { return this; }
+		}
+		
+		/// <include file='ConfigCollection.xml' path='//Property[@name="ItemIndex"]/docs/*' />
+		public IConfig this[int index]
+		{
+			get { return (IConfig)configList[index]; }
+		}
+		
+		/// <include file='ConfigCollection.xml' path='//Property[@name="ItemName"]/docs/*' />
+		public IConfig this[string configName]
+		{
+			get
+			{
+				IConfig result = null;
+
+				foreach (IConfig config in configList)
+				{
+					if (config.Name == configName) {
+						result = config;
+						break;
+					}
+				}
+				
+				return result;
+			}
+		}
+
+		#endregion
+		
+		#region Public methods
+		/// <include file='ConfigCollection.xml' path='//Method[@name="Add"]/docs/*' />
+		public void Add (IConfig config)
+		{
+			if (configList.Contains (config)) {
+				throw new ArgumentException ("IConfig already exists");
+			}
+			IConfig existingConfig = this[config.Name];
+
+			if (existingConfig != null) {
+				// Set all new keys
+				string[] keys = config.GetKeys ();
+				for (int i = 0; i < keys.Length; i++)
+				{
+					existingConfig.Set (keys[i], config.Get (keys[i]));
+				}
+			} else {
+				configList.Add (config);
+			}
+		}
+		
+		/// <include file='ConfigCollection.xml' path='//Method[@name="Remove"]/docs/*' />
+		public void Remove (IConfig config)
+		{
+			configList.Remove (config);
+		}
+		
+		/// <include file='ConfigCollection.xml' path='//Method[@name="GetEnumerator"]/docs/*' />
+		public IEnumerator GetEnumerator ()
+		{
+			return configList.GetEnumerator ();
+		}
+		
+		/// <include file='ConfigCollection.xml' path='//Method[@name="CopyTo"]/docs/*' />
+		public void CopyTo (Array array, int index)
+		{
+			configList.CopyTo (array, index);
+		}
+		#endregion
+		
+		#region Private methods
+		#endregion
+	}
+}
\ No newline at end of file

Added: player-sdk/trunk/src/Nini/Config/ConfigSourceBase.cs
===================================================================
--- player-sdk/trunk/src/Nini/Config/ConfigSourceBase.cs	2004-11-08 23:50:06 UTC (rev 7)
+++ player-sdk/trunk/src/Nini/Config/ConfigSourceBase.cs	2004-11-09 12:23:21 UTC (rev 8)
@@ -0,0 +1,165 @@
+#region Copyright
+//
+// Nini Configuration Project.
+// Copyright (C) 2004 Brent R. Matzelle.  All rights reserved.
+//
+// This software is published under the terms of the MIT X11 license, a copy of 
+// which has been included with this distribution in the LICENSE.txt file.
+// 
+#endregion
+
+using System;
+using System.Text;
+using System.Collections;
+
+namespace Nini.Config
+{
+	/// <include file='IConfigSource.xml' path='//Interface[@name="IConfigSource"]/docs/*' />
+	public abstract class ConfigSourceBase
+	{
+		#region Private variables
+		ArrayList sourceList = new ArrayList ();
+		ConfigCollection configList = new ConfigCollection ();
+		bool autoSave = false;
+		AliasText globalAlias = new AliasText ();
+		#endregion
+
+		#region Constructors
+		#endregion
+		
+		#region Public properties
+		/// <include file='IConfigSource.xml' path='//Property[@name="Configs"]/docs/*' />
+		public ConfigCollection Configs
+		{
+			get { return configList; }
+		}
+		
+		/// <include file='IConfigSource.xml' path='//Property[@name="AutoSave"]/docs/*' />
+		public bool AutoSave
+		{
+			get { return autoSave; }
+			set { autoSave = value; }
+		}
+		
+		/// <include file='IConfigSource.xml' path='//Property[@name="GlobalAlias"]/docs/*' />
+		public AliasText GlobalAlias
+		{
+			get { return globalAlias; }
+		}
+		#endregion
+		
+		#region Public methods
+		/// <include file='IConfigSource.xml' path='//Method[@name="Merge"]/docs/*' />
+		public void Merge (IConfigSource source)
+		{
+			if (!sourceList.Contains (source))  {
+				sourceList.Add (source);
+			}
+			
+			foreach (IConfig config in source.Configs)
+			{
+				this.Configs.Add (config);
+			}
+		}
+		
+		/// <include file='IConfigSource.xml' path='//Method[@name="AddConfig"]/docs/*' />
+		public IConfig AddConfig (string name)
+		{
+			ConfigBase result = null;
+
+			if (configList[name] == null) {
+				result = new ConfigBase (name, (IConfigSource)this);
+				configList.Add (result);
+			} else {
+				throw new Exception ("An IConfig of that name already exists");
+			}
+			
+			return result;
+		}
+		#endregion
+
+		#region Protected methods
+		/// <summary>
+		/// This performs a total lazy replace of all text.
+		/// </summary>
+		protected void ReplaceTextAll ()
+		{
+			string[] keys = null;
+
+			foreach (IConfig config in configList)
+			{
+				keys = config.GetKeys ();
+				for (int i = 0; i < keys.Length; i++)
+				{
+					Replace (config, keys[i]);
+				}
+			}
+		}
+		#endregion
+
+		#region Private methods		
+		/// <summary>
+		/// Recursively replaces text.
+		/// </summary>
+		private void Replace (IConfig config, string key)
+		{
+			string text = config.Get (key);
+			if (text == null) {
+				throw new Exception (String.Format ("[{0}] not found in [{1}]",
+										key, config.Name));
+			}
+			int startIndex = text.IndexOf ("${", 0);
+
+			if (startIndex != -1) {
+				int endIndex = text.IndexOf ("}");
+				if (endIndex != -1) {
+					string search = text.Substring (startIndex + 2, 
+													endIndex - (startIndex + 2));
+
+					string replace = ReplaceValue (config, search);
+
+					// Assemble the result string
+					StringBuilder builder = new StringBuilder ();
+					for (int i = 0; i < startIndex; i++)
+					{
+						builder.Append (text[i]);
+					}
+					builder.Append (replace);
+					for (int i = endIndex + 1; i < text.Length; i++)
+					{
+						builder.Append (text[i]);
+					}
+					
+					config.Set (key, builder.ToString ());
+					Replace (config, key); // recurse
+				}
+			}
+		}
+		
+		/// <summary>
+		/// Returns the replacement value of a config.
+		/// </summary>
+		private string ReplaceValue (IConfig config, string search)
+		{
+			string result = null;
+			
+			string[] replaces = search.Split ('|');
+			
+			if (replaces.Length > 1) {
+				IConfig newConfig = this.Configs[replaces[0]];
+				if (newConfig == null) {
+					throw new Exception ("IConfig not found: " + replaces[0]);
+				}
+				result = newConfig.Get (replaces[1]);
+				if (result == null) {
+					throw new Exception ("Key not found: " + result);
+				}
+			} else {
+				result = config.Get (search);
+			}
+			
+			return result;
+		}
+		#endregion
+	}
+}

Added: player-sdk/trunk/src/Nini/Config/DotNetConfigSource.cs
===================================================================
--- player-sdk/trunk/src/Nini/Config/DotNetConfigSource.cs	2004-11-08 23:50:06 UTC (rev 7)
+++ player-sdk/trunk/src/Nini/Config/DotNetConfigSource.cs	2004-11-09 12:23:21 UTC (rev 8)
@@ -0,0 +1,380 @@
+#region Copyright
+//
+// Nini Configuration Project.
+// Copyright (C) 2004 Brent R. Matzelle.  All rights reserved.
+//
+// This software is published under the terms of the MIT X11 license, a copy of 
+// which has been included with this distribution in the LICENSE.txt file.
+// 
+#endregion
+
+using System;
+using System.IO;
+using System.Xml;
+using System.Reflection;
+using System.Collections;
+using System.Configuration;
+using System.Collections.Specialized;
+
+namespace Nini.Config
+{
+	/// <include file='DotNetConfigSource.xml' path='//Class[@name="DotNetConfigSource"]/docs/*' />
+	public class DotNetConfigSource : ConfigSourceBase, IConfigSource
+	{
+		#region Private variables
+		string[] sections = null;
+		XmlDocument configDoc = new XmlDocument ();
+		string savePath = null;
+		#endregion
+
+		#region Constructors
+		/// <include file='DotNetConfigSource.xml' path='//Constructor[@name="ConstructorWeb"]/docs/*' />
+		public DotNetConfigSource (string[] sections)
+		{
+			this.sections = sections;
+			Load ();
+		}
+
+		/// <include file='DotNetConfigSource.xml' path='//Constructor[@name="ConstructorFile"]/docs/*' />
+		public DotNetConfigSource ()
+		{
+			savePath = ConfigFileName ();
+			configDoc.Load (savePath);
+			PerformLoad (configDoc);
+		}
+		
+		/// <include file='DotNetConfigSource.xml' path='//Constructor[@name="ConstructorPath"]/docs/*' />
+		public DotNetConfigSource (string path)
+		{
+			savePath = path;
+			configDoc.Load (savePath);
+			PerformLoad (configDoc);
+		}
+		
+		/// <include file='DotNetConfigSource.xml' path='//Constructor[@name="ConstructorDoc"]/docs/*' />
+		public DotNetConfigSource (XmlDocument document)
+		{
+			configDoc = document;
+			PerformLoad (configDoc);
+		}
+		#endregion
+		
+		#region Public properties
+		/// <include file='DotNetConfigSource.xml' path='//Property[@name="SavePath"]/docs/*' />
+		public string SavePath
+		{
+			get { return savePath; }
+		}
+		#endregion
+		
+		#region Public methods
+		/// <include file='DotNetConfigSource.xml' path='//Method[@name="Save"]/docs/*' />
+		public void Save ()
+		{
+			if (!IsSavable ()) {
+				throw new Exception ("Source cannot be saved in this state");
+			}
+			MergeConfigsIntoDocument ();
+		
+			configDoc.Save (savePath);
+		}
+		
+		/// <include file='DotNetConfigSource.xml' path='//Method[@name="SavePath"]/docs/*' />
+		public void Save (string path)
+		{
+			if (!IsSavable ()) {
+				throw new Exception ("Source cannot be saved in this state");
+			}
+
+			savePath = path;
+			this.Save ();
+		}
+		
+		/// <include file='DotNetConfigSource.xml' path='//Method[@name="SaveTextWriter"]/docs/*' />
+		public void Save (TextWriter writer)
+		{
+			MergeConfigsIntoDocument ();
+			configDoc.Save (writer);
+			savePath = null;
+		}
+		#endregion
+
+		#region Private methods
+		/// <summary>
+		/// Merges all of the configs from the config collection into the 
+		/// XmlDocument.
+		/// </summary>
+		private void MergeConfigsIntoDocument ()
+		{
+			RemoveConfigs ();
+			foreach (IConfig config in this.Configs)
+			{
+				string[] keys = config.GetKeys ();
+				
+				string search = "/configuration/" + config.Name;
+				XmlNode node = configDoc.SelectSingleNode (search);
+				if (node == null) {
+					node = SectionNode (config.Name);
+				}
+				RemoveKeys (config.Name);
+				
+				for (int i = 0; i < keys.Length; i++)
+				{
+					SetKey (node, keys[i], config.Get (keys[i]));
+				}
+			}
+		}
+
+		/// <summary>
+		/// Loads all collection classes.
+		/// </summary>
+		private void Load ()
+		{
+			this.Merge (this); // required for SaveAll
+			for (int i = 0; i < sections.Length; i++)
+			{
+				LoadCollection (sections[i], (NameValueCollection)ConfigurationSettings
+								.GetConfig (sections[i]));
+			}
+			base.ReplaceTextAll ();
+		}
+		
+		/// <summary>
+		/// Loads all sections and keys.
+		/// </summary>
+		private void PerformLoad (XmlDocument doc)
+		{
+			this.Merge (this); // required for SaveAll
+			configDoc = doc;
+			
+			XmlNode rootNode = configDoc.SelectSingleNode ("/configuration");
+			
+			if (rootNode == null) {
+				throw new Exception ("Could not find root node");
+			}
+			
+			LoadSections (rootNode);
+			base.ReplaceTextAll ();
+		}
+		
+		/// <summary>
+		/// Loads all configuration sections.
+		/// </summary>
+		private void LoadSections (XmlNode rootNode)
+		{
+			XmlNodeList nodeList = rootNode.SelectNodes ("configSections/section");
+			ConfigBase config = null;
+			
+			for (int i = 0; i < nodeList.Count; i++)
+			{
+				config = new ConfigBase (nodeList[i].Attributes["name"].Value, this);
+				
+				this.Configs.Add (config);
+				LoadKeys (rootNode, config);
+			}
+			LoadOtherSection (rootNode, "appSettings");
+		}
+		
+		/// <summary>
+		/// Loads special sections that are not loaded in the configSections
+		/// node.  This includes such sections such as appSettings.
+		/// </summary>
+		private void LoadOtherSection (XmlNode rootNode, string nodeName)
+		{
+			XmlNode node = rootNode.SelectSingleNode (nodeName);
+			ConfigBase config = null;
+			
+			if (node != null) {
+				config = new ConfigBase (nodeName, this);
+				
+				this.Configs.Add (config);
+				LoadKeys (rootNode, config);
+			}
+		}
+		
+		/// <summary>
+		/// Loads all keys for a config.
+		/// </summary>
+		private void LoadKeys (XmlNode rootNode, ConfigBase config)
+		{
+			XmlNodeList nodeList = rootNode.SelectNodes (config.Name + "/add");
+
+			for (int i = 0; i < nodeList.Count; i++)
+			{
+				config.Add (nodeList[i].Attributes["key"].Value,
+							nodeList[i].Attributes["value"].Value);
+			}
+		}
+		
+		/// <summary>
+		/// Removes all XML sections that were removed as configs.
+		/// </summary>
+		private void RemoveConfigs ()
+		{
+			XmlAttribute attr = null;
+			XmlNodeList list = configDoc.SelectNodes ("/configuration/configSections/section");
+			
+			// TODO, remove the other section node as well - /configuration/sectionname
+
+			foreach (XmlNode node in list)
+			{
+				attr = node.Attributes["name"];
+				if (attr != null) {
+					if (this.Configs[attr.Value] == null) {
+						node.ParentNode.RemoveChild (node);
+					}
+				} else {
+					throw new Exception ("Section name attribute not found");
+				}
+			}
+		}
+		
+		/// <summary>
+		/// Removes all XML keys that were removed as config keys.
+		/// </summary>
+		private void RemoveKeys (string sectionName)
+		{
+			string search = "/configuration/" + sectionName;
+			XmlNode node = configDoc.SelectSingleNode (search);
+			XmlAttribute keyName = null;
+			
+			if (node != null) {
+				foreach (XmlNode key in node.SelectNodes ("add"))
+				{
+					keyName = key.Attributes["key"];
+					if (keyName != null) {
+						if (this.Configs[sectionName].Get (keyName.Value) == null) {
+							node.RemoveChild (key);
+						}
+					} else {
+						throw new Exception ("Key attribute not found in node");
+					}
+				}
+			}
+		}
+		
+		/// <summary>
+		/// Sets an XML key.  If it does not exist then it is created.
+		/// </summary>
+		private void SetKey (XmlNode sectionNode, string key, string value)
+		{
+			string search = "add[@key='" + key + "']";
+			XmlNode node = sectionNode.SelectSingleNode (search);
+			
+			if (node == null) {
+				CreateKey (sectionNode, key, value);
+			} else {
+				node.Attributes["value"].Value = value;
+			}
+		}
+		
+		/// <summary>
+		/// Creates a key node and adds it to the collection at the end.
+		/// </summary>
+		private void CreateKey (XmlNode sectionNode, string key, string value)
+		{
+			XmlNode node = configDoc.CreateElement ("add");
+			XmlAttribute keyAttr = configDoc.CreateAttribute ("key");
+			XmlAttribute valueAttr = configDoc.CreateAttribute ("value");
+			keyAttr.Value = key;
+			valueAttr.Value = value;
+
+			node.Attributes.Append (keyAttr);
+			node.Attributes.Append (valueAttr);
+
+			sectionNode.AppendChild (node);
+		}
+
+		/// <summary>
+		/// Loads a collection class.
+		/// </summary>
+		private void LoadCollection (string name, NameValueCollection collection)
+		{
+			ConfigBase config = new ConfigBase (name, this);
+
+			if (collection == null) {
+				throw new Exception ("Section was not found");
+			}
+
+			if (collection != null) {
+				for (int i = 0; i < collection.Count; i++)
+				{
+					config.Add (collection.Keys[i], collection[i]);
+				}
+				
+				this.Configs.Add (config);
+			}
+		}
+		
+		/// <summary>
+		/// Loads all of the sections from an XML node.
+		/// </summary>
+		private string[] SectionList (XmlNode docNode)
+		{
+			ArrayList list = new ArrayList ();
+			XmlDocument doc = new XmlDocument ();
+			
+			XmlNode node = docNode.SelectSingleNode ("/configuration/appSettings");
+			if (node != null) {
+				list.Add ("appSettings");
+			}
+			
+			XmlNodeList nodeList = docNode.SelectNodes ("/configuration/configSections/section");
+			
+			for (int i = 0; i < nodeList.Count; i++)
+			{
+				XmlNode attr = nodeList[i].Attributes["name"];
+				if (attr != null) {
+					list.Add (attr.Value);
+				}
+			}
+			
+			string[] result = new string[list.Count];
+			list.CopyTo (result, 0);
+			
+			return result;
+		}
+		
+		/// <summary>
+		/// Returns a new section node.
+		/// </summary>
+		private XmlNode SectionNode (string name)
+		{
+			// Add node for configSections node
+			XmlNode node = configDoc.CreateElement ("section");
+			XmlAttribute attr = configDoc.CreateAttribute ("name");
+			attr.Value = name;
+			node.Attributes.Append (attr);
+			
+			attr = configDoc.CreateAttribute ("type");
+			attr.Value = "System.Configuration.NameValueSectionHandler";
+			node.Attributes.Append (attr);
+			string search = "/configuration/configSections"; 
+			configDoc.SelectSingleNode (search).AppendChild (node);
+		
+			// Add node for configuration node
+			XmlNode result = configDoc.CreateElement (name);
+			configDoc.DocumentElement.AppendChild (result);
+			
+			return result;
+		}
+		
+		/// <summary>
+		/// Returns the name of the configuration file for this application.
+		/// </summary>
+		private string ConfigFileName ()
+		{
+			return ((Assembly.GetEntryAssembly ()).GetName ()).Name +
+					".exe.config";
+		}
+		
+		/// <summary>
+		/// Returns true if this instance is savable.
+		/// </summary>
+		private bool IsSavable ()
+		{
+			return (this.savePath != null);
+		}
+		#endregion
+	}
+}
\ No newline at end of file

Added: player-sdk/trunk/src/Nini/Config/IConfig.cs
===================================================================
--- player-sdk/trunk/src/Nini/Config/IConfig.cs	2004-11-08 23:50:06 UTC (rev 7)
+++ player-sdk/trunk/src/Nini/Config/IConfig.cs	2004-11-09 12:23:21 UTC (rev 8)
@@ -0,0 +1,84 @@
+#region Copyright
+//
+// Nini Configuration Project.
+// Copyright (C) 2004 Brent R. Matzelle.  All rights reserved.
+//
+// This software is published under the terms of the MIT X11 license, a copy of 
+// which has been included with this distribution in the LICENSE.txt file.
+// 
+#endregion
+
+using System;
+
+namespace Nini.Config
+{
+	/// <include file='IConfig.xml' path='//Interface[@name="IConfig"]/docs/*' />
+	public interface IConfig
+	{
+		/// <include file='IConfig.xml' path='//Property[@name="ConfigSource"]/docs/*' />
+		IConfigSource ConfigSource { get; }
+		
+		/// <include file='IConfig.xml' path='//Property[@name="Name"]/docs/*' />
+		string Name { get; }
+		
+		/// <include file='IConfig.xml' path='//Property[@name="Alias"]/docs/*' />
+		AliasText Alias { get; }
+
+		/// <include file='IConfig.xml' path='//Method[@name="Get"]/docs/*' />
+		string Get (string key);
+		
+		/// <include file='IConfig.xml' path='//Method[@name="GetDefault"]/docs/*' />
+		string Get (string key, string defaultValue);
+		
+		/// <include file='IConfig.xml' path='//Method[@name="Get"]/docs/*' />
+		string GetString (string key);
+		
+		/// <include file='IConfig.xml' path='//Method[@name="GetDefault"]/docs/*' />
+		string GetString (string key, string defaultValue);
+		
+		/// <include file='IConfig.xml' path='//Method[@name="GetInt"]/docs/*' />
+		int GetInt (string key);
+		
+		/// <include file='IConfig.xml' path='//Method[@name="GetIntAlias"]/docs/*' />
+		int GetInt (string key, bool fromAlias);
+		
+		/// <include file='IConfig.xml' path='//Method[@name="GetIntDefault"]/docs/*' />
+		int GetInt (string key, int defaultValue);
+		
+		/// <include file='IConfig.xml' path='//Method[@name="GetIntDefaultAlias"]/docs/*' />
+		int GetInt (string key, int defaultValue, bool fromAlias);
+		
+		/// <include file='IConfig.xml' path='//Method[@name="GetLong"]/docs/*' />
+		long GetLong (string key);
+		
+		/// <include file='IConfig.xml' path='//Method[@name="GetLongDefault"]/docs/*' />
+		long GetLong (string key, long defaultValue);
+		
+		/// <include file='IConfig.xml' path='//Method[@name="GetBoolean"]/docs/*' />
+		bool GetBoolean (string key);
+		
+		/// <include file='IConfig.xml' path='//Method[@name="GetBooleanDefault"]/docs/*' />
+		bool GetBoolean (string key, bool defaultValue);
+
+		/// <include file='IConfig.xml' path='//Method[@name="GetFloat"]/docs/*' />
+		float GetFloat (string key);
+
+		/// <include file='IConfig.xml' path='//Method[@name="GetFloatDefault"]/docs/*' />
+		float GetFloat (string key, float defaultValue);
+		
+		/// <include file='IConfig.xml' path='//Method[@name="GetDouble"]/docs/*' />
+		double GetDouble (string key);
+
+		/// <include file='IConfig.xml' path='//Method[@name="GetDoubleDefault"]/docs/*' />
+		double GetDouble (string key, double defaultValue);
+		
+		/// <include file='IConfig.xml' path='//Method[@name="GetKeys"]/docs/*' />
+		string[] GetKeys ();
+		
+		/// <include file='IConfig.xml' path='//Method[@name="Set"]/docs/*' />
+		void Set (string key, object value);
+		
+		/// <include file='IConfig.xml' path='//Method[@name="Remove"]/docs/*' />
+		void Remove (string key);
+	}
+}
\ No newline at end of file

Added: player-sdk/trunk/src/Nini/Config/IConfigSource.cs
===================================================================
--- player-sdk/trunk/src/Nini/Config/IConfigSource.cs	2004-11-08 23:50:06 UTC (rev 7)
+++ player-sdk/trunk/src/Nini/Config/IConfigSource.cs	2004-11-09 12:23:21 UTC (rev 8)
@@ -0,0 +1,37 @@
+#region Copyright
+//
+// Nini Configuration Project.
+// Copyright (C) 2004 Brent R. Matzelle.  All rights reserved.
+//
+// This software is published under the terms of the MIT X11 license, a copy of 
+// which has been included with this distribution in the LICENSE.txt file.
+// 
+#endregion
+
+using System;
+using System.IO;
+
+namespace Nini.Config
+{
+	/// <include file='IConfigSource.xml' path='//Interface[@name="IConfigSource"]/docs/*' />
+	public interface IConfigSource
+	{
+		/// <include file='IConfigSource.xml' path='//Property[@name="Configs"]/docs/*' />
+		ConfigCollection Configs { get; }
+		
+		/// <include file='IConfigSource.xml' path='//Property[@name="AutoSave"]/docs/*' />
+		bool AutoSave { get; set; }
+		
+		/// <include file='IConfigSource.xml' path='//Property[@name="GlobalAlias"]/docs/*' />
+		AliasText GlobalAlias { get; }
+		
+		/// <include file='IConfigSource.xml' path='//Method[@name="Merge"]/docs/*' />
+		void Merge (IConfigSource source);
+		
+		/// <include file='IConfigSource.xml' path='//Method[@name="Save"]/docs/*' />
+		void Save ();
+		
+		/// <include file='IConfigSource.xml' path='//Method[@name="AddConfig"]/docs/*' />
+		IConfig AddConfig (string name);
+	}
+}
\ No newline at end of file

Added: player-sdk/trunk/src/Nini/Config/IniConfigSource.cs
===================================================================
--- player-sdk/trunk/src/Nini/Config/IniConfigSource.cs	2004-11-08 23:50:06 UTC (rev 7)
+++ player-sdk/trunk/src/Nini/Config/IniConfigSource.cs	2004-11-09 12:23:21 UTC (rev 8)
@@ -0,0 +1,184 @@
+#region Copyright
+//
+// Nini Configuration Project.
+// Copyright (C) 2004 Brent R. Matzelle.  All rights reserved.
+//
+// This software is published under the terms of the MIT X11 license, a copy of 
+// which has been included with this distribution in the LICENSE.txt file.
+// 
+#endregion
+
+using System;
+using System.IO;
+using System.Collections;
+using Nini.Ini;
+
+namespace Nini.Config
+{
+	/// <include file='IniConfigSource.xml' path='//Class[@name="IniConfigSource"]/docs/*' />
+	public class IniConfigSource : ConfigSourceBase, IConfigSource
+	{
+		#region Private variables
+		IniDocument iniDocument = null;
+		string savePath = null;
+		#endregion
+		
+		#region Public properties
+		#endregion
+
+		#region Constructors
+		/// <include file='IniConfigSource.xml' path='//Constructor[@name="ConstructorPath"]/docs/*' />
+		public IniConfigSource (string filePath)
+			: this (new StreamReader (filePath))
+		{
+			this.savePath = filePath;
+		}
+		
+		/// <include file='IniConfigSource.xml' path='//Constructor[@name="ConstructorTextReader"]/docs/*' />
+		public IniConfigSource (TextReader reader)
+		{
+			this.Merge (this); // required for SaveAll
+			iniDocument = new IniDocument (reader);
+			Load ();
+		}
+		
+		/// <include file='IniConfigSource.xml' path='//Constructor[@name="ConstructorStream"]/docs/*' />
+		public IniConfigSource (Stream stream)
+			: this (new StreamReader (stream))
+		{
+		}
+		#endregion
+		
+		#region Public properties
+		/// <include file='IniConfigSource.xml' path='//Property[@name="SavePath"]/docs/*' />
+		public string SavePath
+		{
+			get { return savePath; }
+		}
+		#endregion
+		
+		#region Public methods
+		/// <include file='IniConfigSource.xml' path='//Method[@name="Save"]/docs/*' />
+		public void Save ()
+		{
+			if (!IsSavable ()) {
+				throw new Exception ("Source cannot be saved in this state");
+			}
+
+			MergeConfigsIntoDocument ();
+			
+			iniDocument.Save (this.savePath);
+		}
+		
+		/// <include file='IniConfigSource.xml' path='//Method[@name="SavePath"]/docs/*' />
+		public void Save (string path)
+		{
+			this.savePath = path;
+			this.Save ();
+		}
+		
+		/// <include file='IniConfigSource.xml' path='//Method[@name="SaveTextWriter"]/docs/*' />
+		public void Save (TextWriter writer)
+		{
+			MergeConfigsIntoDocument ();
+			iniDocument.Save (writer);
+			savePath = null;
+		}
+		#endregion
+		
+		#region Private methods
+		/// <summary>
+		/// Merges all of the configs from the config collection into the 
+		/// IniDocument.
+		/// </summary>
+		private void MergeConfigsIntoDocument ()
+		{
+			RemoveConfigs ();
+			foreach (IConfig config in this.Configs)
+			{
+				string[] keys = config.GetKeys ();
+
+				// Create a new section if one doesn't exist
+				if (iniDocument.Sections[config.Name] == null) {
+					IniSection section = new IniSection (config.Name);
+					iniDocument.Sections.Add (section);
+				}
+				RemoveKeys (config.Name);
+
+				for (int i = 0; i < keys.Length; i++)
+				{
+					iniDocument.Sections[config.Name].Set (keys[i], config.Get (keys[i]));
+				}
+			}
+		}
+		
+		/// <summary>
+		/// Removes all INI sections that were removed as configs.
+		/// </summary>
+		private void RemoveConfigs ()
+		{
+			IniSection section = null;
+			for (int i = 0; i < iniDocument.Sections.Count; i++)
+			{
+				section = iniDocument.Sections[i];
+				if (this.Configs[section.Name] == null) {
+					iniDocument.Sections.Remove (section.Name);
+				}
+			}
+		}
+		
+		/// <summary>
+		/// Removes all INI keys that were removed as config keys.
+		/// </summary>
+		private void RemoveKeys (string sectionName)
+		{
+			IniSection section = iniDocument.Sections[sectionName];
+
+			if (section != null) {
+				foreach (string key in section.GetKeys ())
+				{
+					if (this.Configs[sectionName].Get (key) == null) {
+						section.Remove (key);
+					}
+				}
+			}
+		}
+
+		/// <summary>
+		/// Loads the configuration file.
+		/// </summary>
+		private void Load ()
+		{
+			ConfigBase config = null;
+			IniSection section = null;
+			IniItem item = null;
+
+			for (int j = 0; j < iniDocument.Sections.Count; j++)
+			{
+				section = iniDocument.Sections[j];
+				config = new ConfigBase (section.Name, this);
+
+				for (int i = 0; i < section.ItemCount; i++)
+				{
+					item = section.GetItem (i);
+					
+					if  (item.Type == IniType.Key) {
+						config.Add (item.Name, item.Value);
+					}
+				}
+				
+				this.Configs.Add (config);
+			}
+			base.ReplaceTextAll ();
+		}
+		
+		/// <summary>
+		/// Returns true if this instance is savable.
+		/// </summary>
+		private bool IsSavable ()
+		{
+			return (this.savePath != null);
+		}
+		#endregion
+	}
+}
\ No newline at end of file

Added: player-sdk/trunk/src/Nini/Config/RegistryConfigSource.cs
===================================================================
--- player-sdk/trunk/src/Nini/Config/RegistryConfigSource.cs	2004-11-08 23:50:06 UTC (rev 7)
+++ player-sdk/trunk/src/Nini/Config/RegistryConfigSource.cs	2004-11-09 12:23:21 UTC (rev 8)
@@ -0,0 +1,165 @@
+#region Copyright
+//
+// Nini Configuration Project.
+// Copyright (C) 2004 Brent R. Matzelle.  All rights reserved.
+//
+// This software is published under the terms of the MIT X11 license, a copy of 
+// which has been included with this distribution in the LICENSE.txt file.
+// 
+#endregion
+
+using System;
+using System.IO;
+using System.Collections;
+using Microsoft.Win32;
+using Nini.Ini;
+
+namespace Nini.Config
+{
+	/// <include file='RegistryConfigSource.xml' path='//Enum[@name="RegistryRecurse"]/docs/*' />
+	public enum RegistryRecurse
+	{
+		/// <include file='RegistryConfigSource.xml' path='//Enum[@name="RegistryRecurse"]/Value[@name="None"]/docs/*' />
+		None,
+		/// <include file='RegistryConfigSource.xml' path='//Enum[@name="RegistryRecurse"]/Value[@name="Flattened"]/docs/*' />
+		Flattened,
+		/// <include file='RegistryConfigSource.xml' path='//Enum[@name="RegistryRecurse"]/Value[@name="Namespacing"]/docs/*' />
+		Namespacing
+	}
+
+	/// <include file='RegistryConfigSource.xml' path='//Class[@name="RegistryConfigSource"]/docs/*' />
+	public class RegistryConfigSource : ConfigSourceBase, IConfigSource
+	{
+		#region Private variables
+		#endregion
+		
+		#region Public properties
+		#endregion
+
+		#region Constructors
+		#endregion
+		
+		#region Public methods
+		/// <include file='RegistryConfigSource.xml' path='//Method[@name="AddMapping"]/docs/*' />
+		public void AddMapping (RegistryKey registryKey, string path)
+		{
+			RegistryKey key = registryKey.OpenSubKey (path, true);
+			
+			if (key == null) {
+				throw new ArgumentException ("The specified key does not exist");
+			}
+			
+			LoadKeyValues (key, ShortKeyName (key));
+		}
+		
+		/// <include file='RegistryConfigSource.xml' path='//Method[@name="AddMappingRecurse"]/docs/*' />
+		public void AddMapping (RegistryKey registryKey, 
+								string path, 
+								RegistryRecurse recurse)
+		{
+			RegistryKey key = registryKey.OpenSubKey (path, true);
+			
+			if (key == null) {
+				throw new ArgumentException ("The specified key does not exist");
+			}
+			
+			if (recurse == RegistryRecurse.Namespacing) {
+				LoadKeyValues (key, path);
+			} else {
+				LoadKeyValues (key, ShortKeyName (key));
+			}
+			
+			string[] subKeys = key.GetSubKeyNames ();
+			for (int i = 0; i < subKeys.Length; i++)
+			{
+				switch (recurse)
+				{
+				case RegistryRecurse.None:
+					// no recursion
+					break;
+				case RegistryRecurse.Namespacing:
+					AddMapping (registryKey, path + "\\" + subKeys[i], recurse);
+					break;
+				case RegistryRecurse.Flattened:
+					AddMapping (key, subKeys[i], recurse);
+					break;
+				}
+			}
+		}
+		
+		/// <include file='RegistryConfigSource.xml' path='//Method[@name="Save"]/docs/*' />
+		public void Save ()
+		{
+			for (int i = 0; i < this.Configs.Count; i++)
+			{
+				// New merged configs are not RegistryConfigs
+				if (this.Configs[i] is RegistryConfig) {
+					RegistryConfig config = (RegistryConfig)this.Configs[i];
+					string[] keys = config.GetKeys ();
+					
+					for (int j = 0; j < keys.Length; j++)
+					{
+						 config.Key.SetValue (keys[j], config.Get (keys[j]));
+					}
+				}
+			}
+		}
+		#endregion
+		
+		#region Private methods
+		/// <summary>
+		/// Loads all values in a Registry keyS
+		/// </summary>
+		private void LoadKeyValues (RegistryKey key, string keyName)
+		{
+			string[] values = key.GetValueNames ();
+
+			RegistryConfig config = new RegistryConfig (keyName, this);
+			config.Key = key;
+
+			foreach (string value in values)
+			{
+				config.Add (value, key.GetValue (value).ToString ());
+			}
+			this.Configs.Add (config);
+			base.ReplaceTextAll ();
+		}
+		
+		/// <summary>
+		/// Returns the key name without the fully qualified path.
+		/// e.g. no HKEY_LOCAL_MACHINE\\MyKey, just MyKey
+		/// </summary>
+		private string ShortKeyName (RegistryKey key)
+		{
+			int index = key.Name.LastIndexOf ("\\");
+
+			return (index == -1) ? key.Name : key.Name.Substring (index + 1);
+		}
+		
+		/// <summary>
+		/// Registry Config class.
+		/// </summary>
+		private class RegistryConfig : ConfigBase
+		{
+			RegistryKey key = null;
+			
+			/// <summary>
+			/// Constructor.
+			/// </summary>
+			public RegistryConfig (string name, IConfigSource source)
+				: base (name, source)
+			{
+			}
+			
+			/// <summary>
+			/// Registry key for the Config.
+			/// </summary>
+			public RegistryKey Key
+			{
+				get { return key; }
+				set { key = value; }
+			}
+		}
+		#endregion
+	}
+}

Added: player-sdk/trunk/src/Nini/Config/XmlConfigSource.cs
===================================================================
--- player-sdk/trunk/src/Nini/Config/XmlConfigSource.cs	2004-11-08 23:50:06 UTC (rev 7)
+++ player-sdk/trunk/src/Nini/Config/XmlConfigSource.cs	2004-11-09 12:23:21 UTC (rev 8)
@@ -0,0 +1,254 @@
+#region Copyright
+//
+// Nini Configuration Project.
+// Copyright (C) 2004 Brent R. Matzelle.  All rights reserved.
+//
+// This software is published under the terms of the MIT X11 license, a copy of 
+// which has been included with this distribution in the LICENSE.txt file.
+// 
+#endregion
+
+using System;
+using System.IO;
+using System.Xml;
+using System.Collections;
+
+namespace Nini.Config
+{
+	/// <include file='XmlConfigSource.xml' path='//Class[@name="XmlConfigSource"]/docs/*' />
+	public class XmlConfigSource : ConfigSourceBase, IConfigSource
+	{
+		#region Private variables
+		XmlDocument configDoc = null;
+		string savePath = null;
+		#endregion
+
+		#region Constructors
+		/// <include file='XmlConfigSource.xml' path='//Constructor[@name="ConstructorPath"]/docs/*' />
+		public XmlConfigSource (string path)
+		{
+			savePath = path;
+			XmlDocument document = new XmlDocument ();
+			document.Load (path);
+			PerformLoad (document);
+		}
+
+		/// <include file='XmlConfigSource.xml' path='//Constructor[@name="ConstructorXmlDoc"]/docs/*' />
+		public XmlConfigSource (XmlDocument document)
+		{
+			PerformLoad (document);
+		}
+		#endregion
+		
+		#region Public properties
+		/// <include file='XmlConfigSource.xml' path='//Property[@name="SavePath"]/docs/*' />
+		public string SavePath
+		{
+			get { return savePath; }
+		}
+		#endregion
+		
+		#region Public methods
+		/// <include file='XmlConfigSource.xml' path='//Method[@name="Save"]/docs/*' />
+		public void Save ()
+		{
+			if (!IsSavable ()) {
+				throw new Exception ("Source cannot be saved in this state");
+			}
+
+			MergeConfigsIntoDocument ();
+			
+			configDoc.Save (savePath);
+		}
+		
+		/// <include file='XmlConfigSource.xml' path='//Method[@name="SavePath"]/docs/*' />
+		public void Save (string path)
+		{
+			this.savePath = path;
+			this.Save ();
+		}
+		
+		/// <include file='XmlConfigSource.xml' path='//Method[@name="SaveTextWriter"]/docs/*' />
+		public void Save (TextWriter writer)
+		{
+			MergeConfigsIntoDocument ();
+			configDoc.Save (writer);
+			savePath = null;
+		}
+		#endregion
+
+		#region Private methods
+		/// <summary>
+		/// Merges all of the configs from the config collection into the 
+		/// XmlDocument.
+		/// </summary>
+		private void MergeConfigsIntoDocument ()
+		{
+			RemoveConfigs ();
+			foreach (IConfig config in this.Configs)
+			{
+				string[] keys = config.GetKeys ();
+				
+				string search = "Nini/Section[@Name='" + config.Name + "']";
+				XmlNode node = configDoc.SelectSingleNode (search);
+				if (node == null) {
+					node = SectionNode (config.Name);
+					configDoc.DocumentElement.AppendChild (node);
+				}
+				RemoveKeys (config.Name);
+				
+				for (int i = 0; i < keys.Length; i++)
+				{
+					SetKey (node, keys[i], config.Get (keys[i]));
+				}
+			}
+		}
+		
+		/// <summary>
+		/// Removes all XML sections that were removed as configs.
+		/// </summary>
+		private void RemoveConfigs ()
+		{
+			XmlAttribute attr = null;
+			XmlNodeList list = configDoc.SelectNodes ("Nini/Section");
+			foreach (XmlNode node in list)
+			{
+				attr = node.Attributes["Name"];
+				if (attr != null) {
+					if (this.Configs[attr.Value] == null) {
+						configDoc.DocumentElement.RemoveChild (node);
+					}
+				} else {
+					throw new Exception ("Section name attribute not found");
+				}
+			}
+		}
+		
+		/// <summary>
+		/// Removes all XML keys that were removed as config keys.
+		/// </summary>
+		private void RemoveKeys (string sectionName)
+		{
+			string search = "Nini/Section[@Name='" + sectionName + "']";
+			XmlNode node = configDoc.SelectSingleNode (search);
+			XmlAttribute keyName = null;
+			
+			if (node != null) {
+				foreach (XmlNode key in node.SelectNodes ("Key"))
+				{
+					keyName = node.Attributes["Name"];
+					if (keyName != null) {
+						if (this.Configs[sectionName].Get (keyName.Value) == null) {
+							node.RemoveChild (key);
+						}
+					} else {
+						throw new Exception ("Name attribute not found in key");
+					}
+				}
+			}
+		}
+
+		/// <summary>
+		/// Loads all sections and keys.
+		/// </summary>
+		private void PerformLoad (XmlDocument doc)
+		{
+			this.Merge (this); // required for SaveAll
+			configDoc = doc;
+			
+			XmlNode rootNode = configDoc.SelectSingleNode ("/Nini");
+			
+			if (rootNode == null) {
+				throw new Exception ("Did not find NiniXml root node");
+			}
+			
+			LoadSections (rootNode);
+			base.ReplaceTextAll ();
+		}
+		
+		/// <summary>
+		/// Loads all configuration sections.
+		/// </summary>
+		private void LoadSections (XmlNode rootNode)
+		{
+			XmlNodeList nodeList = rootNode.SelectNodes ("Section");
+			ConfigBase config = null;
+			
+			for (int i = 0; i < nodeList.Count; i++)
+			{
+				config = new ConfigBase (nodeList[i].Attributes["Name"].Value, this);
+				
+				this.Configs.Add (config);
+				LoadKeys (nodeList[i], config);
+			}
+		}
+		
+		/// <summary>
+		/// Loads all keys for a config.
+		/// </summary>
+		private void LoadKeys (XmlNode node, ConfigBase config)
+		{
+			XmlNodeList nodeList = node.SelectNodes ("Key");
+
+			for (int i = 0; i < nodeList.Count; i++)
+			{
+				config.Add (nodeList[i].Attributes["Name"].Value,
+							nodeList[i].Attributes["Value"].Value);
+			}
+		}
+		
+		/// <summary>
+		/// Sets an XML key.  If it does not exist then it is created.
+		/// </summary>
+		private void SetKey (XmlNode sectionNode, string key, string value)
+		{
+			string search = "Key[@Name='" + key + "']";
+			XmlNode node = sectionNode.SelectSingleNode (search);
+			
+			if (node == null) {
+				CreateKey (sectionNode, key, value);
+			} else {
+				node.Attributes["Value"].Value = value;
+			}
+		}
+		
+		/// <summary>
+		/// Creates a key node and adds it to the collection at the end.
+		/// </summary>
+		private void CreateKey (XmlNode sectionNode, string key, string value)
+		{
+			XmlNode node = configDoc.CreateElement ("Key");
+			XmlAttribute keyAttr = configDoc.CreateAttribute ("Name");
+			XmlAttribute valueAttr = configDoc.CreateAttribute ("Value");
+			keyAttr.Value = key;
+			valueAttr.Value = value;
+
+			node.Attributes.Append (keyAttr);
+			node.Attributes.Append (valueAttr);
+
+			sectionNode.AppendChild (node);
+		}
+		
+		/// <summary>
+		/// Returns a new section node.
+		/// </summary>
+		private XmlNode SectionNode (string name)
+		{
+			XmlNode result = configDoc.CreateElement ("Section");
+			XmlAttribute nameAttr = configDoc.CreateAttribute ("Name");
+			nameAttr.Value = name;
+			result.Attributes.Append (nameAttr);
+			
+			return result;
+		}
+		
+		/// <summary>
+		/// Returns true if this instance is savable.
+		/// </summary>
+		private bool IsSavable ()
+		{
+			return (this.savePath != null);
+		}
+		#endregion
+	}
+}
\ No newline at end of file

Added: player-sdk/trunk/src/Nini/Ini/IniDocument.cs
===================================================================
--- player-sdk/trunk/src/Nini/Ini/IniDocument.cs	2004-11-08 23:50:06 UTC (rev 7)
+++ player-sdk/trunk/src/Nini/Ini/IniDocument.cs	2004-11-09 12:23:21 UTC (rev 8)
@@ -0,0 +1,142 @@
+#region Copyright
+//
+// Nini Configuration Project.
+// Copyright (C) 2004 Brent R. Matzelle.  All rights reserved.
+//
+// This software is published under the terms of the MIT X11 license, a copy of 
+// which has been included with this distribution in the LICENSE.txt file.
+// 
+#endregion
+
+using System;
+using System.IO;
+using System.Collections;
+using Nini.Util;
+
+namespace Nini.Ini
+{
+	/// <include file='IniDocument.xml' path='//Class[@name="IniDocument"]/docs/*' />
+	public class IniDocument
+	{
+		#region Private variables
+		IniSectionCollection sections = new IniSectionCollection ();
+		ArrayList initialComment = new ArrayList ();
+		#endregion
+		
+		#region Public properties
+		#endregion
+
+		#region Constructors
+		/// <include file='IniDocument.xml' path='//Constructor[@name="ConstructorPath"]/docs/*' />
+		public IniDocument (string filePath)
+			: this (new StreamReader (filePath))
+		{
+		}
+		
+		/// <include file='IniDocument.xml' path='//Constructor[@name="ConstructorTextReader"]/docs/*' />
+		public IniDocument (TextReader reader)
+		{
+			Load (new IniReader (reader));
+		}
+		
+		/// <include file='IniDocument.xml' path='//Constructor[@name="ConstructorStream"]/docs/*' />
+		public IniDocument (Stream stream)
+			: this (new StreamReader (stream))
+		{
+		}
+		
+		/// <include file='IniDocument.xml' path='//Constructor[@name="Constructor"]/docs/*' />
+		public IniDocument ()
+		{
+		}
+		#endregion
+		
+		#region Public methods
+		/// <include file='IniSection.xml' path='//Property[@name="Comment"]/docs/*' />
+		public IniSectionCollection Sections
+		{
+			get { return sections; }
+		}
+
+		/// <include file='IniDocument.xml' path='//Method[@name="SaveTextWriter"]/docs/*' />
+		public void Save (TextWriter textWriter)
+		{
+			IniWriter writer = new IniWriter (textWriter);
+			IniItem item = null;
+			IniSection section = null;
+			
+			foreach (string comment in initialComment)
+			{
+				writer.WriteEmpty  (comment);
+			}
+
+			for (int j = 0; j < sections.Count; j++)
+			{
+				section = sections[j];
+				writer.WriteSection (section.Name, section.Comment);
+				for (int i = 0; i < section.ItemCount; i++)
+				{
+					item = section.GetItem (i);
+					switch (item.Type)
+					{
+					case IniType.Key:
+						writer.WriteKey (item.Name, item.Value, item.Comment);
+						break;
+					case IniType.Empty:
+						writer.WriteEmpty (item.Comment);
+						break;
+					}
+				}
+			}
+
+			writer.Close ();
+		}
+		
+		/// <include file='IniDocument.xml' path='//Method[@name="SavePath"]/docs/*' />
+		public void Save (string filePath)
+		{
+			StreamWriter writer = new StreamWriter (filePath);
+			Save (writer);
+			writer.Close ();
+		}
+		#endregion
+		
+		#region Private methods
+		/// <summary>
+		/// Loads the file not saving comments.
+		/// </summary>
+		private void Load (IniReader reader)
+		{
+			reader.IgnoreComments = false;
+			bool sectionFound = false;
+			IniSection section = null;
+			
+			while (reader.Read ())
+			{
+				switch (reader.Type)
+				{
+				case IniType.Empty:
+					if (!sectionFound) {
+						initialComment.Add (reader.Comment);
+					} else {
+						section.Set (reader.Comment);
+					}
+
+					break;
+				case IniType.Section:
+					sectionFound = true;
+					section = new IniSection (reader.Name, reader.Comment);
+					sections.Add (section);
+					break;
+				case IniType.Key:
+					section.Set (reader.Name, reader.Value, reader.Comment);
+					break;
+				}
+			}
+
+			reader.Close ();
+		}
+		#endregion
+	}
+}
+

Added: player-sdk/trunk/src/Nini/Ini/IniException.cs
===================================================================
--- player-sdk/trunk/src/Nini/Ini/IniException.cs	2004-11-08 23:50:06 UTC (rev 7)
+++ player-sdk/trunk/src/Nini/Ini/IniException.cs	2004-11-09 12:23:21 UTC (rev 8)
@@ -0,0 +1,64 @@
+#region Copyright
+//
+// Nini Configuration Project.
+// Copyright (C) 2004 Brent R. Matzelle.  All rights reserved.
+//
+// This software is published under the terms of the MIT X11 license, a copy of 
+// which has been included with this distribution in the LICENSE.txt file.
+// 
+#endregion
+
+using System;
+
+namespace Nini.Ini
+{
+	/// <include file='IniException.xml' path='//Class[@name="IniException"]/docs/*' />
+	public class IniException : Exception
+	{
+		#region Private variables
+		IniReader iniReader = null;
+		string message = "";
+		#endregion
+
+		#region Public properties
+		/// <include file='IniException.xml' path='//Property[@name="LinePosition"]/docs/*' />
+		public int LinePosition
+		{
+			get
+			{
+				return (iniReader == null) ? 0 : iniReader.LinePosition;
+			}
+		}
+		
+		/// <include file='IniException.xml' path='//Property[@name="LineNumber"]/docs/*' />
+		public int LineNumber
+		{
+			get
+			{
+				return (iniReader == null) ? 0 : iniReader.LineNumber;
+			}
+		}
+		
+		/// <include file='IniException.xml' path='//Property[@name="Message"]/docs/*' />
+		public override string Message
+		{
+			get { return this.message; }
+		}
+		#endregion
+
+		#region Constructors
+		/// <include file='IniException.xml' path='//Constructor[@name="ConstructorMessage"]/docs/*' />
+		public IniException (string message)
+		{
+			this.message  = message;
+		}
+		
+		/// <include file='IniException.xml' path='//Constructor[@name="ConstructorTextReader"]/docs/*' />
+		internal IniException (IniReader reader, string message)
+		{
+			iniReader = reader;
+			this.message = message;
+		}
+		#endregion
+	}
+}
\ No newline at end of file

Added: player-sdk/trunk/src/Nini/Ini/IniItem.cs
===================================================================
--- player-sdk/trunk/src/Nini/Ini/IniItem.cs	2004-11-08 23:50:06 UTC (rev 7)
+++ player-sdk/trunk/src/Nini/Ini/IniItem.cs	2004-11-09 12:23:21 UTC (rev 8)
@@ -0,0 +1,54 @@
+using System;
+
+namespace Nini.Ini
+{
+		/// <include file='IniItem.xml' path='//Class[@name="IniItem"]/docs/*' />
+		public class IniItem
+		{
+			#region Private variables
+			IniType iniType = IniType.Empty;
+			string iniName = "";
+			string iniValue = "";
+			string iniComment = null;
+			#endregion
+			
+			#region Public properties
+			/// <include file='IniItem.xml' path='//Property[@name="Type"]/docs/*' />
+			public IniType Type
+			{
+				get { return iniType; }
+				set { iniType = value; }
+			}
+			
+			/// <include file='IniItem.xml' path='//Property[@name="Value"]/docs/*' />
+			public string Value
+			{
+				get { return iniValue; }
+				set { iniValue = value; }
+			}
+			
+			/// <include file='IniItem.xml' path='//Property[@name="Name"]/docs/*' />
+			public string Name
+			{
+				get { return iniName; }
+			}
+			
+			/// <include file='IniItem.xml' path='//Property[@name="Comment"]/docs/*' />
+			public string Comment
+			{
+				get { return iniComment; }
+				set { iniComment = value; }
+			}
+			#endregion
+			
+			/// <include file='IniItem.xml' path='//Constructor[@name="Constructor"]/docs/*' />
+			internal protected IniItem (string name, string value, IniType type, string comment)
+			{
+				iniName = name;
+				iniValue = value;
+				iniType = type;
+				iniComment = comment;
+			}
+		}
+}
+

Added: player-sdk/trunk/src/Nini/Ini/IniReader.cs
===================================================================
--- player-sdk/trunk/src/Nini/Ini/IniReader.cs	2004-11-08 23:50:06 UTC (rev 7)
+++ player-sdk/trunk/src/Nini/Ini/IniReader.cs	2004-11-09 12:23:21 UTC (rev 8)
@@ -0,0 +1,506 @@
+#region Copyright
+//
+// Nini Configuration Project.
+// Copyright (C) 2004 Brent R. Matzelle.  All rights reserved.
+//
+// This software is published under the terms of the MIT X11 license, a copy of 
+// which has been included with this distribution in the LICENSE.txt file.
+// 
+#endregion
+
+using System;
+using System.IO;
+using System.Text;
+using System.Collections;
+
+namespace Nini.Ini
+{
+	/// <include file='IniReader.xml' path='//Enum[@name="IniReadState"]/docs/*' />
+	public enum IniReadState : int
+	{
+		/// <include file='IniReader.xml' path='//Enum[@name="IniReadState"]/Value[@name="Closed"]/docs/*' />
+		Closed,
+		/// <include file='IniReader.xml' path='//Enum[@name="IniReadState"]/Value[@name="EndOfFile"]/docs/*' />
+		EndOfFile,
+		/// <include file='IniReader.xml' path='//Enum[@name="IniReadState"]/Value[@name="Error"]/docs/*' />
+		Error,
+		/// <include file='IniReader.xml' path='//Enum[@name="IniReadState"]/Value[@name="Initial"]/docs/*' />
+		Initial,
+		/// <include file='IniReader.xml' path='//Enum[@name="IniReadState"]/Value[@name="Interactive"]/docs/*' />
+		Interactive
+	};
+
+	/// <include file='IniReader.xml' path='//Enum[@name="IniType"]/docs/*' />
+	public enum IniType : int
+	{
+		/// <include file='IniReader.xml' path='//Enum[@name="IniType"]/Value[@name="Section"]/docs/*' />
+		Section,
+		/// <include file='IniReader.xml' path='//Enum[@name="IniType"]/Value[@name="Key"]/docs/*' />
+		Key,
+		/// <include file='IniReader.xml' path='//Enum[@name="IniType"]/Value[@name="Empty"]/docs/*' />
+		Empty
+	}
+
+	/// <include file='IniReader.xml' path='//Class[@name="IniReader"]/docs/*' />
+	public class IniReader
+	{
+		#region Private variables
+		int lineNumber = 1;
+		int column = 1;
+		IniType iniType = IniType.Empty;
+		TextReader textReader = null;
+		bool ignoreComments = false;
+		StringBuilder name = new StringBuilder ();
+		StringBuilder value = new StringBuilder ();
+		StringBuilder comment = new StringBuilder ();
+		IniReadState readState = IniReadState.Initial;
+		Hashtable keyList = new Hashtable ();
+		Hashtable sectionList = new Hashtable ();
+		bool hasComment = false;
+		#endregion
+
+		#region Public properties
+		/// <include file='IniReader.xml' path='//Property[@name="Name"]/docs/*' />
+		public string Name
+		{
+			get { return this.name.ToString (); }
+		}
+		
+		/// <include file='IniReader.xml' path='//Property[@name="Value"]/docs/*' />
+		public string Value
+		{
+			get { return this.value.ToString (); }
+		}
+		
+		/// <include file='IniReader.xml' path='//Property[@name="Type"]/docs/*' />
+		public IniType Type
+		{
+			get { return iniType; }
+		}
+		
+		/// <include file='IniReader.xml' path='//Property[@name="Comment"]/docs/*' />
+		public string Comment
+		{
+			get { return (hasComment) ? this.comment.ToString () : null; }
+		}
+		
+		/// <include file='IniReader.xml' path='//Property[@name="LineNumber"]/docs/*' />
+		public int LineNumber
+		{
+			get { return lineNumber; }
+		}
+		
+		/// <include file='IniReader.xml' path='//Property[@name="LinePosition"]/docs/*' />
+		public int LinePosition
+		{
+			get { return column; }
+		}
+		
+		/// <include file='IniReader.xml' path='//Property[@name="IgnoreComments"]/docs/*' />
+		public bool IgnoreComments
+		{
+			get { return ignoreComments; }
+			set { ignoreComments = value; }
+		}
+		
+		/// <include file='IniReader.xml' path='//Property[@name="ReadState"]/docs/*' />
+		public IniReadState ReadState
+		{
+			get { return readState; }
+		}
+		#endregion
+		
+		#region Constructors
+		/// <include file='IniReader.xml' path='//Constructor[@name="ConstructorPath"]/docs/*' />
+		public IniReader (string filePath)
+		{
+			textReader = new StreamReader (filePath);
+		}
+		
+		/// <include file='IniReader.xml' path='//Constructor[@name="ConstructorTextReader"]/docs/*' />
+		public IniReader (TextReader reader)
+		{
+			textReader = reader;
+		}
+		
+		/// <include file='IniReader.xml' path='//Constructor[@name="ConstructorStream"]/docs/*' />
+		public IniReader (Stream stream)
+			: this (new StreamReader (stream))
+		{
+		}
+		#endregion
+		
+		#region Public methods
+		/// <include file='IniReader.xml' path='//Method[@name="Read"]/docs/*' />
+		public bool Read ()
+		{
+			bool result = false;
+			
+			if (readState != IniReadState.EndOfFile 
+				|| readState != IniReadState.Closed) {
+				readState = IniReadState.Interactive;
+				result = ReadNext ();
+			}
+			
+			return result;
+		}
+		
+		/// <include file='IniReader.xml' path='//Method[@name="MoveToNextSection"]/docs/*' />
+		public bool MoveToNextSection ()
+		{
+			bool result = false;
+			
+			while (true)
+			{
+				result = Read ();
+
+				if (iniType == IniType.Section || !result) {
+					break;
+				}
+			}
+			
+			return result;
+		}
+		
+		/// <include file='IniReader.xml' path='//Method[@name="MoveToNextKey"]/docs/*' />
+		public bool MoveToNextKey ()
+		{
+			bool result = false;
+			
+			while (true)
+			{
+				result = Read ();
+
+				if (iniType == IniType.Section) {
+					result = false;
+					break;
+				}
+				if (iniType == IniType.Key || !result) {
+					break;
+				}
+			}
+			
+			return result;
+		}
+		
+		/// <include file='IniReader.xml' path='//Method[@name="Close"]/docs/*' />
+		public void Close ()
+		{
+			Reset ();
+			readState = IniReadState.Closed;
+			
+			if (textReader != null) {
+				textReader.Close ();
+			}
+		}
+		#endregion
+		
+		#region Private methods
+		/// <summary>
+		/// Destructor.
+		/// </summary>
+		~IniReader ()
+		{
+			Close ();
+		}
+
+		/// <summary>
+		/// Resets all of the current INI line data.
+		/// </summary>
+		private void Reset ()
+		{
+			this.name.Remove (0, this.name.Length);
+			this.value.Remove (0, this.value.Length);
+			this.comment.Remove (0, this.comment.Length);
+			iniType = IniType.Empty;
+			hasComment = false;
+		}
+		
+		/// <summary>
+		/// Reads the next INI line item.
+		/// </summary>
+		private bool ReadNext ()
+		{
+			bool result = true;
+			int ch = PeekChar ();
+			Reset ();
+
+			switch (ch)
+			{
+				case '#':
+				case ';':
+					iniType = IniType.Empty;
+					ReadChar (); // consume comment character
+					ReadComment ();
+					break;
+				case ' ':
+				case '\t':
+				case '\r':
+					SkipWhitespace ();
+					ReadNext ();
+					break;
+				case '\n':
+					ReadChar ();
+					break;
+				case '[':
+					ReadSection ();
+					break;
+				case -1:
+					readState = IniReadState.EndOfFile;
+					result = false;
+					break;
+				default:
+					ReadKey ();
+					break;
+			}
+			
+			return result;
+		}
+		
+		/// <summary>
+		/// Reads a comment. Must start after the comment delimiter.
+		/// </summary>
+		private void ReadComment  ()
+		{
+			int ch = -1;
+			SkipWhitespace ();
+			hasComment = true;
+
+			do
+			{
+				ch = ReadChar ();
+				this.comment.Append ((char)ch);
+			} while (!EndOfLine (ch));
+			
+			RemoveTrailingWhitespace (this.comment);
+		}
+		
+		/// <summary>
+		/// Removes trailing whitespace from a StringBuilder.
+		/// </summary>
+		private void RemoveTrailingWhitespace (StringBuilder builder)
+		{
+			string temp = builder.ToString ();
+		
+			builder.Remove (0, builder.Length);
+			builder.Append (temp.TrimEnd (null));
+		}
+		
+		/// <summary>
+		/// Reads a key.
+		/// </summary>
+		private void ReadKey ()
+		{
+			int ch = -1;
+			iniType = IniType.Key;
+
+			while (true)
+			{
+				ch = PeekChar ();
+
+				if (ch == '=') { // or ':'
+					ReadChar ();
+					break;
+				}
+				
+				if (EndOfLine (ch)) {
+					throw new IniException (this, "Expected '='");
+				}
+
+				this.name.Append ((char)ReadChar ());
+			}
+			
+			ReadKeyValue ();
+			SearchForComment ();
+			
+			RemoveTrailingWhitespace (this.name);
+
+			if (keyList.Contains (this.name.ToString ())) {
+				throw new IniException (this, "Key found [" + this.name.ToString () +
+										"] with identical name in same section");
+			} else {
+				keyList.Add (this.name.ToString (), null);
+			}
+			
+		}
+		
+		/// <summary>
+		/// Reads the value of a key.
+		/// </summary>
+		private void ReadKeyValue ()
+		{
+			int ch = -1;
+			bool foundQuote = false;
+			int characters = 0;
+			SkipWhitespace ();
+
+			while (true)
+			{
+				ch = PeekChar ();
+
+				if (!IsWhitespace (ch)) {
+					characters++;
+				}
+				
+				if (ch == '"') {
+					ReadChar ();
+
+					if (!foundQuote && characters == 1) {				
+						foundQuote = true;
+						continue;
+					} else {
+						break;
+					}
+				}
+				
+				if (foundQuote && EndOfLine (ch)) {
+					throw new IniException (this, "Expected '\"'");
+				}
+
+				if (IsComment (ch) || EndOfLine (ch)) {
+					break;
+				}
+
+				this.value.Append ((char)ReadChar ());
+			}
+			
+			if (!foundQuote) {
+				RemoveTrailingWhitespace (this.value);
+			}
+		}
+		
+		/// <summary>
+		/// Reads an INI section.
+		/// </summary>
+		private void ReadSection ()
+		{
+			int ch = -1;
+			iniType = IniType.Section;
+			ch = ReadChar (); // consume "["
+			keyList.Clear ();
+
+			while (true)
+			{
+				ch = PeekChar ();
+				if (ch == ']') {
+					break;
+				}
+				if (EndOfLine (ch)) {
+					throw new IniException (this, "Expected ']'");
+				}
+
+				this.name.Append ((char)ReadChar ());
+			}
+			
+			SearchForComment ();
+			
+			RemoveTrailingWhitespace (this.name);
+			
+			if (sectionList.Contains (this.name.ToString ())) {
+				throw new IniException (this, "Section found with identical name");
+			} else {
+				sectionList.Add (this.name.ToString (), null);
+			}
+		}
+		
+		/// <summary>
+		/// Looks for a comment.
+		/// </summary>
+		private void SearchForComment ()
+		{
+			int ch = ReadChar ();
+			
+			while (!EndOfLine (ch))
+			{
+				if (IsComment (ch)) {
+					if (ignoreComments) {
+						ConsumeToEnd ();
+					} else {
+						ReadComment ();
+					}
+					break;
+				}
+				ch = ReadChar ();
+			}
+		}
+
+		/// <summary>
+		/// Consumes all data until the end of a line. 
+		/// </summary>		
+		private void ConsumeToEnd ()
+		{
+			int ch = -1;
+
+			do
+			{
+				ch = ReadChar ();
+			} while (!EndOfLine (ch));
+		}
+		
+		/// <summary>
+		/// Returns and consumes the next character from the stream.
+		/// </summary>
+		private int ReadChar ()
+		{
+			int result = textReader.Read ();
+			
+			if (result == '\n') {
+				lineNumber++;
+				column = 1;
+			} else {
+				column++;
+			}
+			
+			return result;
+		}
+		
+		/// <summary>
+		/// Returns the next upcoming character from the stream.
+		/// </summary>
+		private int PeekChar ()
+		{
+			return textReader.Peek ();
+		}
+		
+		/// <summary>
+		/// Returns true if a comment character is found.
+		/// </summary>
+		private bool IsComment (int ch)
+		{
+			return (ch == ';' || ch == '#');
+		}
+		
+		/// <summary>
+		/// Returns true if a value is whitespace.
+		/// </summary>
+		private bool IsWhitespace (int ch)
+		{
+			return ch == 0x20 || ch == 0x9 || ch == 0xD || ch == 0xA;
+		}
+		
+		/// <summary>
+		/// Skips all whitespace.
+		/// </summary>
+		private void SkipWhitespace ()
+		{
+			while (IsWhitespace (PeekChar ()))
+			{
+				if (EndOfLine (PeekChar ())) {
+					break;
+				}
+
+				ReadChar ();
+			}
+		}
+
+		/// <summary>
+		/// Returns true if an end of line is found.  End of line
+		/// includes both an end of line or end of file.
+		/// </summary>
+		private bool EndOfLine (int ch)
+		{
+			return (ch == '\n' || ch == -1);
+		}
+		#endregion
+	}
+}
\ No newline at end of file

Added: player-sdk/trunk/src/Nini/Ini/IniSection.cs
===================================================================
--- player-sdk/trunk/src/Nini/Ini/IniSection.cs	2004-11-08 23:50:06 UTC (rev 7)
+++ player-sdk/trunk/src/Nini/Ini/IniSection.cs	2004-11-09 12:23:21 UTC (rev 8)
@@ -0,0 +1,164 @@
+#region Copyright
+//
+// Nini Configuration Project.
+// Copyright (C) 2004 Brent R. Matzelle.  All rights reserved.
+//
+// This software is published under the terms of the MIT X11 license, a copy of 
+// which has been included with this distribution in the LICENSE.txt file.
+// 
+#endregion
+
+using System;
+using System.Collections;
+using Nini.Util;
+
+namespace Nini.Ini
+{
+	/// <include file='IniSection.xml' path='//Class[@name="IniSection"]/docs/*' />
+	public class IniSection
+	{
+		#region Private variables
+		OrderedList configList = new OrderedList ();
+		string name = "";
+		string comment = null;
+		int commentCount = 0;
+		#endregion
+
+		#region Constructors
+		/// <include file='IniSection.xml' path='//Constructor[@name="ConstructorComment"]/docs/*' />
+		public IniSection (string name, string comment)
+		{
+			this.name = name;
+			this.comment = comment;
+		}
+		
+		/// <include file='IniSection.xml' path='//Constructor[@name="Constructor"]/docs/*' />
+		public IniSection (string name)
+			: this (name, null)
+		{
+		}
+		#endregion
+		
+		#region Public properties
+		/// <include file='IniSection.xml' path='//Property[@name="Name"]/docs/*' />
+		public string Name
+		{
+			get { return name; }
+		}
+		
+		/// <include file='IniSection.xml' path='//Property[@name="Comment"]/docs/*' />
+		public string Comment
+		{
+			get { return comment; }
+		}
+		
+		/// <include file='IniSection.xml' path='//Property[@name="ItemCount"]/docs/*' />
+		public int ItemCount
+		{
+			get { return configList.Count; }
+		}
+		#endregion
+
+		#region Public methods
+		
+		/// <include file='IniSection.xml' path='//Method[@name="GetValue"]/docs/*' />
+		public string GetValue (string key)
+		{
+			string result = null;
+
+			if (Contains (key)) {
+				IniItem item = (IniItem)configList[key];
+				result = item.Value;
+			}
+
+			return result;
+		}
+		
+		/// <include file='IniSection.xml' path='//Method[@name="GetItem"]/docs/*' />
+		public IniItem GetItem (int index)
+		{
+			return (IniItem)configList[index];
+		}
+		
+		/// <include file='IniSection.xml' path='//Method[@name="GetKeys"]/docs/*' />
+		public string[] GetKeys ()
+		{
+			ArrayList list = new ArrayList ();
+			IniItem item = null;
+			
+			for (int i = 0; i < configList.Count; i++)
+			{
+				item = (IniItem)configList[i]; 
+				if (item.Type == IniType.Key) {
+					list.Add (item.Name);
+				}
+			}
+			string[] result = new string[list.Count];
+			list.CopyTo (result, 0);
+			
+			return result;
+		}
+		
+		/// <include file='IniSection.xml' path='//Method[@name="Contains"]/docs/*' />
+		public bool Contains (string key)
+		{
+			return (configList[key] != null); 
+		}
+		
+		/// <include file='IniSection.xml' path='//Method[@name="SetKeyComment"]/docs/*' />
+		public void Set (string key, string value, string comment)
+		{
+			IniItem item = null;
+
+			if (Contains (key)) {
+				item = (IniItem)configList[key];
+				item.Value = value;
+				item.Comment = comment;
+			} else {
+				item = new IniItem (key, value, IniType.Key, comment);
+				configList.Add (key, item);
+			}
+		}
+
+		/// <include file='IniSection.xml' path='//Method[@name="SetKey"]/docs/*' />
+		public void Set (string key, string value)
+		{
+			IniItem item = null;
+
+			if (Contains (key)) {
+				item = (IniItem)configList[key];
+				item.Value = value;
+				item.Comment = comment;
+			} else {
+				item = new IniItem (key, value, IniType.Key, null);
+				configList.Add (key, item);
+			}
+		}
+		
+		/// <include file='IniSection.xml' path='//Method[@name="SetComment"]/docs/*' />
+		public void Set (string comment)
+		{
+			string name = "#comment" + commentCount;
+			IniItem item = new IniItem (name, null, 
+										IniType.Empty, comment);
+			configList.Add (name, item);
+			
+			commentCount++;
+		}
+		
+		/// <include file='IniSection.xml' path='//Method[@name="SetNoComment"]/docs/*' />
+		public void Set ()
+		{
+			Set (null);
+		}
+		
+		/// <include file='IniSection.xml' path='//Method[@name="Remove"]/docs/*' />
+		public void Remove (string key)
+		{
+			if (Contains (key)) {
+				configList.Remove (key);
+			}
+		}
+		#endregion
+	}
+}
\ No newline at end of file

Added: player-sdk/trunk/src/Nini/Ini/IniSectionCollection.cs
===================================================================
--- player-sdk/trunk/src/Nini/Ini/IniSectionCollection.cs	2004-11-08 23:50:06 UTC (rev 7)
+++ player-sdk/trunk/src/Nini/Ini/IniSectionCollection.cs	2004-11-09 12:23:21 UTC (rev 8)
@@ -0,0 +1,89 @@
+#region Copyright
+//
+// Nini Configuration Project.
+// Copyright (C) 2004 Brent R. Matzelle.  All rights reserved.
+//
+// This software is published under the terms of the MIT X11 license, a copy of 
+// which has been included with this distribution in the LICENSE.txt file.
+// 
+#endregion
+
+using System;
+using System.Collections;
+using Nini.Util;
+
+namespace Nini.Ini
+{
+	/// <include file='IniSectionCollection.xml' path='//Class[@name="IniSectionCollection"]/docs/*' />
+	public class IniSectionCollection : ICollection, IEnumerable
+	{
+		#region Private variables
+		OrderedList list = new OrderedList ();
+		#endregion
+
+		#region Public properties	
+		/// <include file='IniSectionCollection.xml' path='//Property[@name="ItemIndex"]/docs/*' />
+		public IniSection this[int index]
+		{
+			get { return (IniSection)list[index]; }
+		}
+		
+		/// <include file='IniSectionCollection.xml' path='//Property[@name="ItemName"]/docs/*' />
+		public IniSection this[string configName]
+		{
+			get { return (IniSection)list[configName]; }
+		}
+
+		/// <include file='IniSectionCollection.xml' path='//Property[@name="Count"]/docs/*' />
+		public int Count
+		{
+			get { return list.Count; }
+		}
+		
+		/// <include file='IniSectionCollection.xml' path='//Property[@name="SyncRoot"]/docs/*' />
+		public object SyncRoot
+		{
+			get { return list.SyncRoot; }
+		}
+		
+		/// <include file='IniSectionCollection.xml' path='//Property[@name="IsSynchronized"]/docs/*' />
+		public bool IsSynchronized
+		{
+			get { return list.IsSynchronized; }
+		}
+		#endregion
+
+		#region Public methods
+		/// <include file='IniSectionCollection.xml' path='//Method[@name="Add"]/docs/*' />
+		public void Add (IniSection section)
+		{
+			if (list.Contains (section)) {
+				throw new ArgumentException ("IniSection already exists");
+			}
+			
+			list.Add (section.Name, section);
+		}
+		
+		/// <include file='IniSectionCollection.xml' path='//Method[@name="Remove"]/docs/*' />
+		public void Remove (string config)
+		{
+			list.Remove (config);
+		}
+		
+		/// <include file='IniSectionCollection.xml' path='//Method[@name="CopyTo"]/docs/*' />
+		public void CopyTo (Array array, int index) 
+		{
+			list.CopyTo (array, index);
+		}
+
+		/// <include file='IniSectionCollection.xml' path='//Method[@name="GetEnumerator"]/docs/*' />
+		public IEnumerator GetEnumerator () 
+		{
+			return list.GetEnumerator ();
+		}
+		#endregion
+		
+		#region Private methods
+		#endregion
+	}
+}
\ No newline at end of file

Added: player-sdk/trunk/src/Nini/Ini/IniWriter.cs
===================================================================
--- player-sdk/trunk/src/Nini/Ini/IniWriter.cs	2004-11-08 23:50:06 UTC (rev 7)
+++ player-sdk/trunk/src/Nini/Ini/IniWriter.cs	2004-11-09 12:23:21 UTC (rev 8)
@@ -0,0 +1,277 @@
+#region Copyright
+//
+// Nini Configuration Project.
+// Copyright (C) 2004 Brent R. Matzelle.  All rights reserved.
+//
+// This software is published under the terms of the MIT X11 license, a copy of 
+// which has been included with this distribution in the LICENSE.txt file.
+// 
+#endregion
+
+using System;
+using System.IO;
+using System.Text;
+
+namespace Nini.Ini
+{
+	/// <include file='IniWriter.xml' path='//Enum[@name="IniWriteState"]/docs/*' />
+	public enum IniWriteState : int
+	{
+		/// <include file='IniWriter.xml' path='//Enum[@name="IniWriteState"]/Value[@name="Start"]/docs/*' />
+		Start,
+		/// <include file='IniWriter.xml' path='//Enum[@name="IniWriteState"]/Value[@name="BeforeFirstSection"]/docs/*' />
+		BeforeFirstSection,
+		/// <include file='IniWriter.xml' path='//Enum[@name="IniWriteState"]/Value[@name="Section"]/docs/*' />
+		Section,
+		/// <include file='IniWriter.xml' path='//Enum[@name="IniWriteState"]/Value[@name="Closed"]/docs/*' />
+		Closed
+	};
+
+	/// <include file='IniWriter.xml' path='//Class[@name="IniWriter"]/docs/*' />
+	public class IniWriter
+	{
+		#region Private variables
+		int indentation = 0;
+		bool useValueQuotes = false;
+		IniWriteState writeState = IniWriteState.Start;
+		char commentDelimiter = '#';
+		TextWriter textWriter = null;
+		string eol = Environment.NewLine;
+		StringBuilder indentationBuffer = new StringBuilder ();
+		Stream baseStream = null;
+		#endregion
+		
+		#region Public properties
+		/// <include file='IniWriter.xml' path='//Property[@name="Indentation"]/docs/*' />
+		public int Indentation
+		{
+			get { return indentation; }
+			set
+			{
+				if (value < 0)
+					throw new ArgumentException ("Negative values are illegal");
+				
+				indentation = value;
+				indentationBuffer.Remove(0, indentationBuffer.Length);
+				for (int i = 0; i < value; i++)
+					indentationBuffer.Append (' ');
+			}
+		}
+
+		/// <include file='IniWriter.xml' path='//Property[@name="UseValueQuotes"]/docs/*' />
+		public bool UseValueQuotes
+		{
+			get { return useValueQuotes; }
+			set { useValueQuotes = value; }
+		}
+
+		/// <include file='IniWriter.xml' path='//Property[@name="WriteState"]/docs/*' />
+		public IniWriteState WriteState
+		{
+			get { return writeState; }
+		}
+
+		/// <include file='IniWriter.xml' path='//Property[@name="CommentDelimiter"]/docs/*' />
+		public char CommentDelimiter
+		{
+			get { return commentDelimiter; }
+			set
+			{
+				if (value != ';' || value != '#')
+					throw new ArgumentException ("Comment must be ';' or '#'");
+				commentDelimiter = value;
+			}
+		}
+		
+		/// <include file='IniWriter.xml' path='//Property[@name="BaseStream"]/docs/*' />
+		public Stream BaseStream
+		{
+			get { return baseStream; }
+		}
+		#endregion
+		
+		#region Constructors
+		/// <include file='IniWriter.xml' path='//Constructor[@name="ConstructorPath"]/docs/*' />
+		public IniWriter(string filePath)
+			: this (new FileStream (filePath, FileMode.Create, FileAccess.Write, FileShare.None))
+		{
+		}
+		
+		/// <include file='IniWriter.xml' path='//Constructor[@name="ConstructorTextWriter"]/docs/*' />
+		public IniWriter (TextWriter writer)
+		{
+			textWriter = writer;
+			StreamWriter streamWriter = writer as StreamWriter;
+			if (streamWriter != null)
+				baseStream = ((StreamWriter)writer).BaseStream;
+		}
+		
+		/// <include file='IniWriter.xml' path='//Constructor[@name="ConstructorStream"]/docs/*' />
+		public IniWriter (Stream stream)
+			: this (new StreamWriter (stream))
+		{
+		}
+		#endregion
+		
+		#region Public methods
+		/// <include file='IniWriter.xml' path='//Method[@name="Close"]/docs/*' />
+		public void Close ()
+		{
+			textWriter.Close ();
+			writeState = IniWriteState.Closed;
+		}
+		
+		/// <include file='IniWriter.xml' path='//Method[@name="Flush"]/docs/*' />
+		public void Flush ()
+		{
+			textWriter.Flush ();
+		}
+		
+		/// <include file='IniWriter.xml' path='//Method[@name="ToString"]/docs/*' />
+		public override string ToString ()
+		{
+			return textWriter.ToString ();
+		}
+		
+		/// <include file='IniWriter.xml' path='//Method[@name="WriteSection"]/docs/*' />
+		public void WriteSection (string section)
+		{
+			ValidateState ();
+			writeState = IniWriteState.Section;
+			WriteLine ("[" + section + "]");
+		}
+		
+		/// <include file='IniWriter.xml' path='//Method[@name="WriteSectionComment"]/docs/*' />
+		public void WriteSection (string section, string comment)
+		{
+			ValidateState ();
+			writeState = IniWriteState.Section;
+			WriteLine ("[" + section + "]" + Comment(comment));
+		}
+		
+		/// <include file='IniWriter.xml' path='//Method[@name="WriteKey"]/docs/*' />
+		public void WriteKey (string key, string value)
+		{
+			ValidateStateKey ();
+			WriteLine (key + " = " + GetKeyValue (value));
+		}
+		
+		/// <include file='IniWriter.xml' path='//Method[@name="WriteKeyComment"]/docs/*' />
+		public void WriteKey (string key, string value, string comment)
+		{
+			ValidateStateKey ();
+			WriteLine (key + " = " + GetKeyValue (value) + Comment (comment));
+		}
+	
+		/// <include file='IniWriter.xml' path='//Method[@name="WriteEmpty"]/docs/*' />
+		public void WriteEmpty ()
+		{
+			ValidateState ();
+			if (writeState == IniWriteState.Start) {
+				writeState = IniWriteState.BeforeFirstSection;
+			}
+			WriteLine ("");
+		}
+
+		/// <include file='IniWriter.xml' path='//Method[@name="WriteEmptyComment"]/docs/*' />
+		public void WriteEmpty (string comment)
+		{
+			ValidateState ();
+			if (writeState == IniWriteState.Start) {
+				writeState = IniWriteState.BeforeFirstSection;
+			}
+			if (comment == null) {
+				WriteLine ("");
+			} else {
+				WriteLine (commentDelimiter + " " + comment);
+			}
+		}
+		#endregion
+		
+		#region Private methods
+		/// <summary>
+		/// Destructor.
+		/// </summary>
+		~IniWriter ()
+		{
+			Close ();
+		}
+
+		/// <summary>
+		/// Returns the value of a key.
+		/// </summary>
+		private string GetKeyValue (string text)
+		{
+			string result;
+
+			if (useValueQuotes) {
+				result = MassageValue ('"' + text + '"');
+			} else {
+				result = MassageValue (text);
+			}
+			
+			return result;
+		}
+		
+		/// <summary>
+		/// Validates whether a key can be written.
+		/// </summary>
+		private void ValidateStateKey ()
+		{
+			ValidateState ();
+
+			switch (writeState)
+			{
+			case IniWriteState.BeforeFirstSection:
+			case IniWriteState.Start:
+				throw  new InvalidOperationException ("The WriteState is not Section");
+			case IniWriteState.Closed:
+				throw  new InvalidOperationException ("The writer is closed");
+			}
+		}
+		
+		/// <summary>
+		/// Validates the state to determine if the item can be written.
+		/// </summary>
+		private void ValidateState ()
+		{
+			if (writeState == IniWriteState.Closed) {
+				throw  new InvalidOperationException ("The writer is closed");
+			}
+		}
+		
+		/// <summary>
+		/// Returns a formatted comment.
+		/// </summary>
+		private string Comment (string text)
+		{
+			return (text == null) ? "" : (" " + commentDelimiter + " " + text);
+		}
+		
+		/// <summary>
+		/// Writes data to the writer.
+		/// </summary>
+		private void Write (string value)
+		{
+			textWriter.Write (indentationBuffer.ToString () + value);
+		}
+		
+		/// <summary>
+		/// Writes a full line to the writer.
+		/// </summary>
+		private void WriteLine (string value)
+		{
+			Write (value + eol);
+		}
+
+		/// <summary>
+		/// Fixes the incoming value to prevent illegal characters from 
+		/// hurting the integrity of the INI file.
+		/// </summary>
+		private string MassageValue (string text)
+		{
+			return text.Replace ("\n", "");
+		}
+		#endregion
+	}
+}
\ No newline at end of file

Added: player-sdk/trunk/src/Nini/README
===================================================================
--- player-sdk/trunk/src/Nini/README	2004-11-08 23:50:06 UTC (rev 7)
+++ player-sdk/trunk/src/Nini/README	2004-11-09 12:23:21 UTC (rev 8)
@@ -0,0 +1,3 @@
+Nini 0.8
+see http://nini.sf.net
+

Added: player-sdk/trunk/src/Nini/Util/ArgvParser.cs
===================================================================
--- player-sdk/trunk/src/Nini/Util/ArgvParser.cs	2004-11-08 23:50:06 UTC (rev 7)
+++ player-sdk/trunk/src/Nini/Util/ArgvParser.cs	2004-11-09 12:23:21 UTC (rev 8)
@@ -0,0 +1,103 @@
+#region Copyright
+//
+// Nini Configuration Project.
+// Copyright (C) 2004 Brent R. Matzelle.  All rights reserved.
+//
+// This software is published under the terms of the MIT X11 license, a copy of 
+// which has been included with this distribution in the LICENSE.txt file.
+// 
+// Original code written by: R. LOPES (GriffonRL)
+// Article: http://thecodeproject.com/csharp/command_line.asp
+#endregion
+
+using System;
+using System.Collections;
+using System.Collections.Specialized;
+using System.Text.RegularExpressions;
+
+namespace Nini.Util
+{
+	/// <include file='ArgvParser.xml' path='//Class[@name="ArgvParser"]/docs/*' />
+	public class ArgvParser
+	{
+		#region Private variables
+		Hashtable parameters;
+		#endregion
+
+		#region Constructors
+		/// <include file='ArgvParser.xml' path='//Constructor[@name="Constructor"]/docs/*' />
+		public ArgvParser (string[] args)
+		{
+			parameters = new Hashtable ();
+			Regex splitter = new Regex (@"^-{1,2}|^/|=|:", RegexOptions.Compiled);
+			Regex remover = new Regex (@"^['""]?(.*?)['""]?$", RegexOptions.Compiled);
+			string parameter = null;
+			string[] parts;
+
+			// Valid parameters forms:
+			// {-,/,--}param{ ,=,:}((",')value(",'))
+			// Examples: -param1 value1 --param2 /param3:"Test-:-work" /param4=happy -param5 '--=nice=--'
+			foreach (string text in args)
+			{
+				// Look for new parameters (-,/ or --) and a possible enclosed value (=,:)
+				parts = splitter.Split (text, 3);
+				switch (parts.Length)
+				{
+				// Found a value (for the last parameter found (space separator))
+				case 1:
+					if (parameter != null) {
+						if (!parameters.Contains (parameter)) {
+							parts[0] = remover.Replace (parts[0], "$1");
+							parameters.Add (parameter, parts[0]);
+						}
+						parameter = null;
+					}
+					// else Error: no parameter waiting for a value (skipped)
+					break;
+				// Found just a parameter
+				case 2:
+					// The last parameter is still waiting. With no value, set it to true.
+					if (parameter != null) {
+						if (!parameters.Contains (parameter)) {
+							parameters.Add (parameter, "true");
+						}
+					}
+					parameter = parts[1];
+					break;
+				// parameter with enclosed value
+				case 3:
+					// The last parameter is still waiting. With no value, set it to true.
+					if (parameter != null) {
+						if (!parameters.Contains (parameter)) {
+							parameters.Add (parameter, "true");
+						}
+					}
+					parameter = parts[1];
+					// Remove possible enclosing characters  (",')
+					if (!parameters.Contains (parameter)) {
+						parts[2] = remover.Replace (parts[2], "$1");
+						parameters.Add (parameter, parts[2]);
+					}
+					parameter = null;
+					break;
+				}
+			}
+
+			// In case a parameter is still waiting
+			if (parameter !=  null) {
+				if (!parameters.Contains (parameter)) {
+					parameters.Add (parameter, "true");
+				}
+			}
+		}
+		#endregion
+
+		#region Public properties
+		/// <include file='ArgvParser.xml' path='//Property[@name="this"]/docs/*' />
+		public string this [string Param]
+		{
+			get { return (string)parameters[Param]; }
+		}
+		#endregion
+	}
+}

Added: player-sdk/trunk/src/Nini/Util/IOrderedDictionary.cs
===================================================================
--- player-sdk/trunk/src/Nini/Util/IOrderedDictionary.cs	2004-11-08 23:50:06 UTC (rev 7)
+++ player-sdk/trunk/src/Nini/Util/IOrderedDictionary.cs	2004-11-09 12:23:21 UTC (rev 8)
@@ -0,0 +1,14 @@
+using System;
+
+namespace Nini.Util
+{
+	/// <include file='IOrderedDictionary.xml' path='//Interface[@name="IOrderedDictionary"]/docs/*' />
+	public interface IOrderedDictionary
+	{
+		/// <include file='IOrderedDictionary.xml' path='//Method[@name="Insert"]/docs/*' />
+		void Insert (int index, object key, object value);
+
+		/// <include file='IOrderedDictionary.xml' path='//Method[@name="RemoveAt"]/docs/*' />
+		void RemoveAt (int index);
+	}
+}
\ No newline at end of file

Added: player-sdk/trunk/src/Nini/Util/OrderedList.cs
===================================================================
--- player-sdk/trunk/src/Nini/Util/OrderedList.cs	2004-11-08 23:50:06 UTC (rev 7)
+++ player-sdk/trunk/src/Nini/Util/OrderedList.cs	2004-11-09 12:23:21 UTC (rev 8)
@@ -0,0 +1,193 @@
+using System;
+using System.Collections;
+
+namespace Nini.Util
+{
+	//[Serializable]
+	/// <include file='OrderedList.xml' path='//Class[@name="OrderedList"]/docs/*' />
+	public class OrderedList : ICollection, IDictionary, IEnumerable, IOrderedDictionary
+	{
+		#region Private variables
+		Hashtable table = new Hashtable ();
+		ArrayList list = new ArrayList ();
+		#endregion
+
+		#region Public properties
+		/// <include file='OrderedList.xml' path='//Property[@name="Count"]/docs/*' />
+		public int Count 
+		{
+			get { return list.Count; }
+		}
+
+		/// <include file='OrderedList.xml' path='//Property[@name="IsFixedSize"]/docs/*' />
+		public bool IsFixedSize 
+		{
+			get { return false; }
+		}
+
+		/// <include file='OrderedList.xml' path='//Property[@name="IsReadOnly"]/docs/*' />
+		public bool IsReadOnly 
+		{
+			get { return false; }
+		}
+
+		/// <include file='OrderedList.xml' path='//Property[@name="IsSynchronized"]/docs/*' />
+		public bool IsSynchronized 
+		{
+			get { return false; }
+		}
+
+		/// <include file='OrderedList.xml' path='//Property[@name="ItemIndex"]/docs/*' />
+		public object this[int index] 
+		{
+			get { return ((DictionaryEntry) list[index]).Value; }
+			set 
+			{
+				if (index < 0 || index >= Count)
+					throw new ArgumentOutOfRangeException ("index");
+
+				object key = ((DictionaryEntry) list[index]).Key;
+				list[index] = new DictionaryEntry (key, value);
+				table[key] = value;
+			}
+		}
+
+		/// <include file='OrderedList.xml' path='//Property[@name="ItemKey"]/docs/*' />
+		public object this[object key] 
+		{
+			get { return table[key]; }
+			set 
+			{
+				if (table.Contains (key))
+				{
+					table[key] = value;
+					table[IndexOf (key)] = new DictionaryEntry (key, value);
+					return;
+				}
+				Add (key, value);
+			}
+		}
+
+		/// <include file='OrderedList.xml' path='//Property[@name="Keys"]/docs/*' />
+		public ICollection Keys 
+		{
+			get 
+			{ 
+				ArrayList retList = new ArrayList ();
+				for (int i = 0; i < list.Count; i++)
+				{
+					retList.Add ( ((DictionaryEntry)list[i]).Key );
+				}
+				return retList;
+			}
+		}
+
+		/// <include file='OrderedList.xml' path='//Property[@name="Values"]/docs/*' />
+		public ICollection Values 
+		{
+			get 
+			{
+				ArrayList retList = new ArrayList ();
+				for (int i = 0; i < list.Count; i++)
+				{
+					retList.Add ( ((DictionaryEntry)list[i]).Value );
+				}
+				return retList;
+			}
+		}
+
+		/// <include file='OrderedList.xml' path='//Property[@name="SyncRoot"]/docs/*' />
+		public object SyncRoot 
+		{
+			get { return this; }
+		}
+		#endregion
+
+		#region Public methods
+		/// <include file='OrderedList.xml' path='//Method[@name="Add"]/docs/*' />
+		public void Add (object key, object value)
+		{
+			table.Add (key, value);
+			list.Add (new DictionaryEntry (key, value));
+		}
+
+		/// <include file='OrderedList.xml' path='//Method[@name="Clear"]/docs/*' />
+		public void Clear ()
+		{
+			table.Clear ();
+			list.Clear ();
+		}
+
+		/// <include file='OrderedList.xml' path='//Method[@name="Contains"]/docs/*' />
+		public bool Contains (object key)
+		{
+			return table.Contains (key);
+		}
+
+		/// <include file='OrderedList.xml' path='//Method[@name="CopyTo"]/docs/*' />
+		public void CopyTo (Array array, int index)
+		{
+			table.CopyTo (array, index);
+		}
+
+		/// <include file='OrderedList.xml' path='//Method[@name="Insert"]/docs/*' />
+		public void Insert (int index, object key, object value)
+		{
+			if (index > Count)
+				throw new ArgumentOutOfRangeException ("index");
+
+			table.Add (key, value);
+			list.Insert (index, new DictionaryEntry (key, value));
+		}
+
+		/// <include file='OrderedList.xml' path='//Method[@name="Remove"]/docs/*' />
+		public void Remove (object key)
+		{
+			table.Remove (key);
+			list.RemoveAt (IndexOf (key));
+		}
+
+		/// <include file='OrderedList.xml' path='//Method[@name="RemoveAt"]/docs/*' />
+		public void RemoveAt (int index)
+		{
+			if (index >= Count)
+				throw new ArgumentOutOfRangeException ("index");
+
+			table.Remove ( ((DictionaryEntry)list[index]).Key );
+			list.RemoveAt (index);
+		}
+
+		/// <include file='OrderedList.xml' path='//Method[@name="GetEnumerator"]/docs/*' />
+		public IEnumerator GetEnumerator () 
+		{
+			return new OrderedListEnumerator (list);
+		}
+
+		/// <include file='OrderedList.xml' path='//Method[@name="GetDictionaryEnumerator"]/docs/*' />
+		IDictionaryEnumerator IDictionary.GetEnumerator ()
+		{
+			return new OrderedListEnumerator (list);
+		}
+
+		/// <include file='OrderedList.xml' path='//Method[@name="GetIEnumerator"]/docs/*' />
+		IEnumerator IEnumerable.GetEnumerator ()
+		{
+			return new OrderedListEnumerator (list);
+		}
+		#endregion
+
+		#region Private variables
+		private int IndexOf (object key)
+		{
+			for (int i = 0; i < list.Count; i++)
+			{
+				if (((DictionaryEntry) list[i]).Key.Equals (key))
+				{
+					return i;
+				}
+			}
+			return -1;
+		}
+		#endregion
+	}
+}

Added: player-sdk/trunk/src/Nini/Util/OrderedListEnumerator.cs
===================================================================
--- player-sdk/trunk/src/Nini/Util/OrderedListEnumerator.cs	2004-11-08 23:50:06 UTC (rev 7)
+++ player-sdk/trunk/src/Nini/Util/OrderedListEnumerator.cs	2004-11-09 12:23:21 UTC (rev 8)
@@ -0,0 +1,72 @@
+using System;
+using System.Collections;
+
+namespace Nini.Util
+{
+	/// <include file='OrderedListEnumerator.xml' path='//Class[@name="OrderedListEnumerator"]/docs/*' />
+	public class OrderedListEnumerator : IDictionaryEnumerator
+	{
+		#region Private variables
+		int index = -1;
+		ArrayList list;
+		#endregion
+
+		/// <summary>
+		/// Instantiates an ordered list enumerator with an ArrayList.
+		/// </summary>
+		internal OrderedListEnumerator (ArrayList arrayList)
+		{
+			list = arrayList;
+		}
+
+		#region Public properties
+		/// <include file='OrderedListEnumerator.xml' path='//Property[@name="Current"]/docs/*' />
+		public object Current 
+		{
+			get 
+			{
+				if (index < 0 || index >= list.Count)
+					throw new InvalidOperationException ();
+
+				return list[index];
+			}
+		}
+
+		/// <include file='OrderedListEnumerator.xml' path='//Property[@name="Entry"]/docs/*' />
+		public DictionaryEntry Entry 
+		{
+			get { return (DictionaryEntry) Current; }
+		}
+
+		/// <include file='OrderedListEnumerator.xml' path='//Property[@name="Key"]/docs/*' />
+		public object Key 
+		{
+			get { return Entry.Key; }
+		}
+
+		/// <include file='OrderedListEnumerator.xml' path='//Property[@name="Value"]/docs/*' />
+		public object Value 
+		{
+			get { return Entry.Value; }
+		}
+		#endregion
+
+		#region Public methods
+		/// <include file='OrderedListEnumerator.xml' path='//Method[@name="MoveNext"]/docs/*' />
+		public bool MoveNext ()
+		{
+			index++;
+			if (index >= list.Count)
+				return false;
+
+			return true;
+		}
+
+		/// <include file='OrderedListEnumerator.xml' path='//Method[@name="Reset"]/docs/*' />
+		public void Reset ()
+		{
+			index = -1;
+		}
+		#endregion
+	}
+}
\ No newline at end of file

Modified: player-sdk/trunk/src/sources.list
===================================================================
--- player-sdk/trunk/src/sources.list	2004-11-08 23:50:06 UTC (rev 7)
+++ player-sdk/trunk/src/sources.list	2004-11-09 12:23:21 UTC (rev 8)
@@ -14,6 +14,29 @@
 CSSOURCES += ./Configuration/FileStore.cs
 CSSOURCES += ./Configuration/Configuration.cs
 CSSOURCES += ./Player/IPlayerKit.cs
+CSSOURCES += ./Nini/AssemblyInfo.cs
+CSSOURCES += ./Nini/Config/AliasText.cs
+CSSOURCES += ./Nini/Config/ArgvConfigSource.cs
+CSSOURCES += ./Nini/Config/ConfigBase.cs
+CSSOURCES += ./Nini/Config/ConfigCollection.cs
+CSSOURCES += ./Nini/Config/ConfigSourceBase.cs
+CSSOURCES += ./Nini/Config/DotNetConfigSource.cs
+CSSOURCES += ./Nini/Config/IConfig.cs
+CSSOURCES += ./Nini/Config/IConfigSource.cs
+CSSOURCES += ./Nini/Config/IniConfigSource.cs
+CSSOURCES += ./Nini/Config/RegistryConfigSource.cs
+CSSOURCES += ./Nini/Config/XmlConfigSource.cs
+CSSOURCES += ./Nini/Ini/IniDocument.cs
+CSSOURCES += ./Nini/Ini/IniException.cs
+CSSOURCES += ./Nini/Ini/IniItem.cs
+CSSOURCES += ./Nini/Ini/IniReader.cs
+CSSOURCES += ./Nini/Ini/IniSection.cs
+CSSOURCES += ./Nini/Ini/IniSectionCollection.cs
+CSSOURCES += ./Nini/Ini/IniWriter.cs
+CSSOURCES += ./Nini/Util/ArgvParser.cs
+CSSOURCES += ./Nini/Util/IOrderedDictionary.cs
+CSSOURCES += ./Nini/Util/OrderedList.cs
+CSSOURCES += ./Nini/Util/OrderedListEnumerator.cs
 CSSOURCES += ./Kits/IKit.cs
 CSSOURCES += ./Kits/KitManager.cs
 CSSOURCES += ./Addins/AddinLoader.cs



From rubiojr at sheep.berlios.de  Wed Nov 10 18:18:41 2004
From: rubiojr at sheep.berlios.de (Sergio Rubio at BerliOS)
Date: Wed, 10 Nov 2004 18:18:41 +0100
Subject: [Player-sdk-checkins] r9 - in player-sdk/trunk: . DataKits/Sqlite PlayerKits/Gstreamer Plugins Plugins/test examples src src/Addins src/Configuration src/Data src/Global src/Kits src/Player src/Plugins
Message-ID: <200411101718.iAAHIfjx017133@sheep.berlios.de>

Author: rubiojr
Date: 2004-11-10 18:18:40 +0100 (Wed, 10 Nov 2004)
New Revision: 9

Added:
   player-sdk/trunk/Plugins/
   player-sdk/trunk/Plugins/Makefile.am
   player-sdk/trunk/Plugins/test/
   player-sdk/trunk/Plugins/test/Makefile.am
   player-sdk/trunk/Plugins/test/PluginTest.cs
   player-sdk/trunk/examples/PluginManagerTest.cs
   player-sdk/trunk/src/Addins/AbstractAddin.cs
   player-sdk/trunk/src/Data/DataKit.cs
   player-sdk/trunk/src/Global/
   player-sdk/trunk/src/Global/PlayerServices.cs
   player-sdk/trunk/src/Player/PlayerKit.cs
   player-sdk/trunk/src/Plugins/PluginInfoAttribute.cs
   player-sdk/trunk/src/Plugins/PluginLoadingException.cs
Removed:
   player-sdk/trunk/src/Data/IDataKit.cs
   player-sdk/trunk/src/Kits/IKit.cs
   player-sdk/trunk/src/Player/IPlayerKit.cs
   player-sdk/trunk/src/Plugins/IPlugin.cs
Modified:
   player-sdk/trunk/ChangeLog
   player-sdk/trunk/DataKits/Sqlite/SqliteDataKit.cs
   player-sdk/trunk/Makefile.am
   player-sdk/trunk/PlayerKits/Gstreamer/GstPlayer.cs
   player-sdk/trunk/configure.in
   player-sdk/trunk/examples/KitManagerTest.cs
   player-sdk/trunk/examples/Makefile.am
   player-sdk/trunk/examples/PlayerTest.cs
   player-sdk/trunk/src/Addins/AddinLoader.cs
   player-sdk/trunk/src/Addins/IAddin.cs
   player-sdk/trunk/src/Configuration/Configuration.cs
   player-sdk/trunk/src/Kits/KitManager.cs
   player-sdk/trunk/src/Plugins/PluginManager.cs
   player-sdk/trunk/src/sources.list
Log:
* API Refactoring (See ChangeLog)
* Plugins loading mechanism partially implemented.
* Added a very stupid plugin to test it.



Modified: player-sdk/trunk/ChangeLog
===================================================================
--- player-sdk/trunk/ChangeLog	2004-11-09 12:23:21 UTC (rev 8)
+++ player-sdk/trunk/ChangeLog	2004-11-10 17:18:40 UTC (rev 9)
@@ -1,3 +1,47 @@
+2004-11-10  Sergio Rubio  <sergio.rubio at hispalinux.es>
+
+	* DataKits/Sqlite/SqliteDataKit.cs: Adapted to the new API
+	* Makefile.am: Added Plugins subdir
+	* PlayerKits/Gstreamer/GstPlayer.cs: Cleaned and adapted to the new api
+	
+	* Plugins/Makefile.am:
+	* Plugins/test/Makefile.am:
+	* Plugins/test/PluginTest.cs: Added a new Plugin to test the plugin
+	loading mechanism.
+	
+	* configure.in: added new makefiles
+	
+	* examples/Makefile.am: added new Example
+	
+	* examples/PlayerTest.cs: Fixed to use the new api
+	
+	* examples/PluginManagerTest.cs: New example
+	
+	* src/Addins/AbstractAddin.cs:
+	* src/Addins/AddinLoader.cs:
+	* src/Addins/IAddin.cs:
+	* src/Configuration/Configuration.cs:
+	* src/Data/DataKit.cs:
+	* src/Data/IDataKit.cs:
+	* src/Global/PlayerServices.cs:
+	* src/Kits/IKit.cs:
+	* src/Kits/KitManager.cs:
+	* src/Player/IPlayerKit.cs:
+	* src/Player/PlayerKit.cs:
+	* src/Plugins/IPlugin.cs:
+	* src/Plugins/PluginInfoAttribute.cs:
+	* src/Plugins/PluginLoadingException.cs:
+	* src/Plugins/PluginManager.cs:
+	API refactoring: IPlugin and IKit does not exist anymore. There is no
+	difference between them ATM so Kits and Plugins are different implementations of
+	Addins. This makes the api smaller and easier to understand IMHO. AbstractAddin
+	implements some logic, so Plugins and new Kits inherit from this instead
+	of inheriting from IAddin.
+	IDataKit and IPlayerKit are now DataKit and PlayerKit abstract classes
+	inheriting from AbstractAddin.
+	
+	* src/sources.list: updated
+
 2004-11-09  Sergio Rubio  <sergio.rubio at hispalinux.es>
 
 	* TODO: Updated

Modified: player-sdk/trunk/DataKits/Sqlite/SqliteDataKit.cs
===================================================================
--- player-sdk/trunk/DataKits/Sqlite/SqliteDataKit.cs	2004-11-09 12:23:21 UTC (rev 8)
+++ player-sdk/trunk/DataKits/Sqlite/SqliteDataKit.cs	2004-11-10 17:18:40 UTC (rev 9)
@@ -27,7 +27,7 @@
     using System.IO;
     using System.Text;
 
-    public class SqliteDataKit : IDataKit 
+    public class SqliteDataKit : DataKit 
     {
 	private SqliteConnection conn;
 	private string dbfile = "musicdb.sqlite";
@@ -45,28 +45,28 @@
 	}
 
 	private string name = "SqliteDataKit";
-	public string Name {
+	public override string Name {
 		get {
 			return name;
 		}
 	}
 	
 	private string version = "0.1";
-	public string Version {
+	public override string Version {
 		get {
 			return version;
 		}
 	}
 	
 	private string description = "Player.SDK sqlite database kit";
-	public string Description {
+	public override string Description {
 		get {
 			return description;
 		}
 	}
 	
 
-	public ArrayList Songs {
+	public override ArrayList Songs {
 	    get {
 		ArrayList songs = new ArrayList ();
 		SqliteCommand cmd = new SqliteCommand ();
@@ -94,7 +94,7 @@
 	    }
 	}
 
-	public ArrayList Albums {
+	public override ArrayList Albums {
 	    get {
 		ArrayList albums = new ArrayList ();
 		SqliteCommand cmd = new SqliteCommand ();
@@ -117,15 +117,15 @@
 	    }
 	}
 
-	public void Load ()
+	protected override void LoadAddin ()
 	{
 	}
 
-	public void Unload ()
+	protected override void UnloadAddin ()
 	{
 	}
 
-	public bool AddSong (Song song)
+	public override bool AddSong (Song song)
 	{
 	    string artists = ArrayToSqlString (song.Artists);
 	    string performers = ArrayToSqlString (song.Performers);
@@ -150,7 +150,7 @@
 	    return false;
 	}
 
-	public bool AddAlbum (Album album)
+	public override bool AddAlbum (Album album)
 	{
 
 	    string songs = ArrayToSqlString (album.Songs);
@@ -172,7 +172,7 @@
 	    return false;
 	}
 
-	public bool RemoveSong (Song song)
+	public override bool RemoveSong (Song song)
 	{
 	    SqliteCommand cmd = new SqliteCommand ();
 	    cmd.Connection = conn;
@@ -183,7 +183,7 @@
 	    return false;
 	}
 
-	public bool RemoveAlbum (Album album)
+	public override bool RemoveAlbum (Album album)
 	{
 	    SqliteCommand cmd = new SqliteCommand ();
 	    cmd.Connection = conn;
@@ -230,7 +230,7 @@
 	    command.Dispose ();
 	}
 	
-	public string ArrayToSqlString (ArrayList list)
+	private string ArrayToSqlString (ArrayList list)
 	{
 	    StringBuilder builder = new StringBuilder ();
 	    foreach (string s in list)
@@ -241,7 +241,7 @@
 	    return builder.ToString ();
 	}
 
-	public ArrayList SqlStringToArray (string list)
+	private ArrayList SqlStringToArray (string list)
 	{
 	    string[] tokens = list.Split ('%');
 	    ArrayList array = new ArrayList ();

Modified: player-sdk/trunk/Makefile.am
===================================================================
--- player-sdk/trunk/Makefile.am	2004-11-09 12:23:21 UTC (rev 8)
+++ player-sdk/trunk/Makefile.am	2004-11-10 17:18:40 UTC (rev 9)
@@ -1,3 +1,3 @@
-SUBDIRS = src PlayerKits DataKits examples doc
+SUBDIRS = src PlayerKits DataKits examples Plugins doc
 
 EXTRA_DIST = PlayerSdk.ini

Modified: player-sdk/trunk/PlayerKits/Gstreamer/GstPlayer.cs
===================================================================
--- player-sdk/trunk/PlayerKits/Gstreamer/GstPlayer.cs	2004-11-09 12:23:21 UTC (rev 8)
+++ player-sdk/trunk/PlayerKits/Gstreamer/GstPlayer.cs	2004-11-10 17:18:40 UTC (rev 9)
@@ -27,44 +27,27 @@
 using Player.Playlist;
 using Player.Data;
 
-public class GstPlayer : GLib.Object, IPlayerKit
+public class GstPlayer : PlayerKit
 {
 
     private bool stopped = true;
     private IPlaylist playlist;
+	private PlayerObject player = new PlayerObject ();
     
-	/*
-     * Main constructor
-     */
-    public GstPlayer (IPlaylist playlist) : base (IntPtr.Zero)
+    public GstPlayer (IPlaylist playlist)
     {
-		g_type_init ();
 	    this.playlist = playlist;
-	    IntPtr error_ptr;
-	    
-	    Raw = player_new (out error_ptr);
-	    if (error_ptr != IntPtr.Zero) {
-		    string error = GLib.Marshaller.PtrToStringGFree (error_ptr);
-
-		    throw new Exception (error);
-	    }
-	    
-	    ConnectInt.g_signal_connect_data (Raw, "tick", new IntSignalDelegate (TickCallback),
-					      IntPtr.Zero, IntPtr.Zero, 0);
-	    Connect.g_signal_connect_data (Raw, "end_of_stream", new SignalDelegate (EosCallback),
-					   IntPtr.Zero, IntPtr.Zero, 0);
-	    ConnectString.g_signal_connect_data (Raw, "error", new StringSignalDelegate (ErrorCallback),
-						 IntPtr.Zero, IntPtr.Zero, 0);
-
+		player.TickEvent += TickCallback;
+		player.EOSEvent += EosCallback;
 	    playing = false;
     }
+    
+	public override event TickEventHandler TickEvent;
+    public override event EOSEventHandler EOSEvent;
+    public override event StateEventHandler StateEvent;
 
-    public event StateEventHandler StateEvent;
-    /*
-     * Indicates whether the player is playing or paused.
-     */
     private bool playing;
-    public bool Playing {
+    public override bool Playing {
 	    get {
 		    return playing;
 	    }
@@ -85,39 +68,30 @@
 	    }
     }
 
-
-    public event TickEventHandler TickEvent;
-
-    /*
-     * Set or get the position in the song.
-     */
-    public int Position {
+    public override int Position {
 	    get {
-		    return player_tell (Raw);
+			return player.Tell ();
 	    }
 
 	    set {
-		    player_seek (Raw, value);
+		    player.Seek (value);
 
 		    if (TickEvent != null)
 			    TickEvent (value);
 	    }
     }
 
-    /*
-     * Controls the volume level of the player;
-     */
-    public int Volume {
+    public override int Volume {
 	    get {
-		    return player_get_volume (Raw);
+		    return player.Volume;
 	    }
 
 	    set {
-		    player_set_volume (Raw, value);
+			player.Volume = value;
 	    }
     }
 
-    public IPlaylist Playlist {
+    public override IPlaylist Playlist {
 		get {
 			return playlist;
 		}
@@ -128,77 +102,63 @@
     }
 
 	private string name = "GstPlayerKit";
-	public string Name {
+	public override string Name {
 		get {
 			return name;
 		}
 	}
 
 	private string description = "Gstreamer Player Kit";
-	public string Description {
+	public override string Description {
 		get {
 			return description;
 		}
 	}
 
 	private string version = "0.1";
-	public string Version {
+	public override string Version {
 		get {
 			return version;
 		}
 	}
 	
-	public void Load ()
+	protected override void LoadAddin ()
 	{
 	}
 
-	public void Unload ()
+	protected override void UnloadAddin ()
 	{
 	}
 
-    public void Play ()
+    public override void Play ()
     {
 
-	    IntPtr error_ptr;
-
 	    Song song = playlist.Current;
 		if (song == null || !File.Exists(song.Filename))
 		{
 			Console.WriteLine ("WARNING: Playlist empty or invalid.");
 			return;
 		}
-	    player_set_file (Raw, song.Filename , out error_ptr);
-	    if (error_ptr != IntPtr.Zero) {
-		    string error = GLib.Marshaller.PtrToStringGFree (error_ptr);
-		    Console.WriteLine ("Error opening the player");
-	    }
-	    
-	    player_set_replaygain (Raw, song.Gain, song.Peak);
-
 	    if (TickEvent != null)
 		    TickEvent (0);
 
 	    if (!playing)
 			playing = true;
-		Console.WriteLine ("Playing " + song.Filename);
-		player_play (Raw);
+		player.Play (song);
 		
     }
 
-    public void Pause ()
+    public override void Pause ()
     {
-		player_pause (Raw);
+		player.Pause ();
     }
     
-    /*
-     * Stop playing the song.
-     */
-    public void Stop ()
+    public override void Stop ()
     {
 	    if (stopped)
 		    return;
 		    
-	    player_stop (Raw);
+	    player.Stop ();
 	    stopped = true;
 
 	    if (playing == false)
@@ -210,53 +170,136 @@
 		    StateEvent (playing);
     }
     
-    public void Next ()
+    public override void Next ()
     {
-	throw new NotImplementedException ();
+		throw new NotImplementedException ();
     }
     
-    public void Previous ()
+    public override void Previous ()
     {
-	throw new NotImplementedException ();
+		throw new NotImplementedException ();
     }
     
-    public void Repeat (RepetitionType type)
+    public override void Repeat (RepetitionType type)
     {
-	throw new NotImplementedException ();
+		throw new NotImplementedException ();
     }
 
     public GstPlayer () : this (new Playlist ())
     {
     }
 
-    ~GstPlayer ()
+    private void TickCallback (int pos)
+    {	
+	    if (TickEvent != null)
+		    TickEvent (pos);
+    }
+	private void EosCallback ()
     {
-	    Dispose ();
+	    if (EOSEvent != null)
+		{
+		    EOSEvent ();
+		}
     }
 
-    private delegate void SignalDelegate (IntPtr obj);
-    private delegate void IntSignalDelegate (IntPtr obj, int i);
-    private delegate void StringSignalDelegate (IntPtr obj, string s);
+}
 
-    private void TickCallback (IntPtr obj, int pos)
+class PlayerObject : GLib.Object
+{
+
+    public PlayerObject () : base (IntPtr.Zero)
+    {
+		g_type_init ();
+	    IntPtr error_ptr;
+	    
+	    Raw = player_new (out error_ptr);
+	    if (error_ptr != IntPtr.Zero) {
+		    string error = GLib.Marshaller.PtrToStringGFree (error_ptr);
+
+		    throw new Exception (error);
+	    }
+	    
+		ConnectInt.g_signal_connect_data (Raw, "tick", new IntSignalDelegate (TickCallback),
+					      IntPtr.Zero, IntPtr.Zero, 0);
+	    Connect.g_signal_connect_data (Raw, "end_of_stream", new SignalDelegate (EosCallback),
+					   IntPtr.Zero, IntPtr.Zero, 0);
+	    ConnectString.g_signal_connect_data (Raw, "error", new StringSignalDelegate (ErrorCallback),
+						 IntPtr.Zero, IntPtr.Zero, 0);
+    }
+	
+	~PlayerObject ()
+	{
+		Dispose ();
+	}
+    
+	public event TickEventHandler TickEvent;
+    public event EOSEventHandler EOSEvent;
+
+	public int Tell ()
+	{
+		return player_tell (Raw);
+	}
+
+	public void Seek (int value)
+	{
+		player_seek (Raw, value);
+	}
+    
+	public int Volume {
+	    get {
+		    return player_get_volume (Raw);
+	    }
+
+	    set {
+		    player_set_volume (Raw, value);
+	    }
+    }
+    
+	public void Play (Song song)
+    {
+
+	    IntPtr error_ptr;
+
+	    player_set_file (Raw, song.Filename , out error_ptr);
+	    if (error_ptr != IntPtr.Zero) {
+		    string error = GLib.Marshaller.PtrToStringGFree (error_ptr);
+		    Console.WriteLine ("Error opening the player");
+	    }
+	    
+	    player_set_replaygain (Raw, song.Gain, song.Peak);
+		player_play (Raw);
+    }
+    
+	public void Pause ()
+    {
+		player_pause (Raw);
+    }
+    
+	public void Stop ()
+    {
+	    player_stop (Raw);
+    }
+    
+	private void TickCallback (IntPtr obj, int pos)
     {	
 	    if (TickEvent != null)
 		    TickEvent (pos);
     }
-
-    public event EOSEventHandler EOSEvent;
-    
-    private void EosCallback (IntPtr obj)
+	
+	private void ErrorCallback (IntPtr obj, string error)
     {
+		Console.WriteLine ("ERROR ErrorCallback: error");
+    }
+	
+	private void EosCallback (IntPtr obj)
+    {
 	    if (EOSEvent != null)
 		    EOSEvent ();
     }
 
-    private void ErrorCallback (IntPtr obj, string error)
-    {
-	Console.WriteLine ("ERROR ErrorCallback: error");
-    }
-
+    private delegate void SignalDelegate (IntPtr obj);
+    private delegate void IntSignalDelegate (IntPtr obj, int i);
+    private delegate void StringSignalDelegate (IntPtr obj, string s);
     /***********************************************************/	
     /********************** Native calls ***********************/
     /***********************************************************/	
@@ -319,10 +362,5 @@
     private static extern void player_set_replaygain (IntPtr player,
 						      double gain,
 						      double peak);
-    //public static void Main (string[] args)
-    //{
-    //    Gtk.Application.Init ();
-    //    GstPlayer gst = new GstPlayer ();
-    //    Gtk.Application.Run ();
-    //}
+
 }

Added: player-sdk/trunk/Plugins/Makefile.am
===================================================================
--- player-sdk/trunk/Plugins/Makefile.am	2004-11-09 12:23:21 UTC (rev 8)
+++ player-sdk/trunk/Plugins/Makefile.am	2004-11-10 17:18:40 UTC (rev 9)
@@ -0,0 +1 @@
+SUBDIRS = test

Added: player-sdk/trunk/Plugins/test/Makefile.am
===================================================================
--- player-sdk/trunk/Plugins/test/Makefile.am	2004-11-09 12:23:21 UTC (rev 8)
+++ player-sdk/trunk/Plugins/test/Makefile.am	2004-11-10 17:18:40 UTC (rev 9)
@@ -0,0 +1,14 @@
+REFERENCES=								\
+		/r:../../src/Player.Sdk.dll
+
+all: plugin-test.dll
+
+plugin-test.dll: PluginTest.cs
+	mcs -o $@ $(REFERENCES) -t:library PluginTest.cs
+
+pluginsdir=$(prefix)/lib/Player.Sdk/Plugins
+plugins_DATA= plugin-test.dll
+
+CLEANFILES=*.dll
+EXTRA_DIST=*.cs
+

Added: player-sdk/trunk/Plugins/test/PluginTest.cs
===================================================================
--- player-sdk/trunk/Plugins/test/PluginTest.cs	2004-11-09 12:23:21 UTC (rev 8)
+++ player-sdk/trunk/Plugins/test/PluginTest.cs	2004-11-10 17:18:40 UTC (rev 9)
@@ -0,0 +1,63 @@
+/*
+ * Copyright (C) 2004 Sergio Rubio <sergio.rubio at hispalinux.es>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this program; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */
+
+using System;    
+using Player.Addins;
+
+[assembly:PluginInfo ("PluginTest")]
+public class PluginTest : AbstractAddin
+{
+	public PluginTest ()
+	{
+	}
+
+	private string version = "0.1";
+	public override string Version {
+		get {
+			return version;
+		}
+	}
+
+	private string name = "PluginTest";
+	public override string Name {
+		get {
+			return name;
+		}
+	}
+	
+	private string description = "Plugin Test example";
+	public override string Description {
+		get {
+			return description;
+		}
+	}
+
+	protected override void LoadAddin ()
+	{
+		base.Load ();
+		Console.WriteLine ("Calling Load in {0}.", Name);
+	}
+
+	protected override void UnloadAddin ()
+	{
+		base.Unload ();
+		Console.WriteLine ("Calling Unload in {0}.", Name);
+	}
+}
+

Modified: player-sdk/trunk/configure.in
===================================================================
--- player-sdk/trunk/configure.in	2004-11-09 12:23:21 UTC (rev 8)
+++ player-sdk/trunk/configure.in	2004-11-10 17:18:40 UTC (rev 9)
@@ -37,6 +37,8 @@
 Makefile
 examples/Makefile
 doc/Makefile
+Plugins/Makefile
+Plugins/test/Makefile
 src/Makefile
 src/player-sdk.pc
 PlayerKits/Makefile

Modified: player-sdk/trunk/examples/KitManagerTest.cs
===================================================================
--- player-sdk/trunk/examples/KitManagerTest.cs	2004-11-09 12:23:21 UTC (rev 8)
+++ player-sdk/trunk/examples/KitManagerTest.cs	2004-11-10 17:18:40 UTC (rev 9)
@@ -26,7 +26,7 @@
 	public static void Main ()
 	{
 		Application.Init ();
-		KitManager manager = KitManager.GetInstance ();
+		//PlayerServices.KitManager;
 		Application.Run ();
 	}
 }

Modified: player-sdk/trunk/examples/Makefile.am
===================================================================
--- player-sdk/trunk/examples/Makefile.am	2004-11-09 12:23:21 UTC (rev 8)
+++ player-sdk/trunk/examples/Makefile.am	2004-11-10 17:18:40 UTC (rev 9)
@@ -2,7 +2,7 @@
 	-pkg:gtk-sharp				\
 	-r:../src/Player.Sdk.dll
 
-all: db-test.exe kitmanager-test.exe player-test.exe
+all: db-test.exe kitmanager-test.exe player-test.exe pluginmanager-test.exe
 
 db-test.exe: DbTest.cs
 	mcs DbTest.cs -o $@ $(REFERENCES)
@@ -12,6 +12,9 @@
 	
 kitmanager-test.exe: KitManagerTest.cs
 	mcs KitManagerTest.cs -o $@ $(REFERENCES)
+
+pluginmanager-test.exe: PluginManagerTest.cs
+	mcs PluginManagerTest.cs -o $@ $(REFERENCES)
 	
 EXTRA_DIST= *.cs test.ogg
 CLEANFILES= *.exe

Modified: player-sdk/trunk/examples/PlayerTest.cs
===================================================================
--- player-sdk/trunk/examples/PlayerTest.cs	2004-11-09 12:23:21 UTC (rev 8)
+++ player-sdk/trunk/examples/PlayerTest.cs	2004-11-10 17:18:40 UTC (rev 9)
@@ -22,6 +22,7 @@
 using Player.Playlist;
 using Player.Data;
 using Player.Kits;
+using Player.Global;
 using Gtk;
 
 public class PlayerTest
@@ -29,9 +30,10 @@
 	public static void Main ()
 	{
 		Application.Init ();
+		PlayerServices.Init ();
 		Playlist p = new Playlist ();
 		p.Add (new Song ("test.ogg"));
-		IPlayerKit kit = (IPlayerKit) KitManager.GetInstance ()["PlayerKit"];
+		PlayerKit kit = (PlayerKit) PlayerServices.KitManager ["PlayerKit"];
 		kit.EOSEvent += EndOfStream;
 		kit.Volume = 50;
 		kit.Playlist = p;

Added: player-sdk/trunk/examples/PluginManagerTest.cs
===================================================================
--- player-sdk/trunk/examples/PluginManagerTest.cs	2004-11-09 12:23:21 UTC (rev 8)
+++ player-sdk/trunk/examples/PluginManagerTest.cs	2004-11-10 17:18:40 UTC (rev 9)
@@ -0,0 +1,36 @@
+/*
+ * Copyright (C) 2004 Sergio Rubio <sergio.rubio at hispalinux.es>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this program; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */
+
+using System;    
+using System.Collections;
+using Player.Global;
+using Player.Addins;
+
+public class PluginManagerTest
+{
+	public static void Main ()
+	{
+		ArrayList plugins = PlayerServices.PluginManager.GetLoadedPlugins ();
+		foreach (IAddin addin in plugins)
+		{
+			Console.WriteLine ("Plugin loaded: " + addin.Name);
+		}
+	}
+}
+

Added: player-sdk/trunk/src/Addins/AbstractAddin.cs
===================================================================
--- player-sdk/trunk/src/Addins/AbstractAddin.cs	2004-11-09 12:23:21 UTC (rev 8)
+++ player-sdk/trunk/src/Addins/AbstractAddin.cs	2004-11-10 17:18:40 UTC (rev 9)
@@ -0,0 +1,56 @@
+/*
+ * Copyright (C) 2004 Sergio Rubio <sergio.rubio at hispalinux.es>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this program; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */
+
+namespace Player.Addins
+{
+    using System;    
+
+	public abstract class AbstractAddin : IAddin
+	{
+
+		public abstract string Version { get; }
+		public abstract string Name { get; }
+		public abstract string Description { get; }
+		
+		//Template method	
+		public void Load ()
+		{
+			Load ();
+			if (Loaded != null)
+				Loaded (this, EventArgs.Empty);
+		}
+			
+		protected abstract void LoadAddin ();
+
+		//Template method
+		public  void Unload ()
+		{
+			Unload ();
+			if (Unloaded != null)
+				Unloaded (this, EventArgs.Empty);
+		}
+		
+		protected abstract void UnloadAddin ();
+
+		public event EventHandler Loaded;
+		public event EventHandler Unloaded;
+	}
+
+}
+

Modified: player-sdk/trunk/src/Addins/AddinLoader.cs
===================================================================
--- player-sdk/trunk/src/Addins/AddinLoader.cs	2004-11-09 12:23:21 UTC (rev 8)
+++ player-sdk/trunk/src/Addins/AddinLoader.cs	2004-11-10 17:18:40 UTC (rev 9)
@@ -26,6 +26,7 @@
 
 	public class AddinLoader
 	{
+		private static Configuration config = Configuration.GetInstance ();
 
 		public static IAddin LoadAddin (string addinDir, string addinAssembly, string addinType)
 		{
@@ -35,7 +36,7 @@
 			//First, the addin is loaded from the user config dir.
 			//If not, try to the system wide addin.
 			try {
-				string userConfigDir = Configuration.GetInstance ().UserConfigDir;
+				string userConfigDir = config.UserConfigDir;
 				string userAddinLocation;
 				if (addinAssembly.EndsWith (".dll"))
 					userAddinLocation = userConfigDir + separator + addinDir + separator + addinAssembly;
@@ -53,9 +54,10 @@
 				//Loading from system addins
 				} else {
 					Console.WriteLine ("Loading {0} from SYSTEM addins", addinAssembly);
-					string sdkDir = Path.GetDirectoryName (Assembly.GetCallingAssembly ().Location);
-					string systemAddinLocation = sdkDir + separator + "Player.Sdk" + 
-								separator + addinDir + separator + addinAssembly + ".dll";
+					string sdkDir = config.SystemAddinsDir;
+					//string sdkDir = Path.GetDirectoryName (Assembly.GetCallingAssembly ().Location);
+					string systemAddinLocation = sdkDir + separator + 
+								addinDir + separator + addinAssembly + ".dll";
 					Console.WriteLine ("Addin location: {0}", systemAddinLocation);
 					asm = Assembly.LoadFrom (systemAddinLocation);
 					if (asm != null)

Modified: player-sdk/trunk/src/Addins/IAddin.cs
===================================================================
--- player-sdk/trunk/src/Addins/IAddin.cs	2004-11-09 12:23:21 UTC (rev 8)
+++ player-sdk/trunk/src/Addins/IAddin.cs	2004-11-10 17:18:40 UTC (rev 9)
@@ -29,6 +29,9 @@
 		string Description { get; }
 		void Load ();
 		void Unload ();
+
+		event EventHandler Loaded;
+		event EventHandler Unloaded;
 		
 	}
 

Modified: player-sdk/trunk/src/Configuration/Configuration.cs
===================================================================
--- player-sdk/trunk/src/Configuration/Configuration.cs	2004-11-09 12:23:21 UTC (rev 8)
+++ player-sdk/trunk/src/Configuration/Configuration.cs	2004-11-10 17:18:40 UTC (rev 9)
@@ -63,10 +63,23 @@
 
 	public string UserConfigDir {
 	    get {
-		return objStore.Location;
+			return objStore.Location;
 	    }
 	}
 
+	public string UserAddinsDir {
+		get {
+			return UserConfigDir;
+		}
+	}
+
+	public string SystemAddinsDir {
+		get {
+			return Path.GetDirectoryName (Assembly.GetCallingAssembly ().Location) +
+				Path.DirectorySeparatorChar + "Player.Sdk";
+		}
+	}
+
 	public string PlayerKitType {
 	    set {
 	    }

Copied: player-sdk/trunk/src/Data/DataKit.cs (from rev 8, player-sdk/trunk/src/Data/IDataKit.cs)
===================================================================
--- player-sdk/trunk/src/Data/IDataKit.cs	2004-11-09 12:23:21 UTC (rev 8)
+++ player-sdk/trunk/src/Data/DataKit.cs	2004-11-10 17:18:40 UTC (rev 9)
@@ -0,0 +1,42 @@
+/*
+ * Copyright (C) 2004 Sergio Rubio <sergio.rubio at hispalinux.es>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this program; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */
+
+namespace Player.Data 
+{
+    using System;
+    using System.Collections;
+	using Player.Addins;
+
+    public abstract class DataKit : AbstractAddin
+    {
+		public abstract ArrayList Songs { get; }
+
+		public abstract ArrayList Albums { get; }
+
+		public abstract bool AddSong (Song song);
+
+		public abstract bool AddAlbum (Album album);
+
+		public abstract bool RemoveSong (Song song);
+
+		public abstract bool RemoveAlbum (Album album);
+    }
+
+}
+

Deleted: player-sdk/trunk/src/Data/IDataKit.cs
===================================================================
--- player-sdk/trunk/src/Data/IDataKit.cs	2004-11-09 12:23:21 UTC (rev 8)
+++ player-sdk/trunk/src/Data/IDataKit.cs	2004-11-10 17:18:40 UTC (rev 9)
@@ -1,42 +0,0 @@
-/*
- * Copyright (C) 2004 Sergio Rubio <sergio.rubio at hispalinux.es>
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License as
- * published by the Free Software Foundation; either version 2 of the
- * License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * General Public License for more details.
- *
- * You should have received a copy of the GNU General Public
- * License along with this program; if not, write to the
- * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
- * Boston, MA 02111-1307, USA.
- */
-
-namespace Player.Data 
-{
-    using System;
-    using System.Collections;
-	using Player.Kits;
-
-    public interface IDataKit : IKit
-    {
-		ArrayList Songs { get; }
-
-		ArrayList Albums { get; }
-
-		bool AddSong (Song song);
-
-		bool AddAlbum (Album album);
-
-		bool RemoveSong (Song song);
-
-		bool RemoveAlbum (Album album);
-    }
-
-}
-

Added: player-sdk/trunk/src/Global/PlayerServices.cs
===================================================================
--- player-sdk/trunk/src/Global/PlayerServices.cs	2004-11-09 12:23:21 UTC (rev 8)
+++ player-sdk/trunk/src/Global/PlayerServices.cs	2004-11-10 17:18:40 UTC (rev 9)
@@ -0,0 +1,37 @@
+/*
+ * Copyright (C) 2004 Sergio Rubio <sergio.rubio at hispalinux.es>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this program; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */
+
+namespace Player.Global
+{
+    using System;    
+	using Player.Kits;
+	using Player.Plugins;
+	
+	public class PlayerServices
+	{
+		public readonly static PluginManager PluginManager = PluginManager.GetInstance ();
+		public readonly static KitManager KitManager = KitManager.GetInstance ();
+		private PlayerServices () {}
+	
+		public static void Init () {}
+	}
+
+
+}
+

Deleted: player-sdk/trunk/src/Kits/IKit.cs
===================================================================
--- player-sdk/trunk/src/Kits/IKit.cs	2004-11-09 12:23:21 UTC (rev 8)
+++ player-sdk/trunk/src/Kits/IKit.cs	2004-11-10 17:18:40 UTC (rev 9)
@@ -1,30 +0,0 @@
-/*
- * Copyright (C) 2004 Sergio Rubio <sergio.rubio at hispalinux.es>
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License as
- * published by the Free Software Foundation; either version 2 of the
- * License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * General Public License for more details.
- *
- * You should have received a copy of the GNU General Public
- * License along with this program; if not, write to the
- * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
- * Boston, MA 02111-1307, USA.
- */
-
-namespace Player.Kits 
-{
-    using System;    
-	using Player.Addins;
-
-	public interface IKit : IAddin
-	{
-	}
-
-}
-

Modified: player-sdk/trunk/src/Kits/KitManager.cs
===================================================================
--- player-sdk/trunk/src/Kits/KitManager.cs	2004-11-09 12:23:21 UTC (rev 8)
+++ player-sdk/trunk/src/Kits/KitManager.cs	2004-11-10 17:18:40 UTC (rev 9)
@@ -39,20 +39,20 @@
 			LoadKits ();
 		}
 
-		public IKit this [string kitName]
+		public IAddin this [string kitName]
 		{
 			get {
-				return (IKit) kits[kitName];
+				return (IAddin) kits[kitName];
 			}
 
 			set {
-				((IKit)kits[kitName]).Unload ();
+				((IAddin)kits[kitName]).Unload ();
 				value.Load ();
 				kits[kitName] = value; 
 			}
 		}
 
-		public static KitManager GetInstance ()
+		internal static KitManager GetInstance ()
 		{
 			if (instance == null)
 				instance = new KitManager ();
@@ -63,7 +63,7 @@
 		{
 		}
 
-		public void SwapKit (string kitType, IKit kit)
+		public void SwapKit (string kitType, IAddin kit)
 		{
 		}
 

Deleted: player-sdk/trunk/src/Player/IPlayerKit.cs
===================================================================
--- player-sdk/trunk/src/Player/IPlayerKit.cs	2004-11-09 12:23:21 UTC (rev 8)
+++ player-sdk/trunk/src/Player/IPlayerKit.cs	2004-11-10 17:18:40 UTC (rev 9)
@@ -1,35 +0,0 @@
-// created on 08/31/2004 at 13:24
-namespace Player.Player
-{
-
-    using Player.Playlist;
-	using Player.Kits;
-
-	public enum RepetitionType {
-				    RepeatSong,
-				    RepeatPlaylist
-				    }
-	
-	public delegate void EOSEventHandler ();
-	public delegate void TickEventHandler (int pos);
-	public delegate void StateEventHandler (bool playing);
-						
-	public interface IPlayerKit : IKit {
-	
-	    bool Playing {get; set;}
-	    int Position {get; set;}
-	    int Volume {get; set;}
-	    IPlaylist Playlist {get; set;}
-	    void Play ();
-	    void Pause ();
-	    void Stop ();
-	    void Next ();
-	    void Previous ();
-	    void Repeat (RepetitionType type);
-	    
-	    event EOSEventHandler EOSEvent;
-	    event TickEventHandler TickEvent;
-	    event StateEventHandler StateEvent;
-		
-	}
-}

Copied: player-sdk/trunk/src/Player/PlayerKit.cs (from rev 8, player-sdk/trunk/src/Player/IPlayerKit.cs)
===================================================================
--- player-sdk/trunk/src/Player/IPlayerKit.cs	2004-11-09 12:23:21 UTC (rev 8)
+++ player-sdk/trunk/src/Player/PlayerKit.cs	2004-11-10 17:18:40 UTC (rev 9)
@@ -0,0 +1,35 @@
+// created on 08/31/2004 at 13:24
+namespace Player.Player
+{
+
+    using Player.Playlist;
+	using Player.Addins;
+
+	public enum RepetitionType {
+				    RepeatSong,
+				    RepeatPlaylist
+				    }
+	
+	public delegate void EOSEventHandler ();
+	public delegate void TickEventHandler (int pos);
+	public delegate void StateEventHandler (bool playing);
+						
+	public abstract class PlayerKit : AbstractAddin {
+	
+	    public abstract bool Playing {get; set;}
+	    public abstract int Position {get; set;}
+	    public abstract int Volume {get; set;}
+	    public abstract IPlaylist Playlist {get; set;}
+	    public abstract void Play ();
+	    public abstract void Pause ();
+	    public abstract void Stop ();
+	    public abstract void Next ();
+	    public abstract void Previous ();
+	    public abstract void Repeat (RepetitionType type);
+	    
+	    public abstract event EOSEventHandler EOSEvent;
+	    public abstract event TickEventHandler TickEvent;
+	    public abstract event StateEventHandler StateEvent;
+		
+	}
+}

Deleted: player-sdk/trunk/src/Plugins/IPlugin.cs
===================================================================
--- player-sdk/trunk/src/Plugins/IPlugin.cs	2004-11-09 12:23:21 UTC (rev 8)
+++ player-sdk/trunk/src/Plugins/IPlugin.cs	2004-11-10 17:18:40 UTC (rev 9)
@@ -1,30 +0,0 @@
-/*
- * Copyright (C) 2004 Sergio Rubio <sergio.rubio at hispalinux.es>
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License as
- * published by the Free Software Foundation; either version 2 of the
- * License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * General Public License for more details.
- *
- * You should have received a copy of the GNU General Public
- * License along with this program; if not, write to the
- * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
- * Boston, MA 02111-1307, USA.
- */
-
-namespace Player.Plugins 
-{
-    using System;
-	using Player.Addins;
-
-	public interface IPlugin : IAddin
-	{
-	}
-
-}
-

Added: player-sdk/trunk/src/Plugins/PluginInfoAttribute.cs
===================================================================
--- player-sdk/trunk/src/Plugins/PluginInfoAttribute.cs	2004-11-09 12:23:21 UTC (rev 8)
+++ player-sdk/trunk/src/Plugins/PluginInfoAttribute.cs	2004-11-10 17:18:40 UTC (rev 9)
@@ -0,0 +1,37 @@
+/*
+* Copyright (C) 2004 Sergio Rubio <sergio.rubio at hispalinux.es>
+*
+* This program is free software; you can redistribute it and/or
+* modify it under the terms of the GNU General Public License as
+* published by the Free Software Foundation; either version 2 of the
+* License, or (at your option) any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+* General Public License for more details.
+*
+* You should have received a copy of the GNU General Public
+* License along with this program; if not, write to the
+* Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+* Boston, MA 02111-1307, USA.
+*/
+
+using System;
+
+[AttributeUsage (AttributeTargets.Assembly)]
+public class PluginInfoAttribute : Attribute
+{
+
+	public PluginInfoAttribute (string pluginClass)
+	{
+		this.pclass = pluginClass;
+	}
+	
+	private string pclass;
+	public string Class {
+		get {
+			return pclass;
+		}
+	}
+}

Added: player-sdk/trunk/src/Plugins/PluginLoadingException.cs
===================================================================
--- player-sdk/trunk/src/Plugins/PluginLoadingException.cs	2004-11-09 12:23:21 UTC (rev 8)
+++ player-sdk/trunk/src/Plugins/PluginLoadingException.cs	2004-11-10 17:18:40 UTC (rev 9)
@@ -0,0 +1,30 @@
+/*
+ * Copyright (C) 2004 Sergio Rubio <sergio.rubio at hispalinux.es>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this program; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */
+
+namespace Player.Plugins 
+{
+    using System;    
+
+	public class PluginLoadingException : ApplicationException
+	{
+		public PluginLoadingException (string msg) : base (msg) {}
+	}
+
+}
+

Modified: player-sdk/trunk/src/Plugins/PluginManager.cs
===================================================================
--- player-sdk/trunk/src/Plugins/PluginManager.cs	2004-11-09 12:23:21 UTC (rev 8)
+++ player-sdk/trunk/src/Plugins/PluginManager.cs	2004-11-10 17:18:40 UTC (rev 9)
@@ -19,23 +19,63 @@
 
 namespace Player.Plugins 
 {
+	using System.IO;
     using System;
 	using System.Collections;
+	using System.Reflection;
+	using Player.Configuration;
+	using Player.Addins;
 
-	public class PluginManager
+	public class PluginManager : IEnumerable
 	{
 
-		private Hashtable plugins;
-		private Hashtable loadedPlugins;
+		private Hashtable pluginCollection = new Hashtable ();
+		private static Configuration config = Configuration.GetInstance ();
+		private string systemPluginsDir = config.SystemAddinsDir + Path.DirectorySeparatorChar + "Plugins";
+		private string userPluginsDir = config.UserAddinsDir + Path.DirectorySeparatorChar + "Plugins";
+		private static PluginManager manager;
+		
+		private PluginManager () {
+			LoadAllPlugins ();
+		}
 
-		public PluginManager ()
+		internal static PluginManager GetInstance ()
 		{
+			if (manager == null)
+				manager = new PluginManager ();
+			return manager;
 		}
 
 		internal void LoadAllPlugins ()
 		{
+			string[] pluginFiles = Directory.GetFiles (systemPluginsDir);
+			foreach (string pluginFile in pluginFiles)
+			{
+				Assembly pluginAssembly = Assembly.LoadFrom (pluginFile);
+				Type attrType = typeof (PluginInfoAttribute);
+				if (pluginAssembly.IsDefined (attrType, false))
+				{
+					PluginInfoAttribute attr = (PluginInfoAttribute) pluginAssembly.GetCustomAttributes (attrType, false)[0];
+					IAddin plugin = (IAddin) pluginAssembly.CreateInstance (attr.Class);
+					if (plugin != null)
+						AddPluginToCollections (plugin);
+						
+				} else
+					Console.WriteLine ("Invalid plugin");
+			}
+
 		}
 
+		public IEnumerator GetEnumerator ()
+		{
+			return pluginCollection.GetEnumerator ();
+		}
+
+		public ArrayList GetLoadedPlugins ()
+		{
+			return new ArrayList (pluginCollection.Values);
+		}
+
 		public void UnloadPlugin (string pluginId)
 		{
 		}
@@ -55,6 +95,23 @@
 		public void EnablePlugin (string pluginId)
 		{
 		}
+
+		public string MakePluginHash (IAddin plugin)
+		{
+			return plugin.Name;	
+		}
+
+		//FIXME: Check if the plugin has been disabled and do not load it
+		private void AddPluginToCollections (IAddin plugin)
+		{
+			string hash = MakePluginHash (plugin);
+			if (pluginCollection.Contains (hash))
+				throw new PluginLoadingException ("Plugin already loaded.");
+			else
+			{
+				pluginCollection.Add (hash, plugin);
+			}
+		}
 	}
 
 }

Modified: player-sdk/trunk/src/sources.list
===================================================================
--- player-sdk/trunk/src/sources.list	2004-11-09 12:23:21 UTC (rev 8)
+++ player-sdk/trunk/src/sources.list	2004-11-10 17:18:40 UTC (rev 9)
@@ -4,16 +4,16 @@
 CSSOURCES += ./Data/AlbumMetadata.cs
 CSSOURCES += ./Data/ICoverDb.cs
 CSSOURCES += ./Data/Cover.cs
+CSSOURCES += ./Data/DataKit.cs
 CSSOURCES += ./Data/Album.cs
 CSSOURCES += ./Data/IAlbumComparer.cs
 CSSOURCES += ./Data/ISearchable.cs
 CSSOURCES += ./Data/Song.cs
 CSSOURCES += ./Data/SongMetadata.cs
 CSSOURCES += ./Data/ISongComparer.cs
-CSSOURCES += ./Data/IDataKit.cs
 CSSOURCES += ./Configuration/FileStore.cs
 CSSOURCES += ./Configuration/Configuration.cs
-CSSOURCES += ./Player/IPlayerKit.cs
+CSSOURCES += ./Player/PlayerKit.cs
 CSSOURCES += ./Nini/AssemblyInfo.cs
 CSSOURCES += ./Nini/Config/AliasText.cs
 CSSOURCES += ./Nini/Config/ArgvConfigSource.cs
@@ -37,11 +37,13 @@
 CSSOURCES += ./Nini/Util/IOrderedDictionary.cs
 CSSOURCES += ./Nini/Util/OrderedList.cs
 CSSOURCES += ./Nini/Util/OrderedListEnumerator.cs
-CSSOURCES += ./Kits/IKit.cs
 CSSOURCES += ./Kits/KitManager.cs
 CSSOURCES += ./Addins/AddinLoader.cs
 CSSOURCES += ./Addins/IAddin.cs
+CSSOURCES += ./Addins/AbstractAddin.cs
 CSSOURCES += ./Addins/AddinUnavailableException.cs
 CSSOURCES += ./Addins/AddinLoadingException.cs
-CSSOURCES += ./Plugins/IPlugin.cs
 CSSOURCES += ./Plugins/PluginManager.cs
+CSSOURCES += ./Plugins/PluginInfoAttribute.cs
+CSSOURCES += ./Plugins/PluginLoadingException.cs
+CSSOURCES += ./Global/PlayerServices.cs



